# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-01-10 13:05
from __future__ import unicode_literals

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='user',
            fields=[
                ('idx', models.AutoField(db_column='user_idx', primary_key=True, serialize=False)),
                ('active', models.BooleanField(default=True)),
                ('login', models.CharField(max_length=255, unique=True)),
                ('uid', models.IntegerField(unique=True)),
                ('aliases', models.TextField(blank=True, default='', null=True)),
                ('home', models.CharField(blank=True, default='', max_length=128)),
                ('shell', models.CharField(blank=True, default='/bin/bash', max_length=765)),
                ('password', models.CharField(blank=True, max_length=128)),
                ('password_ssha', models.CharField(blank=True, default='', max_length=128)),
                ('nt_password', models.CharField(blank=True, default='', max_length=255)),
                ('lm_password', models.CharField(blank=True, default='', max_length=255)),
                ('first_name', models.CharField(blank=True, default='', max_length=765)),
                ('last_name', models.CharField(blank=True, default='', max_length=765)),
                ('title', models.CharField(blank=True, default='', max_length=765)),
                ('email', models.CharField(blank=True, default='', max_length=765)),
                ('pager', models.CharField(blank=True, default='', max_length=765, verbose_name='mobile')),
                ('tel', models.CharField(blank=True, default='', max_length=765)),
                ('comment', models.CharField(blank=True, default='', max_length=765)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('home_dir_created', models.BooleanField(default=False)),
                ('last_login', models.DateTimeField(null=True)),
                ('login_count', models.IntegerField(default=0)),
                ('login_fail_count', models.IntegerField(default=0)),
                ('is_superuser', models.BooleanField(default=False)),
                ('db_is_auth_for_password', models.BooleanField(default=False)),
                ('only_webfrontend', models.BooleanField(default=False)),
                ('create_rms_user', models.BooleanField(default=False)),
                ('rms_user_created', models.BooleanField(default=False)),
                ('scan_user_home', models.BooleanField(default=False)),
                ('scan_depth', models.IntegerField(default=2)),
            ],
            options={
                'ordering': ('login', 'group__groupname'),
                'db_table': 'user',
                'verbose_name': 'User',
            },
        ),
        migrations.CreateModel(
            name='architecture',
            fields=[
                ('idx', models.AutoField(db_column='architecture_idx', primary_key=True, serialize=False)),
                ('architecture', models.CharField(default='', max_length=128, unique=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'architecture',
                'verbose_name': 'Architecture',
            },
        ),
        migrations.CreateModel(
            name='AssetBatch',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('run_start_time', models.DateTimeField(blank=True, null=True)),
                ('run_end_time', models.DateTimeField(blank=True, null=True)),
                ('run_status', models.IntegerField(choices=[(1, b'PLANNED'), (2, b'RUNNING'), (3, b'FINISHED_RUNS'), (4, b'GENERATING_ASSETS'), (5, b'FINISHED')], default=1)),
                ('error_string', models.TextField(default='')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('installed_packages_status', models.IntegerField(default=0)),
                ('cpus_status', models.IntegerField(default=0)),
                ('memory_modules_status', models.IntegerField(default=0)),
                ('gpus_status', models.IntegerField(default=0)),
                ('displays_status', models.IntegerField(default=0)),
                ('partition_table_status', models.IntegerField(default=0)),
                ('network_devices_status', models.IntegerField(default=0)),
                ('pending_updates_status', models.IntegerField(default=0)),
                ('installed_updates_status', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='AssetDMIHandle',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('handle', models.IntegerField(default=0)),
                ('dmi_type', models.IntegerField(default=0)),
                ('header', models.CharField(default='', max_length=128)),
                ('length', models.IntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='AssetDMIHead',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('version', models.CharField(default='', max_length=63)),
                ('size', models.IntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='AssetDMIValue',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(default='', max_length=128)),
                ('single_value', models.BooleanField(default=True)),
                ('num_values', models.IntegerField(default=1)),
                ('value', models.TextField(default='')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('dmihandle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.AssetDMIHandle')),
            ],
        ),
        migrations.CreateModel(
            name='AssetHardwareEntry',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.TextField(default='')),
                ('attributes', models.TextField(default='')),
                ('depth', models.IntegerField(default=0)),
                ('info_list', models.TextField(default='')),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('idx',),
            },
        ),
        migrations.CreateModel(
            name='AssetHWCPUEntry',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(null=True)),
                ('numberofcores', models.IntegerField(null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='AssetHWDisplayEntry',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(null=True)),
                ('xpixels', models.IntegerField(null=True)),
                ('ypixels', models.IntegerField(null=True)),
                ('manufacturer', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AssetHWGPUEntry',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='AssetHWMemoryEntry',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('banklabel', models.TextField(null=True)),
                ('formfactor', models.TextField(null=True)),
                ('memorytype', models.TextField(null=True)),
                ('manufacturer', models.TextField(null=True)),
                ('capacity', models.BigIntegerField(null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='AssetHWNetworkDevice',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('manufacturer', models.TextField(null=True)),
                ('product_name', models.TextField(null=True)),
                ('device_name', models.TextField(null=True)),
                ('speed', models.BigIntegerField(null=True)),
                ('mac_address', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AssetLicenseEntry',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=255)),
                ('license_key', models.CharField(default='', max_length=255)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='AssetPackage',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('package_type', models.IntegerField(choices=[(1, b'WINDOWS'), (2, b'LINUX')])),
            ],
        ),
        migrations.CreateModel(
            name='AssetPackageVersion',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('info', models.TextField(default='')),
                ('version', models.TextField(blank=True, default='')),
                ('release', models.TextField(blank=True, default='')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('asset_package', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.AssetPackage')),
            ],
        ),
        migrations.CreateModel(
            name='AssetPackageVersionInstallInfo',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('timestamp', models.BigIntegerField(null=True)),
                ('size', models.BigIntegerField(null=True)),
                ('package_version', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.AssetPackageVersion')),
            ],
        ),
        migrations.CreateModel(
            name='AssetPCIEntry',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('domain', models.IntegerField(default=0)),
                ('bus', models.IntegerField(default=0)),
                ('slot', models.IntegerField(default=0)),
                ('func', models.IntegerField(default=0)),
                ('pci_class', models.IntegerField(default=0)),
                ('subclass', models.IntegerField(default=0)),
                ('device', models.IntegerField(default=0)),
                ('vendor', models.IntegerField(default=0)),
                ('revision', models.IntegerField(default=0)),
                ('pci_classname', models.CharField(default='', max_length=255)),
                ('subclassname', models.CharField(default='', max_length=255)),
                ('devicename', models.CharField(default='', max_length=255)),
                ('vendorname', models.CharField(default='', max_length=255)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('domain', 'bus', 'slot', 'func'),
            },
        ),
        migrations.CreateModel(
            name='AssetProcessEntry',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('pid', models.IntegerField(default=0)),
                ('name', models.CharField(default='', max_length=255)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('pid',),
            },
        ),
        migrations.CreateModel(
            name='AssetRun',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('run_index', models.IntegerField(default=1)),
                ('run_status', models.IntegerField(choices=[(1, b'PLANNED'), (2, b'SCANNING'), (3, b'FINISHED_SCANNING'), (4, b'GENERATING_ASSETS'), (5, b'FINISHED')], default=1)),
                ('run_result', models.IntegerField(choices=[(1, b'UNKNOWN'), (2, b'SUCCESS'), (3, b'WARNING'), (4, b'FAILED'), (5, b'CANCELED')], default=1)),
                ('run_type', models.IntegerField(choices=[(1, b'PACKAGE'), (2, b'HARDWARE'), (3, b'LICENSE'), (4, b'UPDATE'), (5, b'LSHW'), (6, b'PROCESS'), (7, b'PENDING_UPDATE'), (8, b'DMI'), (9, b'PCI'), (10, b'PRETTYWINHW'), (11, b'PARTITION'), (12, b'LSBLK'), (13, b'XRANDR')], default=1)),
                ('run_start_time', models.DateTimeField(blank=True, null=True)),
                ('run_end_time', models.DateTimeField(blank=True, null=True)),
                ('run_duration', models.IntegerField(default=0)),
                ('generate_duration', models.FloatField(default=0.0)),
                ('error_string', models.TextField(default='')),
                ('interpret_error_string', models.TextField(default='')),
                ('batch_index', models.IntegerField(default=0)),
                ('raw_result_str', models.TextField(null=True)),
                ('raw_result_interpreted', models.BooleanField(default=False)),
                ('scan_type', models.IntegerField(choices=[(1, b'HM'), (2, b'NRPE')], null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('asset_batch', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.AssetBatch')),
            ],
        ),
        migrations.CreateModel(
            name='AssetUpdateEntry',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=255)),
                ('version', models.CharField(default='', max_length=255)),
                ('release', models.CharField(default='', max_length=255)),
                ('kb_idx', models.IntegerField(default=0)),
                ('install_date', models.DateTimeField(null=True)),
                ('status', models.CharField(default='', max_length=128)),
                ('optional', models.BooleanField(default=True)),
                ('installed', models.BooleanField(default=False)),
                ('new_version', models.CharField(default='', max_length=64)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='background_job',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('cause', models.CharField(default='unknown', max_length=256)),
                ('command', models.CharField(max_length=256)),
                ('options', models.CharField(default='', max_length=256)),
                ('state', models.CharField(choices=[('pre-init', 'before cluster-server detection'), ('pending', 'init and awaiting processing'), ('done', 'job finished'), ('timeout', 'timeout'), ('merged', 'merged with other job')], default='pre-init', max_length=128)),
                ('command_xml', models.TextField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('valid_until', models.DateTimeField(null=True)),
                ('num_servers', models.IntegerField(default=0)),
                ('num_objects', models.IntegerField(default=0)),
                ('result', models.IntegerField(default=4)),
            ],
            options={
                'ordering': ('-date',),
                'verbose_name': 'Background jobs',
            },
        ),
        migrations.CreateModel(
            name='background_job_run',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('command_xml', models.TextField()),
                ('state', models.IntegerField(default=4)),
                ('result', models.TextField(default='')),
                ('result_xml', models.TextField(null=True)),
                ('start', models.DateTimeField(null=True)),
                ('end', models.DateTimeField(null=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('background_job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.background_job')),
            ],
            options={
                'ordering': ('date',),
                'verbose_name': 'Background job run',
            },
        ),
        migrations.CreateModel(
            name='category',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=64)),
                ('full_name', models.TextField(blank=True, default='')),
                ('depth', models.IntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('immutable', models.BooleanField(default=False)),
                ('useable', models.BooleanField(default=True)),
                ('physical', models.BooleanField(default=True)),
                ('latitude', models.FloatField(default=48.1)),
                ('longitude', models.FloatField(default=16.3)),
                ('locked', models.BooleanField(default=False)),
                ('asset', models.BooleanField(default=False)),
                ('comment', models.CharField(blank=True, default='', max_length=256)),
                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.category')),
            ],
            options={
                'verbose_name': 'Category',
            },
        ),
        migrations.CreateModel(
            name='cd_connection',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('connection_info', models.CharField(default=b'not set', max_length=256)),
                ('parameter_i1', models.IntegerField(default=0)),
                ('parameter_i2', models.IntegerField(default=0)),
                ('parameter_i3', models.IntegerField(default=0)),
                ('parameter_i4', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('parent__name', 'child__name'),
                'verbose_name': 'Controlling device connection',
            },
        ),
        migrations.CreateModel(
            name='ComCapability',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('matchcode', models.CharField(max_length=16, unique=True)),
                ('name', models.CharField(max_length=16, unique=True)),
                ('info', models.CharField(max_length=64)),
                ('port_spec', models.CharField(default='', max_length=256)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='config',
            fields=[
                ('idx', models.AutoField(db_column='new_config_idx', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=192)),
                ('description', models.CharField(blank=True, default='', max_length=765)),
                ('priority', models.IntegerField(default=0, null=True)),
                ('server_config', models.BooleanField(default=False)),
                ('enabled', models.BooleanField(default=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('categories', models.ManyToManyField(blank=True, to='backbone.category')),
            ],
            options={
                'ordering': ['name', 'config_catalog__name'],
                'db_table': 'new_config',
                'verbose_name': 'Configuration',
            },
        ),
        migrations.CreateModel(
            name='config_blob',
            fields=[
                ('idx', models.AutoField(db_column='config_blob_idx', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=192)),
                ('description', models.CharField(db_column='descr', max_length=765)),
                ('config_old', models.IntegerField(blank=True, db_column='config', null=True)),
                ('value', models.TextField(blank=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('config', models.ForeignKey(db_column='new_config_id', on_delete=django.db.models.deletion.CASCADE, to='backbone.config')),
            ],
            options={
                'db_table': 'config_blob',
                'verbose_name': 'Configuration variable (blob)',
            },
        ),
        migrations.CreateModel(
            name='config_bool',
            fields=[
                ('idx', models.AutoField(db_column='config_bool_idx', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=192)),
                ('description', models.CharField(db_column='descr', max_length=765)),
                ('config_old', models.IntegerField(blank=True, db_column='config', null=True)),
                ('value', models.IntegerField(blank=True, null=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('config', models.ForeignKey(db_column='new_config_id', on_delete=django.db.models.deletion.CASCADE, to='backbone.config')),
            ],
            options={
                'db_table': 'config_bool',
                'verbose_name': 'Configuration variable (boolean)',
            },
        ),
        migrations.CreateModel(
            name='config_catalog',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=254, unique=True)),
                ('url', models.URLField(blank=True, default='', max_length=256)),
                ('author', models.CharField(blank=True, default='', max_length=256)),
                ('version', models.IntegerField(default=1)),
                ('system_catalog', models.BooleanField(default=False)),
                ('priority', models.IntegerField(default=0)),
                ('extraction_time', models.DateTimeField(blank=True, null=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Configuration catalog',
            },
        ),
        migrations.CreateModel(
            name='config_hint',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('config_name', models.CharField(max_length=192, unique=True)),
                ('config_description', models.CharField(default='', max_length=192)),
                ('valid_for_meta', models.BooleanField(default=True)),
                ('exact_match', models.BooleanField(default=True)),
                ('help_text_short', models.TextField(default='')),
                ('help_text_html', models.TextField(default='')),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='config_int',
            fields=[
                ('idx', models.AutoField(db_column='config_int_idx', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=192)),
                ('description', models.CharField(db_column='descr', max_length=765)),
                ('config_old', models.IntegerField(blank=True, db_column='config', null=True)),
                ('value', models.IntegerField(blank=True, null=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('config', models.ForeignKey(db_column='new_config_id', on_delete=django.db.models.deletion.CASCADE, to='backbone.config')),
            ],
            options={
                'db_table': 'config_int',
                'verbose_name': 'Configuration variable (integer)',
            },
        ),
        migrations.CreateModel(
            name='config_script',
            fields=[
                ('idx', models.AutoField(db_column='config_script_idx', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=192)),
                ('description', models.CharField(blank=True, db_column='descr', max_length=765)),
                ('enabled', models.BooleanField(default=True)),
                ('priority', models.IntegerField(blank=True, default=0, null=True)),
                ('value', models.TextField(blank=True)),
                ('error_text', models.TextField(blank=True, default='')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('config', models.ForeignKey(db_column='new_config_id', on_delete=django.db.models.deletion.CASCADE, to='backbone.config')),
            ],
            options={
                'ordering': ('priority', 'name'),
                'db_table': 'config_script',
                'verbose_name': 'Configuration script',
            },
        ),
        migrations.CreateModel(
            name='config_script_hint',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('script_name', models.CharField(default='', max_length=192)),
                ('help_text_short', models.TextField(default='')),
                ('help_text_html', models.TextField(default='')),
                ('ac_flag', models.BooleanField(default=False)),
                ('ac_description', models.CharField(default='description', max_length=128)),
                ('ac_value', models.TextField(default='')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('config_hint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.config_hint')),
            ],
        ),
        migrations.CreateModel(
            name='config_str',
            fields=[
                ('idx', models.AutoField(db_column='config_str_idx', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=192)),
                ('description', models.CharField(db_column='descr', max_length=765)),
                ('config_old', models.IntegerField(blank=True, db_column='config', null=True)),
                ('value', models.TextField(blank=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('config', models.ForeignKey(db_column='new_config_id', on_delete=django.db.models.deletion.CASCADE, to='backbone.config')),
            ],
            options={
                'ordering': ('name',),
                'db_table': 'config_str',
                'verbose_name': 'Configuration variable (string)',
            },
        ),
        migrations.CreateModel(
            name='config_var_hint',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('var_name', models.CharField(default='', max_length=192)),
                ('help_text_short', models.TextField(default='')),
                ('help_text_html', models.TextField(default='')),
                ('ac_flag', models.BooleanField(default=False)),
                ('ac_type', models.CharField(choices=[('str', 'string var'), ('int', 'int var'), ('bool', 'bool var')], default='str', max_length=64)),
                ('ac_description', models.CharField(default='description', max_length=128)),
                ('ac_value', models.TextField(default='')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('config_hint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.config_hint')),
            ],
        ),
        migrations.CreateModel(
            name='ConfigServiceEnum',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('enum_name', models.CharField(default='', max_length=255, unique=True)),
                ('name', models.CharField(default='', max_length=255, unique=True)),
                ('info', models.TextField(blank=True, default='')),
                ('root_service', models.BooleanField(default=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='ConfigTreeNode',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('is_dir', models.BooleanField(default=False)),
                ('is_link', models.BooleanField(default=False)),
                ('intermediate', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='csw_object_permission',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('object_pk', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Object permission',
            },
        ),
        migrations.CreateModel(
            name='csw_permission',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=150)),
                ('codename', models.CharField(max_length=150)),
                ('valid_for_object_level', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'ordering': ('content_type__app_label', 'content_type__model', 'name'),
                'verbose_name': 'Global permission',
            },
        ),
        migrations.CreateModel(
            name='DeleteRequest',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('obj_pk', models.IntegerField()),
                ('model', models.TextField()),
                ('delete_strategies', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='device',
            fields=[
                ('idx', models.AutoField(db_column=b'device_idx', primary_key=True, serialize=False)),
                ('name', models.CharField(default=b'', max_length=192)),
                ('alias', models.CharField(blank=True, default=b'', max_length=384)),
                ('comment', models.CharField(blank=True, default=b'', max_length=384)),
                ('etherboot_valid', models.BooleanField(default=False)),
                ('kernel_append', models.CharField(blank=True, max_length=384)),
                ('stage1_flavour', models.CharField(blank=True, default=b'cpio', max_length=48)),
                ('partdev', models.CharField(blank=True, max_length=192)),
                ('fixed_partdev', models.IntegerField(blank=True, null=True)),
                ('rsync', models.BooleanField(default=False)),
                ('rsync_compressed', models.BooleanField(default=False)),
                ('reachable_via_bootserver', models.BooleanField(default=False)),
                ('dhcp_mac', models.NullBooleanField(default=False)),
                ('dhcp_write', models.NullBooleanField(default=False)),
                ('dhcp_written', models.NullBooleanField(default=False)),
                ('dhcp_error', models.CharField(blank=True, max_length=765)),
                ('last_install', models.CharField(blank=True, max_length=192)),
                ('last_boot', models.CharField(blank=True, max_length=192)),
                ('last_kernel', models.CharField(blank=True, max_length=192)),
                ('root_passwd', models.CharField(blank=True, max_length=192)),
                ('monitor_checks', models.BooleanField(db_column=b'nagios_checks', default=True, verbose_name=b'Checks enabled')),
                ('enable_perfdata', models.BooleanField(default=True, verbose_name=b'enable perfdata, check IPMI, SNMP and WMI')),
                ('flap_detection_enabled', models.BooleanField(default=True)),
                ('uuid', models.TextField(default=b'', max_length=64)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('automap_root_nagvis', models.BooleanField(default=False)),
                ('enabled', models.BooleanField(default=True)),
                ('mon_resolve_name', models.BooleanField(default=True, verbose_name=b'Resolve to IP for monitoring')),
                ('store_rrd_data', models.BooleanField(default=True)),
                ('has_active_rrds', models.BooleanField(default=False)),
                ('is_meta_device', models.BooleanField(default=False)),
                ('dynamic_checks', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('name',),
                'db_table': 'device',
                'verbose_name': 'Device',
            },
        ),
        migrations.CreateModel(
            name='device_config',
            fields=[
                ('idx', models.AutoField(db_column='device_config_idx', primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('config', models.ForeignKey(db_column='new_config_id', on_delete=django.db.models.deletion.CASCADE, to='backbone.config')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
            ],
            options={
                'db_table': 'device_config',
                'verbose_name': 'Device configuration',
            },
        ),
        migrations.CreateModel(
            name='device_group',
            fields=[
                ('idx', models.AutoField(db_column=b'device_group_idx', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=192, unique=True)),
                ('description', models.CharField(blank=True, default=b'', max_length=384)),
                ('cluster_device_group', models.BooleanField(default=False)),
                ('enabled', models.BooleanField(default=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(blank=True, db_column=b'device', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='group_device', to='backbone.device')),
            ],
            options={
                'ordering': ('-cluster_device_group', 'name'),
                'db_table': 'device_group',
                'verbose_name': 'Device group',
            },
        ),
        migrations.CreateModel(
            name='device_mon_location',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('pos_x', models.IntegerField(default=0)),
                ('pos_y', models.IntegerField(default=0)),
                ('locked', models.BooleanField(default=False)),
                ('comment', models.TextField(blank=True, default='')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.category')),
            ],
            options={
                'verbose_name': 'Monitoring location',
            },
        ),
        migrations.CreateModel(
            name='device_rsync_config',
            fields=[
                ('idx', models.AutoField(db_column=b'device_rsync_config_idx', primary_key=True, serialize=False)),
                ('last_rsync_time', models.DateTimeField(blank=True, null=True)),
                ('status', models.TextField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('config', models.ForeignKey(db_column=b'new_config_id', on_delete=django.db.models.deletion.CASCADE, to='backbone.config')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
            ],
            options={
                'db_table': 'device_rsync_config',
            },
        ),
        migrations.CreateModel(
            name='device_variable',
            fields=[
                ('idx', models.AutoField(db_column='device_variable_idx', primary_key=True, serialize=False)),
                ('is_public', models.BooleanField(default=True)),
                ('name', models.CharField(max_length=765)),
                ('description', models.CharField(blank=True, default='', max_length=765)),
                ('local_copy_ok', models.BooleanField(default=True)),
                ('inherit', models.BooleanField(default=True)),
                ('protected', models.BooleanField(default=False)),
                ('var_type', models.CharField(choices=[('i', 'integer'), ('s', 'string'), ('d', 'datetime'), ('D', 'date'), ('t', 'time'), ('b', 'blob'), ('?', 'guess')], max_length=3)),
                ('val_str', models.TextField(blank=True, default='', null=True)),
                ('val_int', models.IntegerField(blank=True, default=0, null=True)),
                ('val_bool', models.NullBooleanField(default=False)),
                ('val_blob', models.TextField(blank=True, default='', null=True)),
                ('val_date', models.DateTimeField(blank=True, null=True)),
                ('val_time', models.TextField(blank=True, null=True)),
                ('uuid', models.TextField(default='', max_length=64)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
            ],
            options={
                'ordering': ('name',),
                'db_table': 'device_variable',
                'verbose_name': 'Device variable',
            },
        ),
        migrations.CreateModel(
            name='device_variable_scope',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=32, unique=True)),
                ('priority', models.IntegerField(default=0)),
                ('description', models.TextField(blank=True, default='')),
                ('prefix', models.CharField(blank=True, default='', max_length=127)),
                ('fixed', models.BooleanField(default=False)),
                ('system_scope', models.BooleanField(default=False)),
                ('forced_flags', models.CharField(blank=True, default='', max_length=127)),
                ('default_scope', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='DeviceBootHistory',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
            ],
        ),
        migrations.CreateModel(
            name='DeviceClass',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default=b'', max_length=64, unique=True)),
                ('description', models.CharField(default=b'', max_length=128)),
                ('limitations', models.TextField(default=b'', null=True)),
                ('system_class', models.BooleanField(default=False)),
                ('default_system_class', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('create_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DeviceFlagsAndSettings',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('graph_enslavement_start', models.DateTimeField(null=True)),
                ('device', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='flags_and_settings', to='backbone.device')),
            ],
        ),
        migrations.CreateModel(
            name='DeviceInventory',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('inventory_type', models.CharField(choices=[('lstopo', 'LSTopo'), ('dmi', 'DMI'), ('pci', 'PCI')], max_length=255)),
                ('run_idx', models.IntegerField(default=0)),
                ('value', models.TextField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
            ],
        ),
        migrations.CreateModel(
            name='DeviceLogEntry',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('text', models.CharField(default=b'', max_length=765)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
            ],
        ),
        migrations.CreateModel(
            name='DeviceScanLock',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('uuid', models.TextField(default=b'', max_length=64)),
                ('description', models.CharField(default=b'', max_length=255)),
                ('active', models.BooleanField(default=True)),
                ('run_time', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='config_lock', to='backbone.config')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('server', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='device_lock', to='backbone.device')),
            ],
        ),
        migrations.CreateModel(
            name='DeviceSelection',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=64)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('categories', models.ManyToManyField(blank=True, to='backbone.category')),
                ('device_groups', models.ManyToManyField(blank=True, to='backbone.device_group')),
                ('devices', models.ManyToManyField(blank=True, to='backbone.device')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-date',),
            },
        ),
        migrations.CreateModel(
            name='DeviceSNMPInfo',
            fields=[
                ('idx', models.AutoField(db_column=b'device_idx', primary_key=True, serialize=False)),
                ('description', models.CharField(default=b'', max_length=512)),
                ('contact', models.CharField(default=b'', max_length=512)),
                ('name', models.CharField(default=b'', max_length=512)),
                ('location', models.CharField(default=b'', max_length=512)),
                ('services', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='DeviceSNMPInfo', to='backbone.device')),
            ],
        ),
        migrations.CreateModel(
            name='DispatcherLink',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('model_name', models.TextField()),
                ('object_id', models.IntegerField()),
                ('schedule_handler', models.TextField()),
                ('schedule_handler_data', models.TextField(null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='DispatcherSetting',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=64, unique=True)),
                ('description', models.CharField(blank=True, default='', max_length=256)),
                ('is_system', models.BooleanField(default=False)),
                ('mult', models.IntegerField(default=1)),
                ('sched_start_second', models.IntegerField(default=None, null=True)),
                ('sched_start_minute', models.IntegerField(default=None, null=True)),
                ('sched_start_hour', models.IntegerField(default=None, null=True)),
                ('sched_start_day', models.IntegerField(default=None, null=True)),
                ('sched_start_week', models.IntegerField(default=None, null=True)),
                ('sched_start_month', models.IntegerField(default=None, null=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('com_capabilities', models.ManyToManyField(blank=True, to='backbone.ComCapability')),
            ],
        ),
        migrations.CreateModel(
            name='DispatcherSettingSchedule',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=64, unique=True)),
                ('baseline', models.IntegerField(choices=[(0, b'year'), (1, b'month'), (2, b'week'), (3, b'day'), (4, b'hour'), (5, b'minute'), (6, b'second')])),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='DispatchSetting',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('source', models.IntegerField(choices=[(1, b'SNMP'), (2, b'ASU'), (3, b'IPMI'), (4, b'PACKAGE'), (5, b'HARDWARE'), (6, b'LICENSE'), (7, b'UPDATE'), (8, b'SOFTWARE_VERSION'), (9, b'PROCESS'), (10, b'PENDING_UPDATE')])),
                ('duration_amount', models.IntegerField(default=1)),
                ('duration_unit', models.IntegerField(choices=[(1, b'months'), (2, b'weeks'), (3, b'days'), (4, b'hours'), (5, b'minutes')])),
                ('run_now', models.BooleanField(default=False)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
            ],
        ),
        migrations.CreateModel(
            name='DistributedService',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='Default domain', max_length=128, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='DistributedServiceNode',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('is_domain_node', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('device_config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device_config')),
                ('domaindefinition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.DistributedService')),
            ],
        ),
        migrations.CreateModel(
            name='domain_tree_node',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=64)),
                ('full_name', models.CharField(blank=True, default='', max_length=256)),
                ('node_postfix', models.CharField(blank=True, default='', max_length=16)),
                ('depth', models.IntegerField(default=0)),
                ('intermediate', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('create_short_names', models.BooleanField(default=True)),
                ('always_create_ip', models.BooleanField(default=False)),
                ('write_nameserver_config', models.BooleanField(default=False)),
                ('comment', models.CharField(blank=True, default='', max_length=256)),
                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.domain_tree_node')),
            ],
        ),
        migrations.CreateModel(
            name='DomainTypeEnum',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('enum_name', models.CharField(default='', max_length=255, unique=True)),
                ('name', models.CharField(default='', max_length=255, unique=True)),
                ('info', models.TextField(blank=True, default='')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('default_enum', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dte_default', to='backbone.ConfigServiceEnum')),
                ('domain_enum', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dte_domain', to='backbone.ConfigServiceEnum')),
            ],
        ),
        migrations.CreateModel(
            name='dvs_allowed_name',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=127)),
                ('unique', models.BooleanField(default=False)),
                ('editable', models.BooleanField(default=False)),
                ('forced_type', models.CharField(choices=[('', 'ignore'), ('i', 'integer'), ('s', 'string'), ('d', 'datetime'), ('D', 'date'), ('t', 'time'), ('b', 'blob')], default='', max_length=3)),
                ('group', models.CharField(blank=True, default='', max_length=127)),
                ('description', models.TextField(blank=True, default='')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device_variable_scope', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device_variable_scope')),
            ],
        ),
        migrations.CreateModel(
            name='ext_license',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=128, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ext_license_check',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('run_time', models.FloatField(default=0.0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ext_license_check_coarse',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('duration', models.IntegerField()),
                ('duration_type', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='ext_license_client',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('long_name', models.CharField(default='', max_length=256)),
                ('short_name', models.CharField(default='', max_length=128)),
                ('device', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backbone.device')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ext_license_client_version',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('client_version', models.CharField(default='', max_length=64)),
                ('ext_license', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.ext_license')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ext_license_site',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=128, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ext_license_state',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('used', models.IntegerField(default=0)),
                ('reserved', models.IntegerField(default=0)),
                ('free', models.IntegerField(default=0)),
                ('issued', models.IntegerField(default=0)),
                ('ext_license', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.ext_license')),
                ('ext_license_check', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.ext_license_check')),
            ],
        ),
        migrations.CreateModel(
            name='ext_license_state_coarse',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('used', models.FloatField(default=0.0)),
                ('used_min', models.IntegerField(default=0)),
                ('used_max', models.IntegerField(default=0)),
                ('issued', models.FloatField(default=0.0)),
                ('issued_min', models.IntegerField(default=0)),
                ('issued_max', models.IntegerField(default=0)),
                ('data_points', models.IntegerField()),
                ('ext_license', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.ext_license')),
                ('ext_license_check_coarse', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.ext_license_check_coarse')),
            ],
        ),
        migrations.CreateModel(
            name='ext_license_usage',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('checkout_time', models.IntegerField(default=0)),
                ('num', models.IntegerField(default=0)),
                ('ext_license_client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.ext_license_client')),
                ('ext_license_client_version', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.ext_license_client_version')),
            ],
        ),
        migrations.CreateModel(
            name='ext_license_usage_coarse',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('num', models.IntegerField(default=0)),
                ('frequency', models.IntegerField()),
                ('ext_license_client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.ext_license_client')),
            ],
        ),
        migrations.CreateModel(
            name='ext_license_user',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(default='', max_length=256)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ext_license_vendor',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(default='', max_length=64, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ext_license_version',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('version', models.CharField(default='', max_length=64)),
                ('ext_license', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.ext_license')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ext_license_version_state',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('is_floating', models.BooleanField(default=False)),
                ('ext_license_check', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.ext_license_check')),
                ('ext_license_state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.ext_license_state')),
                ('ext_license_version', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.ext_license_version')),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.ext_license_vendor')),
            ],
        ),
        migrations.CreateModel(
            name='ext_license_version_state_coarse',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('frequency', models.IntegerField()),
                ('ext_license_check_coarse', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.ext_license_check_coarse')),
                ('ext_license_state_coarse', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.ext_license_state_coarse')),
                ('ext_license_version', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.ext_license_version')),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.ext_license_vendor')),
            ],
        ),
        migrations.CreateModel(
            name='GraphSetting',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=128)),
                ('hide_empty', models.BooleanField(default=True)),
                ('include_zero', models.BooleanField(default=True)),
                ('scale_mode', models.CharField(choices=[('l', 'level'), ('n', 'none'), ('t', 'to100')], default='l', max_length=4)),
                ('legend_mode', models.CharField(choices=[('f', 'full with values'), ('n', 'nothing'), ('t', 'only text')], default='f', max_length=4)),
                ('cf', models.CharField(choices=[('AVERAGE', b'average'), ('MAX', b'maximum'), ('MIN', b'minimum')], default='AVERAGE', max_length=16)),
                ('merge_devices', models.BooleanField(default=False)),
                ('merge_graphs', models.BooleanField(default=False)),
                ('merge_controlling_devices', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='GraphSettingForecast',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=64, unique=True)),
                ('seconds', models.IntegerField(default=0, unique=True)),
                ('mode', models.CharField(choices=[('sl', 'simple linear')], default='sl', max_length=4)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='GraphSettingSize',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=64, unique=True)),
                ('default', models.BooleanField(default=False)),
                ('width', models.IntegerField(default=0)),
                ('height', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('width', 'height'),
            },
        ),
        migrations.CreateModel(
            name='GraphSettingTimeshift',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=64, unique=True)),
                ('seconds', models.IntegerField(default=0, unique=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='GraphTimeFrame',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=64, unique=True)),
                ('relative_to_now', models.BooleanField(default=False)),
                ('auto_refresh', models.BooleanField(default=False)),
                ('seconds', models.IntegerField(default=0)),
                ('base_timeframe', models.CharField(choices=[('h', 'hour'), ('d', 'day'), ('w', 'week'), ('m', 'month'), ('y', 'year'), ('D', 'decade')], default='d', max_length=4)),
                ('timeframe_offset', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('-relative_to_now', 'timeframe_offset', 'seconds'),
            },
        ),
        migrations.CreateModel(
            name='group',
            fields=[
                ('idx', models.AutoField(db_column='ggroup_idx', primary_key=True, serialize=False)),
                ('active', models.BooleanField(default=True)),
                ('groupname', models.CharField(db_column='ggroupname', max_length=48, unique=True)),
                ('gid', models.IntegerField(unique=True)),
                ('homestart', models.TextField(blank=True)),
                ('group_comment', models.CharField(blank=True, max_length=765)),
                ('first_name', models.CharField(blank=True, max_length=765)),
                ('last_name', models.CharField(blank=True, max_length=765)),
                ('title', models.CharField(blank=True, max_length=765)),
                ('email', models.CharField(blank=True, default='', max_length=765)),
                ('pager', models.CharField(blank=True, default='', max_length=765, verbose_name='mobile')),
                ('tel', models.CharField(blank=True, default='', max_length=765)),
                ('comment', models.CharField(blank=True, max_length=765)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('allowed_device_groups', models.ManyToManyField(blank=True, to='backbone.device_group')),
            ],
            options={
                'ordering': ('groupname',),
                'db_table': 'ggroup',
                'verbose_name': 'Group',
            },
        ),
        migrations.CreateModel(
            name='group_object_permission',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('level', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('csw_object_permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.csw_object_permission')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.group')),
            ],
        ),
        migrations.CreateModel(
            name='group_permission',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('level', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('csw_permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.csw_permission')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.group')),
            ],
        ),
        migrations.CreateModel(
            name='group_quota_setting',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('bytes_used', models.BigIntegerField(default=0)),
                ('bytes_soft', models.BigIntegerField(default=0)),
                ('bytes_hard', models.BigIntegerField(default=0)),
                ('bytes_gracetime', models.IntegerField(default=0)),
                ('bytes_soft_target', models.BigIntegerField(default=0)),
                ('bytes_hard_target', models.BigIntegerField(default=0)),
                ('files_used', models.BigIntegerField(default=0)),
                ('files_soft', models.BigIntegerField(default=0)),
                ('files_hard', models.BigIntegerField(default=0)),
                ('files_gracetime', models.IntegerField(default=0)),
                ('files_soft_target', models.BigIntegerField(default=0)),
                ('files_hard_target', models.BigIntegerField(default=0)),
                ('quota_flags', models.CharField(default='--', max_length=4)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.group')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HardwareFingerPrint',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('fingerprint', models.TextField(default=b'')),
                ('changecount', models.IntegerField(default=1)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
            ],
        ),
        migrations.CreateModel(
            name='host_check_command',
            fields=[
                ('idx', models.AutoField(db_column='ng_check_command_idx', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64, unique=True)),
                ('command_line', models.CharField(max_length=128, unique=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='icsw_deletion_record',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('object_id_int', models.IntegerField()),
                ('serialized_data', models.TextField()),
                ('object_repr', models.TextField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='icswEggBasket',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('dummy', models.BooleanField(default=False)),
                ('valid_from', models.DateField()),
                ('valid_to', models.DateField()),
                ('is_valid', models.BooleanField(default=True)),
                ('eggs', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='icswEggConsumer',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('xml_node_reference', models.TextField(default='')),
                ('action', models.CharField(default='', max_length=63)),
                ('consumed', models.IntegerField(default=0)),
                ('multiplier', models.IntegerField(default=1)),
                ('dynamic_multiplier', models.BooleanField(default=False)),
                ('valid', models.BooleanField(default=False)),
                ('timeframe_secs', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('config_service_enum', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.ConfigServiceEnum')),
                ('content_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'ordering': ('content_type__model', 'config_service_enum__enum_name', 'action'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='icswEggCradle',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('system_cradle', models.BooleanField(default=True)),
                ('installed', models.IntegerField(default=0)),
                ('available', models.IntegerField(default=0)),
                ('grace_days', models.IntegerField(default=14)),
                ('grace_start', models.DateTimeField(null=True)),
                ('limit_grace', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='icswEggEvaluationDef',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('content', models.TextField(default='')),
                ('dummy', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('egg_cradle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.icswEggCradle')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='icswEggRequest',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('object_id', models.IntegerField(null=True)),
                ('weight', models.IntegerField(default=0)),
                ('is_lock', models.BooleanField(default=False)),
                ('valid', models.BooleanField(default=False)),
                ('valid_until', models.DateTimeField(default=None, null=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('egg_consumer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.icswEggConsumer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ICSWVersion',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(choices=[('database', 'Database scheme'), ('software', 'Software package version'), ('models', 'Models version')], max_length=63)),
                ('version', models.CharField(max_length=128)),
                ('insert_idx', models.IntegerField(default=1)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='image',
            fields=[
                ('idx', models.AutoField(db_column='image_idx', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=192, unique=True)),
                ('source', models.CharField(blank=True, max_length=384)),
                ('version', models.IntegerField(blank=True, default=1, null=True)),
                ('release', models.IntegerField(blank=True, default=0, null=True)),
                ('builds', models.IntegerField(blank=True, default=0, null=True)),
                ('build_machine', models.CharField(blank=True, default='', max_length=192)),
                ('device', models.IntegerField(null=True)),
                ('build_lock', models.BooleanField(default=False)),
                ('size', models.BigIntegerField(default=0)),
                ('size_string', models.TextField(blank=True, default='')),
                ('sys_vendor', models.CharField(blank=True, max_length=192)),
                ('sys_version', models.CharField(blank=True, max_length=192)),
                ('sys_release', models.CharField(blank=True, max_length=192)),
                ('bitcount', models.IntegerField(blank=True, null=True)),
                ('full_build', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('enabled', models.BooleanField(default=True)),
                ('architecture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.architecture')),
            ],
            options={
                'ordering': ('name',),
                'db_table': 'image',
                'verbose_name': 'Image',
            },
        ),
        migrations.CreateModel(
            name='ImageDeviceHistory',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('version', models.IntegerField(blank=True, default=1, null=True)),
                ('release', models.IntegerField(blank=True, default=1, null=True)),
                ('success', models.BooleanField(default=False)),
                ('start', models.DateTimeField(auto_now_add=True, null=True)),
                ('end', models.DateTimeField(default=None, null=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('device_boot_history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.DeviceBootHistory')),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.image')),
            ],
            options={
                'ordering': ('-pk',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='initrd_build',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('user_name', models.CharField(default='root', max_length=128)),
                ('run_time', models.IntegerField(default=0)),
                ('success', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='kernel',
            fields=[
                ('idx', models.AutoField(db_column='kernel_idx', primary_key=True, serialize=False)),
                ('display_name', models.CharField(default='', max_length=128)),
                ('name', models.CharField(default='', max_length=384)),
                ('kernel_version', models.CharField(max_length=384)),
                ('major', models.CharField(blank=True, max_length=192)),
                ('minor', models.CharField(blank=True, max_length=192)),
                ('patchlevel', models.CharField(blank=True, max_length=192)),
                ('version', models.IntegerField(blank=True, default=1, null=True)),
                ('release', models.IntegerField(blank=True, default=1, null=True)),
                ('builds', models.IntegerField(blank=True, default=0, null=True)),
                ('build_machine', models.CharField(blank=True, max_length=192)),
                ('master_server', models.IntegerField(null=True)),
                ('master_role', models.CharField(blank=True, max_length=192)),
                ('device', models.IntegerField(null=True)),
                ('build_lock', models.BooleanField(default=False)),
                ('config_name', models.CharField(blank=True, max_length=192)),
                ('cpu_arch', models.CharField(blank=True, max_length=192)),
                ('sub_cpu_arch', models.CharField(blank=True, max_length=192)),
                ('target_dir', models.CharField(blank=True, max_length=765)),
                ('comment', models.TextField(blank=True, default='')),
                ('enabled', models.BooleanField(default=False)),
                ('initrd_version', models.IntegerField(blank=True, null=True)),
                ('initrd_built', models.DateTimeField(blank=True, null=True)),
                ('module_list', models.TextField(blank=True)),
                ('target_module_list', models.TextField(blank=True, default='')),
                ('xen_host_kernel', models.NullBooleanField(default=False)),
                ('xen_guest_kernel', models.NullBooleanField(default=False)),
                ('bitcount', models.IntegerField(blank=True, null=True)),
                ('stage1_lo_present', models.BooleanField(default=False)),
                ('stage1_cpio_present', models.BooleanField(default=False)),
                ('stage1_cramfs_present', models.BooleanField(default=False)),
                ('stage2_present', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('display_name', 'pk'),
                'db_table': 'kernel',
                'verbose_name': 'Kernel',
            },
        ),
        migrations.CreateModel(
            name='kernel_build',
            fields=[
                ('idx', models.AutoField(db_column='kernel_build_idx', primary_key=True, serialize=False)),
                ('build_machine', models.CharField(blank=True, max_length=192)),
                ('version', models.IntegerField(blank=True, null=True)),
                ('release', models.IntegerField(blank=True, null=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('kernel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.kernel')),
            ],
            options={
                'db_table': 'kernel_build',
            },
        ),
        migrations.CreateModel(
            name='kernel_local_info',
            fields=[
                ('idx', models.AutoField(db_column='kernel_local_info_idx', primary_key=True, serialize=False)),
                ('syncer_role', models.CharField(blank=True, max_length=192)),
                ('info_blob', models.TextField(blank=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('kernel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.kernel')),
            ],
            options={
                'db_table': 'kernel_local_info',
            },
        ),
        migrations.CreateModel(
            name='kernel_log',
            fields=[
                ('idx', models.AutoField(db_column='kernel_log_idx', primary_key=True, serialize=False)),
                ('syncer_role', models.CharField(blank=True, max_length=192)),
                ('log_level', models.IntegerField(blank=True, null=True)),
                ('log_str', models.TextField(blank=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('kernel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.kernel')),
            ],
            options={
                'db_table': 'kernel_log',
            },
        ),
        migrations.CreateModel(
            name='KernelDeviceHistory',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('version', models.IntegerField(blank=True, default=1, null=True)),
                ('release', models.IntegerField(blank=True, default=1, null=True)),
                ('success', models.BooleanField(default=False)),
                ('start', models.DateTimeField(auto_now_add=True, null=True)),
                ('end', models.DateTimeField(default=None, null=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('device_boot_history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.DeviceBootHistory')),
                ('kernel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.kernel')),
            ],
            options={
                'ordering': ('-pk',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Kpi',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('formula', models.TextField(blank=True)),
                ('enabled', models.BooleanField(default=True)),
                ('time_range', models.TextField(blank=True, default=b'none')),
                ('time_range_parameter', models.IntegerField(default=0)),
                ('gui_selected_categories', models.TextField(blank=True)),
                ('soft_states_as_hard_states', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ('idx',),
                'verbose_name': 'KPI',
            },
        ),
        migrations.CreateModel(
            name='KpiDataSourceTuple',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('device_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='device_category', to='backbone.category')),
                ('kpi', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.Kpi')),
                ('monitoring_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='monitoring_category', to='backbone.category')),
            ],
            options={
                'verbose_name': 'KPI data sources',
            },
        ),
        migrations.CreateModel(
            name='KpiStoredResult',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField()),
                ('result', models.TextField(null=True)),
                ('kpi', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='backbone.Kpi')),
            ],
        ),
        migrations.CreateModel(
            name='License',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('file_name', models.CharField(max_length=512)),
                ('license_file', models.TextField()),
            ],
            options={
                'ordering': ('idx',),
                'verbose_name': 'License',
            },
        ),
        migrations.CreateModel(
            name='location_gfx',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=64, unique=True)),
                ('image_name', models.CharField(blank=True, default='', max_length=64)),
                ('uuid', models.CharField(blank=True, max_length=64)),
                ('image_stored', models.BooleanField(default=False)),
                ('image_count', models.IntegerField(default=1)),
                ('width', models.IntegerField(default=0)),
                ('height', models.IntegerField(default=0)),
                ('content_type', models.CharField(blank=True, default='', max_length=128)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('locked', models.BooleanField(default=False)),
                ('changes', models.IntegerField(default=0)),
                ('comment', models.TextField(blank=True, default='')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.category')),
            ],
        ),
        migrations.CreateModel(
            name='log_status',
            fields=[
                ('idx', models.AutoField(db_column=b'log_status_idx', primary_key=True, serialize=False)),
                ('identifier', models.CharField(blank=True, max_length=12)),
                ('log_level', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=192)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'log_status',
            },
        ),
        migrations.CreateModel(
            name='LogicalDisc',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('device_name', models.CharField(max_length=128)),
                ('size', models.BigIntegerField(null=True)),
                ('free_space', models.BigIntegerField(null=True)),
                ('mountpoint', models.CharField(blank=True, default='/', max_length=192)),
            ],
        ),
        migrations.CreateModel(
            name='login_history',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('success', models.BooleanField(default=False)),
                ('remote_addr', models.CharField(default='', max_length=128)),
                ('remote_host', models.CharField(default='', max_length=128)),
                ('http_user_agent', models.CharField(default='', max_length=256)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LogLevel',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('identifier', models.CharField(max_length=2, unique=True)),
                ('level', models.IntegerField(default=20)),
                ('name', models.CharField(max_length=32, unique=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='LogSource',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('identifier', models.CharField(max_length=192)),
                ('description', models.CharField(default=b'', max_length=765)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
            ],
        ),
        migrations.CreateModel(
            name='lvm_lv',
            fields=[
                ('idx', models.AutoField(db_column='lvm_lv_idx', primary_key=True, serialize=False)),
                ('size', models.BigIntegerField(blank=True, null=True)),
                ('mountpoint', models.CharField(default='/', max_length=192)),
                ('mount_options', models.CharField(blank=True, max_length=384)),
                ('fs_freq', models.IntegerField(blank=True, null=True)),
                ('fs_passno', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(max_length=192)),
                ('warn_threshold', models.IntegerField(blank=True, default=85, null=True)),
                ('crit_threshold', models.IntegerField(blank=True, default=95, null=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('name',),
                'db_table': 'lvm_lv',
                'verbose_name': 'Partition: LVM Logical Volume',
            },
        ),
        migrations.CreateModel(
            name='lvm_vg',
            fields=[
                ('idx', models.AutoField(db_column='lvm_vg_idx', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=192)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('name',),
                'db_table': 'lvm_vg',
                'verbose_name': 'Partition: LVM Volume Group',
            },
        ),
        migrations.CreateModel(
            name='mac_ignore',
            fields=[
                ('idx', models.AutoField(db_column=b'mac_ignore_idx', primary_key=True, serialize=False)),
                ('macaddr', models.CharField(db_column=b'macadr', default=b'00:00:00:00:00:00', max_length=192)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'mac_ignore',
            },
        ),
        migrations.CreateModel(
            name='macbootlog',
            fields=[
                ('idx', models.AutoField(db_column=b'macbootlog_idx', primary_key=True, serialize=False)),
                ('entry_type', models.CharField(db_column=b'type', default=b'???', max_length=96)),
                ('ip_action', models.CharField(db_column=b'ip', default=b'0.0.0.0', max_length=96)),
                ('macaddr', models.CharField(db_column=b'macadr', default=b'00:00:00:00:00:00', max_length=192)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
            ],
            options={
                'db_table': 'macbootlog',
            },
        ),
        migrations.CreateModel(
            name='MachineVector',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('src_file_name', models.CharField(blank=True, default='', max_length=256)),
                ('dir_name', models.CharField(default='', max_length=128)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
            ],
        ),
        migrations.CreateModel(
            name='mon_build_unreachable',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('device_pk', models.IntegerField(default=0)),
                ('device_name', models.CharField(default='', max_length=256)),
                ('devicegroup_name', models.CharField(default='', max_length=256)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='mon_check_command',
            fields=[
                ('idx', models.AutoField(db_column='ng_check_command_idx', primary_key=True, serialize=False)),
                ('config_old', models.IntegerField(blank=True, db_column='config', null=True)),
                ('name', models.CharField(max_length=192)),
                ('command_line', models.CharField(default='', max_length=765)),
                ('description', models.CharField(blank=True, max_length=192)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('enable_perfdata', models.BooleanField(default=False)),
                ('volatile', models.BooleanField(default=False)),
                ('is_event_handler', models.BooleanField(default=False)),
                ('event_handler_enabled', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('tcp_coverage', models.CharField(blank=True, default='', max_length=256)),
                ('categories', models.ManyToManyField(blank=True, to='backbone.category')),
                ('config', models.ForeignKey(db_column='new_config_id', on_delete=django.db.models.deletion.CASCADE, to='backbone.config')),
                ('event_handler', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_check_command')),
                ('exclude_devices', models.ManyToManyField(blank=True, related_name='mcc_exclude_devices', to='backbone.device')),
            ],
            options={
                'db_table': 'ng_check_command',
                'verbose_name': 'Check command',
            },
        ),
        migrations.CreateModel(
            name='mon_check_command_special',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64, unique=True)),
                ('group', models.CharField(default='', max_length=64)),
                ('info', models.CharField(default='', max_length=64)),
                ('command_line', models.CharField(default='', max_length=512)),
                ('description', models.CharField(default='', max_length=512)),
                ('is_active', models.BooleanField(default=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('meta', models.BooleanField(default=False)),
                ('identifier', models.CharField(default='', max_length=64)),
                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_check_command_special')),
            ],
            options={
                'ordering': ('group', 'name'),
                'verbose_name': 'Special check command',
            },
        ),
        migrations.CreateModel(
            name='mon_contact',
            fields=[
                ('idx', models.AutoField(db_column='ng_contact_idx', primary_key=True, serialize=False)),
                ('snrecovery', models.BooleanField(default=False, verbose_name='Notify on service recovery')),
                ('sncritical', models.BooleanField(default=False, verbose_name='Notify on service critical')),
                ('snwarning', models.BooleanField(default=False, verbose_name='Notify on service warning')),
                ('snunknown', models.BooleanField(default=False, verbose_name='Notify on service unknown')),
                ('sflapping', models.BooleanField(default=False, verbose_name='Notify on service flapping')),
                ('splanned_downtime', models.BooleanField(default=False, verbose_name='Notify on service planned downtime')),
                ('hnrecovery', models.BooleanField(default=False, verbose_name='Notify on host recovery')),
                ('hndown', models.BooleanField(default=False, verbose_name='Notify on host down')),
                ('hnunreachable', models.BooleanField(default=False, verbose_name='Notify on host unreachable')),
                ('hflapping', models.BooleanField(default=False, verbose_name='Notify on host flapping')),
                ('hplanned_downtime', models.BooleanField(default=False, verbose_name='Notify on host planned downtime')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('mon_alias', models.CharField(blank=True, default='', max_length=64, verbose_name='alias')),
            ],
            options={
                'db_table': 'ng_contact',
            },
        ),
        migrations.CreateModel(
            name='mon_contactgroup',
            fields=[
                ('idx', models.AutoField(db_column='ng_contactgroup_idx', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=192, unique=True)),
                ('alias', models.CharField(blank=True, default='', max_length=255)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device_groups', models.ManyToManyField(blank=True, to='backbone.device_group')),
                ('members', models.ManyToManyField(blank=True, to='backbone.mon_contact')),
            ],
            options={
                'db_table': 'ng_contactgroup',
            },
        ),
        migrations.CreateModel(
            name='mon_device_esc_templ',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=192, unique=True)),
                ('first_notification', models.IntegerField(default=1)),
                ('last_notification', models.IntegerField(default=1)),
                ('ninterval', models.IntegerField(default=1)),
                ('nrecovery', models.BooleanField(default=False, verbose_name='Notify on recovery')),
                ('ndown', models.BooleanField(default=False, verbose_name='Notify when down')),
                ('nunreachable', models.BooleanField(default=False, verbose_name='Notify when unreachable')),
                ('nflapping', models.BooleanField(default=False, verbose_name='Notify when flapping')),
                ('nplanned_downtime', models.BooleanField(default=False, verbose_name='Notify on planned downtime')),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='mon_device_templ',
            fields=[
                ('idx', models.AutoField(db_column='ng_device_templ_idx', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=192, unique=True)),
                ('check_interval', models.IntegerField(default=1)),
                ('retry_interval', models.IntegerField(default=1)),
                ('max_attempts', models.IntegerField(blank=True, default=1, null=True)),
                ('ninterval', models.IntegerField(blank=True, default=1, null=True)),
                ('nrecovery', models.BooleanField(default=False, verbose_name='Notify on recovery')),
                ('ndown', models.BooleanField(default=False, verbose_name='Notify when down')),
                ('nunreachable', models.BooleanField(default=False, verbose_name='Notify when unreachable')),
                ('nflapping', models.BooleanField(default=False, verbose_name='Notify when flapping')),
                ('nplanned_downtime', models.BooleanField(default=False, verbose_name='Notify for planned downtime')),
                ('is_default', models.BooleanField(default=False)),
                ('low_flap_threshold', models.IntegerField(default=0)),
                ('high_flap_threshold', models.IntegerField(default=0)),
                ('flap_detection_enabled', models.BooleanField(default=False)),
                ('flap_detect_up', models.BooleanField(default=True)),
                ('flap_detect_down', models.BooleanField(default=False)),
                ('flap_detect_unreachable', models.BooleanField(default=False)),
                ('check_freshness', models.BooleanField(default=False)),
                ('freshness_threshold', models.IntegerField(default=60)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('host_check_command', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.host_check_command')),
            ],
            options={
                'db_table': 'ng_device_templ',
            },
        ),
        migrations.CreateModel(
            name='mon_dist_master',
            fields=[
                ('config_build_start', models.DateTimeField(default=None, null=True)),
                ('config_build_end', models.DateTimeField(default=None, null=True)),
                ('relayer_version', models.CharField(default='', max_length=128)),
                ('mon_version', models.CharField(default='', max_length=128)),
                ('livestatus_version', models.CharField(default='', max_length=128)),
                ('build_start', models.DateTimeField(default=None, null=True)),
                ('build_end', models.DateTimeField(default=None, null=True)),
                ('num_devices', models.IntegerField(default=0)),
                ('unreachable_devices', models.IntegerField(default=0)),
                ('full_build', models.BooleanField(default=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('version', models.IntegerField(default=0)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
            ],
            options={
                'ordering': ('-idx',),
                'verbose_name': 'Config builds as master',
            },
        ),
        migrations.CreateModel(
            name='mon_dist_slave',
            fields=[
                ('config_build_start', models.DateTimeField(default=None, null=True)),
                ('config_build_end', models.DateTimeField(default=None, null=True)),
                ('relayer_version', models.CharField(default='', max_length=128)),
                ('mon_version', models.CharField(default='', max_length=128)),
                ('livestatus_version', models.CharField(default='', max_length=128)),
                ('build_start', models.DateTimeField(default=None, null=True)),
                ('build_end', models.DateTimeField(default=None, null=True)),
                ('num_devices', models.IntegerField(default=0)),
                ('unreachable_devices', models.IntegerField(default=0)),
                ('full_build', models.BooleanField(default=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('sync_start', models.DateTimeField(default=None, null=True)),
                ('sync_end', models.DateTimeField(default=None, null=True)),
                ('num_runs', models.IntegerField(default=0)),
                ('num_files', models.IntegerField(default=0)),
                ('num_transfers', models.IntegerField(default=0)),
                ('size_data', models.IntegerField(default=0)),
                ('size_raw', models.IntegerField(default=0)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('mon_dist_master', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_dist_master')),
            ],
            options={
                'verbose_name': 'Config builds as slave',
            },
        ),
        migrations.CreateModel(
            name='mon_ext_host',
            fields=[
                ('idx', models.AutoField(db_column='ng_ext_host_idx', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=192, unique=True)),
                ('icon_image', models.CharField(blank=True, max_length=192)),
                ('icon_image_alt', models.CharField(blank=True, max_length=192)),
                ('vrml_image', models.CharField(blank=True, max_length=192)),
                ('statusmap_image', models.CharField(blank=True, max_length=192)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('name',),
                'db_table': 'ng_ext_host',
            },
        ),
        migrations.CreateModel(
            name='mon_host_cluster',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, unique=True)),
                ('description', models.CharField(default='', max_length=255)),
                ('warn_value', models.IntegerField(default=0)),
                ('error_value', models.IntegerField(default=1)),
                ('user_editable', models.BooleanField(default=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('devices', models.ManyToManyField(related_name='devs_mon_host_cluster', to='backbone.device')),
                ('main_device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='main_mon_host_cluster', to='backbone.device')),
            ],
            options={
                'verbose_name': 'Host Cluster',
            },
        ),
        migrations.CreateModel(
            name='mon_host_dependency',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('dependent_devices', models.ManyToManyField(related_name='mhd_dependent_devices', to='backbone.device')),
                ('devices', models.ManyToManyField(blank=True, related_name='mhd_devices', to='backbone.device')),
                ('mon_host_cluster', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_host_cluster')),
            ],
        ),
        migrations.CreateModel(
            name='mon_host_dependency_templ',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=192, unique=True)),
                ('inherits_parent', models.BooleanField(default=False)),
                ('priority', models.IntegerField(default=0)),
                ('efc_up', models.BooleanField(default=False)),
                ('efc_down', models.BooleanField(default=True)),
                ('efc_unreachable', models.BooleanField(default=True)),
                ('efc_pending', models.BooleanField(default=False)),
                ('nfc_up', models.BooleanField(default=False)),
                ('nfc_down', models.BooleanField(default=True)),
                ('nfc_unreachable', models.BooleanField(default=True)),
                ('nfc_pending', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='mon_icinga_log_aggregated_host_data',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('state_type', models.CharField(choices=[('H', 'HARD'), ('S', 'SOFT'), ('UD', 'UD'), ('PD', 'PLANNED DOWN'), ('FL', 'FL')], max_length=2)),
                ('state', models.CharField(choices=[('UP', 'UP'), ('D', 'DOWN'), ('UR', 'UNREACHABLE'), ('U', 'UNKNOWN'), ('PD', 'PLANNED DOWN'), ('UD', 'UNDETERMINED'), ('FL', 'FLAPPING')], max_length=2)),
                ('value', models.FloatField()),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
            ],
        ),
        migrations.CreateModel(
            name='mon_icinga_log_aggregated_service_data',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('state_type', models.CharField(choices=[('H', 'HARD'), ('S', 'SOFT'), ('UD', 'UD'), ('PD', 'PLANNED DOWN'), ('FL', 'FL')], max_length=2)),
                ('state', models.CharField(choices=[('O', 'OK'), ('W', 'WARNING'), ('U', 'UNKNOWN'), ('C', 'CRITICAL'), ('UD', 'UNDETERMINED'), ('PD', 'PLANNED DOWN'), ('FL', 'FLAPPING')], max_length=2)),
                ('service_info', models.TextField(blank=True, null=True)),
                ('value', models.FloatField()),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('service', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_check_command')),
            ],
        ),
        migrations.CreateModel(
            name='mon_icinga_log_aggregated_timespan',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('end_date', models.DateTimeField()),
                ('start_date', models.DateTimeField(db_index=True)),
                ('duration', models.IntegerField()),
                ('duration_type', models.IntegerField(db_index=True)),
            ],
        ),
        migrations.CreateModel(
            name='mon_icinga_log_file',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('filepath', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='mon_icinga_log_full_system_dump',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(db_index=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='mon_icinga_log_last_read',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('position', models.BigIntegerField()),
                ('timestamp', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='mon_icinga_log_raw_host_alert_data',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(db_index=True)),
                ('device_independent', models.BooleanField(db_index=True, default=False)),
                ('msg', models.TextField()),
                ('state_type', models.CharField(choices=[('H', 'HARD'), ('S', 'SOFT'), ('UD', 'UD'), ('PD', 'PLANNED DOWN')], max_length=2)),
                ('state', models.CharField(choices=[('UP', 'UP'), ('D', 'DOWN'), ('UR', 'UNREACHABLE'), ('U', 'UNKNOWN'), ('PD', 'PLANNED DOWN'), ('UD', 'UNDETERMINED')], max_length=2)),
                ('log_rotation_state', models.BooleanField(default=False)),
                ('initial_state', models.BooleanField(default=False)),
                ('device', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('logfile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_icinga_log_file')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='mon_icinga_log_raw_host_downtime_data',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(db_index=True)),
                ('device_independent', models.BooleanField(db_index=True, default=False)),
                ('msg', models.TextField()),
                ('downtime_state', models.CharField(choices=[('START', 'START'), ('STOP', 'STOP')], max_length=5)),
                ('device', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('logfile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_icinga_log_file')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='mon_icinga_log_raw_host_flapping_data',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(db_index=True)),
                ('device_independent', models.BooleanField(db_index=True, default=False)),
                ('msg', models.TextField()),
                ('flapping_state', models.CharField(choices=[('START', 'START'), ('STOP', 'STOP')], max_length=5)),
                ('device', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('logfile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_icinga_log_file')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='mon_icinga_log_raw_host_notification_data',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(db_index=True)),
                ('device_independent', models.BooleanField(db_index=True, default=False)),
                ('msg', models.TextField()),
                ('state', models.CharField(choices=[('UP', 'UP'), ('D', 'DOWN'), ('UR', 'UNREACHABLE'), ('U', 'UNKNOWN'), ('PD', 'PLANNED DOWN'), ('UD', 'UNDETERMINED')], max_length=2)),
                ('user', models.TextField()),
                ('notification_type', models.TextField()),
                ('device', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('logfile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_icinga_log_file')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='mon_icinga_log_raw_service_alert_data',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(db_index=True)),
                ('device_independent', models.BooleanField(db_index=True, default=False)),
                ('msg', models.TextField()),
                ('service_info', models.TextField(blank=True, db_index=True, null=True)),
                ('state_type', models.CharField(choices=[('H', 'HARD'), ('S', 'SOFT'), ('UD', 'UD'), ('PD', 'PLANNED DOWN')], max_length=2)),
                ('state', models.CharField(choices=[('O', 'OK'), ('W', 'WARNING'), ('U', 'UNKNOWN'), ('C', 'CRITICAL'), ('UD', 'UNDETERMINED'), ('PD', 'PLANNED DOWN')], max_length=2)),
                ('log_rotation_state', models.BooleanField(default=False)),
                ('initial_state', models.BooleanField(default=False)),
                ('device', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('logfile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_icinga_log_file')),
                ('service', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_check_command')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='mon_icinga_log_raw_service_downtime_data',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(db_index=True)),
                ('device_independent', models.BooleanField(db_index=True, default=False)),
                ('msg', models.TextField()),
                ('service_info', models.TextField(blank=True, null=True)),
                ('downtime_state', models.CharField(choices=[('START', 'START'), ('STOP', 'STOP')], max_length=5)),
                ('device', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('logfile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_icinga_log_file')),
                ('service', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_check_command')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='mon_icinga_log_raw_service_flapping_data',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(db_index=True)),
                ('device_independent', models.BooleanField(db_index=True, default=False)),
                ('msg', models.TextField()),
                ('service_info', models.TextField(blank=True, null=True)),
                ('flapping_state', models.CharField(choices=[('START', 'START'), ('STOP', 'STOP')], max_length=5)),
                ('device', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('logfile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_icinga_log_file')),
                ('service', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_check_command')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='mon_icinga_log_raw_service_notification_data',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(db_index=True)),
                ('device_independent', models.BooleanField(db_index=True, default=False)),
                ('msg', models.TextField()),
                ('service_info', models.TextField(blank=True, null=True)),
                ('state', models.CharField(choices=[('O', 'OK'), ('W', 'WARNING'), ('U', 'UNKNOWN'), ('C', 'CRITICAL'), ('UD', 'UNDETERMINED'), ('PD', 'PLANNED DOWN')], max_length=2)),
                ('user', models.TextField()),
                ('notification_type', models.TextField()),
                ('device', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('logfile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_icinga_log_file')),
                ('service', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_check_command')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='mon_notification',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, unique=True)),
                ('channel', models.CharField(choices=[('mail', 'E-Mail'), ('sms', 'SMS')], max_length=8)),
                ('not_type', models.CharField(choices=[('host', 'Host'), ('service', 'Service')], max_length=8, verbose_name='Notification type')),
                ('subject', models.CharField(blank=True, max_length=140)),
                ('content', models.TextField(default='')),
                ('enabled', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='mon_period',
            fields=[
                ('idx', models.AutoField(db_column='ng_period_idx', primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=192, unique=True)),
                ('alias', models.CharField(blank=True, default='', max_length=255, unique=True)),
                ('sun_range', models.CharField(blank=True, db_column='sunrange', max_length=48)),
                ('mon_range', models.CharField(blank=True, db_column='monrange', max_length=48)),
                ('tue_range', models.CharField(blank=True, db_column='tuerange', max_length=48)),
                ('wed_range', models.CharField(blank=True, db_column='wedrange', max_length=48)),
                ('thu_range', models.CharField(blank=True, db_column='thurange', max_length=48)),
                ('fri_range', models.CharField(blank=True, db_column='frirange', max_length=48)),
                ('sat_range', models.CharField(blank=True, db_column='satrange', max_length=48)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'ng_period',
            },
        ),
        migrations.CreateModel(
            name='mon_service_cluster',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, unique=True)),
                ('description', models.CharField(default='', max_length=255)),
                ('warn_value', models.IntegerField(default=0)),
                ('error_value', models.IntegerField(default=1)),
                ('user_editable', models.BooleanField(default=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('devices', models.ManyToManyField(related_name='devs_mon_service_cluster', to='backbone.device')),
                ('main_device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='main_mon_service_cluster', to='backbone.device')),
                ('mon_check_command', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_check_command')),
            ],
            options={
                'verbose_name': 'Service Cluster',
            },
        ),
        migrations.CreateModel(
            name='mon_service_dependency',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('dependent_devices', models.ManyToManyField(related_name='msd_dependent_devices', to='backbone.device')),
                ('dependent_mon_check_command', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='msd_dependent_mcc', to='backbone.mon_check_command')),
                ('devices', models.ManyToManyField(blank=True, related_name='msd_devices', to='backbone.device')),
                ('mon_check_command', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='msd_mcc', to='backbone.mon_check_command')),
                ('mon_service_cluster', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_service_cluster')),
            ],
        ),
        migrations.CreateModel(
            name='mon_service_dependency_templ',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=192, unique=True)),
                ('inherits_parent', models.BooleanField(default=False)),
                ('priority', models.IntegerField(default=0)),
                ('efc_ok', models.BooleanField(default=False)),
                ('efc_warn', models.BooleanField(default=True)),
                ('efc_unknown', models.BooleanField(default=True)),
                ('efc_critical', models.BooleanField(default=False)),
                ('efc_pending', models.BooleanField(default=False)),
                ('nfc_ok', models.BooleanField(default=False)),
                ('nfc_warn', models.BooleanField(default=True)),
                ('nfc_unknown', models.BooleanField(default=True)),
                ('nfc_critical', models.BooleanField(default=False)),
                ('nfc_pending', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('dependency_period', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_period')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='mon_service_esc_templ',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=192, unique=True)),
                ('first_notification', models.IntegerField(default=1)),
                ('last_notification', models.IntegerField(default=1)),
                ('ninterval', models.IntegerField(default=1)),
                ('nrecovery', models.BooleanField(default=False)),
                ('ncritical', models.BooleanField(default=False)),
                ('nwarning', models.BooleanField(default=False)),
                ('nunknown', models.BooleanField(default=False)),
                ('nflapping', models.BooleanField(default=False)),
                ('nplanned_downtime', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('esc_period', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_period')),
            ],
        ),
        migrations.CreateModel(
            name='mon_service_templ',
            fields=[
                ('idx', models.AutoField(db_column='ng_service_templ_idx', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=192, unique=True)),
                ('volatile', models.BooleanField(default=False)),
                ('max_attempts', models.IntegerField(default=1)),
                ('check_interval', models.IntegerField(default=5)),
                ('retry_interval', models.IntegerField(default=10)),
                ('ninterval', models.IntegerField(default=5)),
                ('nrecovery', models.BooleanField(default=False, verbose_name='Notify on recovery')),
                ('ncritical', models.BooleanField(default=False, verbose_name='Notify when critical')),
                ('nwarning', models.BooleanField(default=False, verbose_name='Notify when warning')),
                ('nunknown', models.BooleanField(default=False, verbose_name='Notify when unknown')),
                ('nflapping', models.BooleanField(default=False, verbose_name='Notify when flapping')),
                ('nplanned_downtime', models.BooleanField(default=False, verbose_name='Notify when planned downtime')),
                ('low_flap_threshold', models.IntegerField(default=0)),
                ('high_flap_threshold', models.IntegerField(default=0)),
                ('flap_detection_enabled', models.BooleanField(default=False)),
                ('flap_detect_ok', models.BooleanField(default=True)),
                ('flap_detect_warn', models.BooleanField(default=False)),
                ('flap_detect_critical', models.BooleanField(default=False)),
                ('flap_detect_unknown', models.BooleanField(default=False)),
                ('check_freshness', models.BooleanField(default=False)),
                ('freshness_threshold', models.IntegerField(default=60)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('nsc_period', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_check_period', to='backbone.mon_period')),
                ('nsn_period', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_notify_period', to='backbone.mon_period')),
            ],
            options={
                'db_table': 'ng_service_templ',
            },
        ),
        migrations.CreateModel(
            name='MonDisplayPipeSpec',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, unique=True)),
                ('description', models.CharField(blank=True, default='', max_length=255)),
                ('system_pipe', models.BooleanField(default=False)),
                ('public_pipe', models.BooleanField(default=True)),
                ('def_user_var_name', models.CharField(blank=True, default='', max_length=128)),
                ('json_spec', models.TextField(default='')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('create_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MonHostTrace',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('dev_netdevice_fp', models.CharField(db_index=True, default='', max_length=128)),
                ('srv_netdevice_fp', models.CharField(db_index=True, default='', max_length=128)),
                ('traces', models.TextField(default='')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
            ],
        ),
        migrations.CreateModel(
            name='MonHostTraceGeneration',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('fingerprint', models.CharField(default='', max_length=255)),
                ('edges', models.IntegerField(default=0)),
                ('nodes', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='monitoring_hint',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('call_idx', models.IntegerField(default=0)),
                ('m_type', models.CharField(max_length=32)),
                ('key', models.CharField(default='', max_length=255)),
                ('v_type', models.CharField(choices=[('f', 'float'), ('i', 'integer'), ('b', 'boolean'), ('s', 'string'), ('j', 'json')], default='f', max_length=6)),
                ('value_float', models.FloatField(default=0.0)),
                ('value_int', models.IntegerField(default=0)),
                ('value_string', models.CharField(blank=True, default='', max_length=256)),
                ('value_json', models.TextField(blank=True, default='')),
                ('lower_crit_float', models.FloatField(default=0.0)),
                ('lower_warn_float', models.FloatField(default=0.0)),
                ('upper_warn_float', models.FloatField(default=0.0)),
                ('upper_crit_float', models.FloatField(default=0.0)),
                ('lower_crit_int', models.IntegerField(default=0)),
                ('lower_warn_int', models.IntegerField(default=0)),
                ('upper_warn_int', models.IntegerField(default=0)),
                ('upper_crit_int', models.IntegerField(default=0)),
                ('lower_crit_float_source', models.CharField(choices=[('n', 'not set'), ('s', 'system'), ('u', 'user')], default='n', max_length=4)),
                ('lower_warn_float_source', models.CharField(choices=[('n', 'not set'), ('s', 'system'), ('u', 'user')], default='n', max_length=4)),
                ('upper_warn_float_source', models.CharField(choices=[('n', 'not set'), ('s', 'system'), ('u', 'user')], default='n', max_length=4)),
                ('upper_crit_float_source', models.CharField(choices=[('n', 'not set'), ('s', 'system'), ('u', 'user')], default='n', max_length=4)),
                ('lower_crit_int_source', models.CharField(choices=[('n', 'not set'), ('s', 'system'), ('u', 'user')], default='n', max_length=4)),
                ('lower_warn_int_source', models.CharField(choices=[('n', 'not set'), ('s', 'system'), ('u', 'user')], default='n', max_length=4)),
                ('upper_warn_int_source', models.CharField(choices=[('n', 'not set'), ('s', 'system'), ('u', 'user')], default='n', max_length=4)),
                ('upper_crit_int_source', models.CharField(choices=[('n', 'not set'), ('s', 'system'), ('u', 'user')], default='n', max_length=4)),
                ('info', models.CharField(default='', max_length=255)),
                ('enabled', models.BooleanField(default=True)),
                ('check_created', models.BooleanField(default=False)),
                ('persistent', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('datasource', models.CharField(choices=[('c', 'cache'), ('s', 'server'), ('p', 'persistent')], default='s', max_length=6)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
            ],
            options={
                'ordering': ('m_type', 'key'),
                'verbose_name': 'Monitoring hint',
            },
        ),
        migrations.CreateModel(
            name='MVStructEntry',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('file_name', models.CharField(default='', max_length=256)),
                ('se_type', models.CharField(choices=[('pde', 'pde'), ('mvl', 'mvl'), ('mve', 'mve')], max_length=6)),
                ('type_instance', models.CharField(default='', max_length=255)),
                ('key', models.CharField(max_length=256)),
                ('is_active', models.BooleanField(default=True)),
                ('last_update', models.DateTimeField(auto_now=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('machine_vector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.MachineVector')),
            ],
            options={
                'ordering': ('key',),
            },
        ),
        migrations.CreateModel(
            name='MVValueEntry',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('base', models.IntegerField(default=1024)),
                ('factor', models.IntegerField(default=1)),
                ('unit', models.CharField(default='', max_length=16)),
                ('v_type', models.CharField(choices=[('i', 'int'), ('f', 'float')], default='f', max_length=3)),
                ('info', models.CharField(default='', max_length=256)),
                ('key', models.CharField(default='', max_length=128)),
                ('rra_idx', models.IntegerField(default=0)),
                ('full_key', models.CharField(default='', max_length=128)),
                ('name', models.CharField(default='', max_length=64)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('mv_struct_entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.MVStructEntry')),
            ],
            options={
                'ordering': ('key',),
            },
        ),
        migrations.CreateModel(
            name='net_ip',
            fields=[
                ('idx', models.AutoField(db_column='netip_idx', primary_key=True, serialize=False)),
                ('ip', models.CharField(max_length=48)),
                ('penalty', models.IntegerField(default=0, verbose_name='cost')),
                ('alias', models.CharField(blank=True, default='', max_length=765)),
                ('alias_excl', models.NullBooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('domain_tree_node', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.domain_tree_node')),
            ],
            options={
                'db_table': 'netip',
                'verbose_name': 'IP address',
            },
        ),
        migrations.CreateModel(
            name='netdevice',
            fields=[
                ('idx', models.AutoField(db_column='netdevice_idx', primary_key=True, serialize=False)),
                ('devname', models.CharField(max_length=64)),
                ('macaddr', models.CharField(blank=True, db_column='macadr', default='', max_length=177)),
                ('driver_options', models.CharField(blank=True, max_length=672)),
                ('speed', models.BigIntegerField(blank=True, default=0, null=True)),
                ('ignore_netdevice_speed', models.BooleanField(default=False)),
                ('driver', models.CharField(blank=True, default='e1000e', max_length=384)),
                ('routing', models.BooleanField(default=False)),
                ('inter_device_routing', models.BooleanField(default=True)),
                ('penalty', models.IntegerField(blank=True, default=1, null=True, verbose_name='cost')),
                ('dhcp_device', models.NullBooleanField(default=False)),
                ('ethtool_options', models.IntegerField(blank=True, default=0, null=True)),
                ('fake_macaddr', models.CharField(blank=True, db_column='fake_macadr', default='', max_length=177)),
                ('description', models.CharField(blank=True, max_length=765)),
                ('is_bridge', models.BooleanField(default=False)),
                ('is_bond', models.BooleanField(default=False)),
                ('bridge_name', models.CharField(blank=True, max_length=765)),
                ('vlan_id', models.IntegerField(blank=True, default=0, null=True)),
                ('enabled', models.BooleanField(default=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('mtu', models.IntegerField(default=1500)),
                ('snmp_idx', models.IntegerField(default=0)),
                ('force_network_device_type_match', models.BooleanField(default=True)),
                ('snmp_admin_status', models.IntegerField(default=0)),
                ('snmp_oper_status', models.IntegerField(default=0)),
                ('desired_status', models.CharField(choices=[('d', b'down'), ('i', b'ignore'), ('u', b'up')], default='i', max_length=4)),
                ('wmi_interface_index', models.IntegerField(blank=True, default=None, null=True)),
                ('bond_master', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bond_slaves', to='backbone.netdevice')),
                ('bridge_device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bridge_slaves', to='backbone.netdevice')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('master_device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vlan_slaves', to='backbone.netdevice')),
            ],
            options={
                'ordering': ('snmp_idx', 'devname'),
                'db_table': 'netdevice',
                'verbose_name': 'Netdevice',
            },
        ),
        migrations.CreateModel(
            name='netdevice_speed',
            fields=[
                ('idx', models.AutoField(db_column='netdevice_speed_idx', primary_key=True, serialize=False)),
                ('speed_bps', models.BigIntegerField(blank=True, null=True)),
                ('check_via_ethtool', models.BooleanField(default=True)),
                ('full_duplex', models.BooleanField(default=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('speed_bps', 'full_duplex'),
                'db_table': 'netdevice_speed',
            },
        ),
        migrations.CreateModel(
            name='network',
            fields=[
                ('idx', models.AutoField(db_column='network_idx', primary_key=True, serialize=False)),
                ('identifier', models.CharField(max_length=255, unique=True)),
                ('short_names', models.BooleanField(default=True)),
                ('name', models.CharField(blank=True, default='', max_length=192)),
                ('penalty', models.PositiveIntegerField(default=1, verbose_name='cost')),
                ('postfix', models.CharField(blank=True, default='', max_length=12)),
                ('info', models.CharField(blank=True, max_length=255)),
                ('network', models.GenericIPAddressField()),
                ('netmask', models.GenericIPAddressField()),
                ('broadcast', models.GenericIPAddressField()),
                ('gateway', models.GenericIPAddressField()),
                ('gw_pri', models.IntegerField(blank=True, default=1, null=True)),
                ('write_bind_config', models.BooleanField(default=False)),
                ('write_other_network_config', models.BooleanField(default=False)),
                ('start_range', models.GenericIPAddressField(default='0.0.0.0')),
                ('end_range', models.GenericIPAddressField(default='0.0.0.0')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('enforce_unique_ips', models.BooleanField(default=False)),
                ('master_network', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rel_master_network', to='backbone.network')),
            ],
            options={
                'db_table': 'network',
            },
        ),
        migrations.CreateModel(
            name='network_device_type',
            fields=[
                ('idx', models.AutoField(db_column='network_device_type_idx', primary_key=True, serialize=False)),
                ('identifier', models.CharField(max_length=48, unique=True)),
                ('name_re', models.CharField(default='^.*$', max_length=128)),
                ('description', models.CharField(max_length=192)),
                ('mac_bytes', models.PositiveIntegerField(default=6)),
                ('allow_virtual_interfaces', models.BooleanField(default=True)),
                ('for_matching', models.BooleanField(default=True)),
                ('auto_created', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'network_device_type',
            },
        ),
        migrations.CreateModel(
            name='network_type',
            fields=[
                ('idx', models.AutoField(db_column='network_type_idx', primary_key=True, serialize=False)),
                ('identifier', models.CharField(choices=[('b', 'boot'), ('p', 'prod'), ('s', 'slave'), ('o', 'other'), ('l', 'local')], max_length=3, unique=True)),
                ('description', models.CharField(max_length=192)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'network_type',
            },
        ),
        migrations.CreateModel(
            name='NmapScan',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('raw_result', models.TextField()),
                ('runtime', models.FloatField()),
                ('devices_found', models.IntegerField()),
                ('devices_scanned', models.IntegerField()),
                ('network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.network')),
            ],
        ),
        migrations.CreateModel(
            name='NmapScanIgnoredDevice',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('mac', models.CharField(max_length=17, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='package',
            fields=[
                ('idx', models.AutoField(db_column='package_idx', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128)),
                ('version', models.CharField(max_length=128)),
                ('kind', models.CharField(choices=[('package', 'Package'), ('patch', 'Patch')], default='package', max_length=16)),
                ('always_latest', models.BooleanField(default=False)),
                ('arch', models.CharField(default='', max_length=32)),
                ('size', models.IntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'package',
            },
        ),
        migrations.CreateModel(
            name='package_device_connection',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('target_state', models.CharField(choices=[('keep', 'keep'), ('install', 'install'), ('upgrade', 'upgrade'), ('erase', 'erase')], default='keep', max_length=8)),
                ('installed', models.CharField(choices=[('u', 'unknown'), ('y', 'yes'), ('n', 'no')], default='u', max_length=8)),
                ('force_flag', models.BooleanField(default=False)),
                ('nodeps_flag', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('response_type', models.CharField(choices=[('zypper_xml', 'zypper_xml'), ('yum_flat', 'yum_flat'), ('unknown', 'unknown')], default='zypper_xml', max_length=16)),
                ('response_str', models.TextField(default='', max_length=65535)),
                ('install_time', models.IntegerField(default=0)),
                ('installed_name', models.CharField(default='', max_length=255)),
                ('installed_version', models.CharField(default='', max_length=255)),
                ('installed_release', models.CharField(default='', max_length=255)),
                ('image_dep', models.BooleanField(default=False)),
                ('kernel_dep', models.BooleanField(default=False)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('image_list', models.ManyToManyField(blank=True, to='backbone.image')),
                ('kernel_list', models.ManyToManyField(blank=True, to='backbone.kernel')),
                ('package', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.package')),
            ],
        ),
        migrations.CreateModel(
            name='package_repo',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=128, unique=True)),
                ('alias', models.CharField(blank=True, default='', max_length=128)),
                ('repo_type', models.CharField(blank=True, default='', max_length=128)),
                ('enabled', models.BooleanField(default=True)),
                ('autorefresh', models.BooleanField(default=True)),
                ('gpg_check', models.BooleanField(default=True)),
                ('url', models.CharField(default='', max_length=384)),
                ('username', models.CharField(blank=True, default='', max_length=128)),
                ('password', models.CharField(blank=True, default='', max_length=128)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('publish_to_nodes', models.BooleanField(default=False, verbose_name='PublishFlag')),
                ('priority', models.IntegerField(default=99)),
                ('deb_distribution', models.CharField(blank=True, default='', max_length=128)),
                ('deb_components', models.CharField(blank=True, default='', max_length=255)),
                ('system_type', models.CharField(choices=[('zypper', 'zypper (suse)'), ('yum', 'yum (redhat)')], default='zypper', max_length=64)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='package_search',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('search_string', models.CharField(default='', max_length=128)),
                ('last_search_string', models.CharField(blank=True, default='', max_length=128)),
                ('num_searches', models.IntegerField(default=0)),
                ('current_state', models.CharField(choices=[('ini', 'initialised'), ('wait', 'waiting'), ('run', 'search running'), ('done', 'search done')], default='ini', max_length=6)),
                ('deleted', models.BooleanField(default=False)),
                ('results', models.IntegerField(default=0)),
                ('last_search', models.DateTimeField(auto_now_add=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('search_string', 'results'),
            },
        ),
        migrations.CreateModel(
            name='package_search_result',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=128)),
                ('kind', models.CharField(choices=[('package', 'Package'), ('patch', 'Patch')], default='package', max_length=16)),
                ('arch', models.CharField(default='', max_length=32)),
                ('version', models.CharField(default='', max_length=128)),
                ('copied', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('package_repo', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.package_repo')),
                ('package_search', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.package_search')),
            ],
            options={
                'ordering': ('name', 'arch', 'version'),
            },
        ),
        migrations.CreateModel(
            name='package_service',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, unique=True)),
                ('enabled', models.BooleanField(default=True)),
                ('alias', models.CharField(default='', max_length=128)),
                ('autorefresh', models.BooleanField(default=True)),
                ('url', models.CharField(default='', max_length=256)),
                ('type', models.CharField(default='ris', max_length=64)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='partition',
            fields=[
                ('idx', models.AutoField(db_column='partition_idx', primary_key=True, serialize=False)),
                ('mountpoint', models.CharField(blank=True, default='/', max_length=192)),
                ('partition_hex', models.CharField(blank=True, max_length=6)),
                ('size', models.BigIntegerField(blank=True, null=True)),
                ('mount_options', models.CharField(blank=True, default='defaults', max_length=255)),
                ('pnum', models.IntegerField()),
                ('bootable', models.BooleanField(default=False)),
                ('fs_freq', models.IntegerField(blank=True, default=0, null=True)),
                ('fs_passno', models.IntegerField(blank=True, default=0, null=True)),
                ('disk_by_info', models.TextField(blank=True, default='')),
                ('warn_threshold', models.IntegerField(blank=True, default=85, null=True)),
                ('crit_threshold', models.IntegerField(blank=True, default=95, null=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('pnum',),
                'db_table': 'partition',
                'verbose_name': 'Partition',
            },
        ),
        migrations.CreateModel(
            name='partition_disc',
            fields=[
                ('idx', models.AutoField(db_column='partition_disc_idx', primary_key=True, serialize=False)),
                ('disc', models.CharField(max_length=192)),
                ('serial', models.TextField(default='')),
                ('size', models.BigIntegerField(null=True)),
                ('label_type', models.CharField(choices=[('gpt', 'GPT'), ('msdos', 'MSDOS')], default='gpt', max_length=128)),
                ('priority', models.IntegerField(default=0, null=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('priority', 'disc'),
                'db_table': 'partition_disc',
                'verbose_name': 'Partition: Disc',
            },
        ),
        migrations.CreateModel(
            name='partition_fs',
            fields=[
                ('idx', models.AutoField(db_column='partition_fs_idx', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=48, unique=True)),
                ('identifier', models.CharField(max_length=3)),
                ('descr', models.CharField(blank=True, max_length=765)),
                ('need_hexid', models.BooleanField(default=True)),
                ('hexid', models.CharField(max_length=6)),
                ('kernel_module', models.CharField(default='', max_length=128)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('name',),
                'db_table': 'partition_fs',
                'verbose_name': 'Partition: File System',
            },
        ),
        migrations.CreateModel(
            name='partition_table',
            fields=[
                ('idx', models.AutoField(db_column='partition_table_idx', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=192, unique=True)),
                ('description', models.CharField(blank=True, default='', max_length=255)),
                ('enabled', models.BooleanField(default=True)),
                ('valid', models.BooleanField(default=False)),
                ('modify_bootloader', models.IntegerField(default=0)),
                ('nodeboot', models.BooleanField(default=False)),
                ('user_created', models.BooleanField(default=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'partition_table',
                'verbose_name': 'Partition: Table',
            },
        ),
        migrations.CreateModel(
            name='peer_information',
            fields=[
                ('idx', models.AutoField(db_column='peer_information_idx', primary_key=True, serialize=False)),
                ('s_spec', models.CharField(blank=True, default='', max_length=128, verbose_name='source spec')),
                ('d_spec', models.CharField(blank=True, default='', max_length=128, verbose_name='dest spec')),
                ('penalty', models.IntegerField(default=0, verbose_name='cost')),
                ('autocreated', models.BooleanField(default=False)),
                ('info', models.CharField(blank=True, default='', max_length=256)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('d_netdevice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='peer_d_netdevice', to='backbone.netdevice')),
                ('s_netdevice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='peer_s_netdevice', to='backbone.netdevice')),
            ],
            options={
                'db_table': 'peer_information',
                'verbose_name': 'Peer information',
            },
        ),
        migrations.CreateModel(
            name='PopulateRamdiskCmdLine',
            fields=[
                ('idx', models.AutoField(db_column='kernel_log_idx', primary_key=True, serialize=False)),
                ('user', models.CharField(default='', max_length=256)),
                ('machine', models.CharField(default='', max_length=256)),
                ('cmdline', models.TextField(default='')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('kernel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.kernel')),
            ],
        ),
        migrations.CreateModel(
            name='quota_capable_blockdevice',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('block_device_path', models.CharField(default=b'', max_length=256)),
                ('mount_path', models.CharField(default=b'', max_length=512)),
                ('size', models.BigIntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('fs_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.partition_fs')),
            ],
        ),
        migrations.CreateModel(
            name='ReportHistory',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('created_at_time', models.DateTimeField(null=True)),
                ('number_of_pages', models.IntegerField(default=0)),
                ('number_of_downloads', models.IntegerField(default=0)),
                ('size', models.BigIntegerField(default=0)),
                ('b64_size', models.BigIntegerField(default=0)),
                ('type', models.TextField(null=True)),
                ('filename', models.TextField(null=True)),
                ('progress', models.IntegerField(default=0)),
                ('file_hash', models.TextField(null=True)),
                ('hash_algorithm', models.TextField(null=True)),
                ('created_by_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='rms_accounting_record',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('slots_used', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='rms_accounting_run',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('aggregation_level', models.CharField(choices=[('n', b'none'), ('h', b'hour'), ('d', b'day'), ('m', b'month'), ('y', b'year')], default='n', max_length=1)),
                ('slots_defined', models.IntegerField(default=1)),
                ('aggregation_start', models.DateTimeField(default=None, null=True)),
                ('aggregation_end', models.DateTimeField(default=None, null=True)),
                ('weight', models.IntegerField(default=0)),
                ('num_source_records', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='rms_department',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='rms_job',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('jobid', models.IntegerField()),
                ('taskid', models.IntegerField(null=True)),
                ('owner', models.CharField(default='', max_length=255)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='rms_job_run',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('hostname', models.CharField(max_length=255)),
                ('granted_pe', models.CharField(default='', max_length=192)),
                ('slots', models.IntegerField(null=True)),
                ('priority', models.IntegerField(default=0)),
                ('account', models.CharField(default='', max_length=384)),
                ('failed', models.IntegerField(default=0)),
                ('failed_str', models.CharField(default='', max_length=255)),
                ('exit_status', models.IntegerField(default=0)),
                ('exit_status_str', models.CharField(default='', max_length=255)),
                ('queue_time', models.DateTimeField(null=True)),
                ('start_time', models.DateTimeField(null=True)),
                ('end_time', models.DateTimeField(null=True)),
                ('start_time_py', models.DateTimeField(null=True)),
                ('end_time_py', models.DateTimeField(null=True)),
                ('qacct_called', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('rms_department', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.rms_department')),
                ('rms_job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.rms_job')),
            ],
        ),
        migrations.CreateModel(
            name='rms_pe',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='rms_pe_info',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('hostname', models.CharField(max_length=255)),
                ('slots', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('rms_job_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.rms_job_run')),
            ],
        ),
        migrations.CreateModel(
            name='rms_project',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='rms_queue',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='rms_user',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('fshare', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('default_project', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.rms_project')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RMSJobVariable',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=255)),
                ('raw_value', models.TextField(default='')),
                ('parsed_type', models.CharField(choices=[('i', 'Integer'), ('f', 'Float'), ('s', 'String')], default='s', max_length=2)),
                ('parsed_integer', models.IntegerField(default=None, null=True)),
                ('parsed_float', models.FloatField(default=None, null=True)),
                ('unit', models.CharField(default='', max_length=16)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('rms_job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.rms_job')),
                ('rms_job_run', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.rms_job_run')),
            ],
        ),
        migrations.CreateModel(
            name='RMSJobVariableAction',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=255, unique=True)),
                ('code', models.TextField(default='')),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='RMSJobVariableActionRun',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('run_time', models.FloatField(default=0.0)),
                ('success', models.BooleanField(default=False)),
                ('vars_created', models.IntegerField(default=0)),
                ('triggered_run', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('rms_job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.rms_job')),
                ('rms_job_variable_action_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.RMSJobVariableAction')),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('active', models.BooleanField(default=True)),
                ('name', models.CharField(default='', max_length=64, unique=True)),
                ('description', models.TextField(blank=True, default='')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('create_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='RoleObjectPermission',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('level', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('csw_object_permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.csw_object_permission')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.Role')),
            ],
            options={
                'verbose_name': 'Global Object permissions of Role',
            },
        ),
        migrations.CreateModel(
            name='RolePermission',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('level', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('csw_permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.csw_permission')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.Role')),
            ],
            options={
                'verbose_name': 'Global permissions of Role',
            },
        ),
        migrations.CreateModel(
            name='RouteTrace',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('session_id', models.CharField(default='', max_length=64)),
                ('user_id', models.IntegerField(default=0)),
                ('from_name', models.CharField(max_length=64)),
                ('to_name', models.CharField(max_length=64)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='ScanHistory',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('source', models.IntegerField(choices=[(1, b'SNMP'), (2, b'ASU'), (3, b'IPMI'), (4, b'PACKAGE'), (5, b'HARDWARE'), (6, b'LICENSE'), (7, b'UPDATE'), (8, b'SOFTWARE_VERSION'), (9, b'PROCESS'), (10, b'PENDING_UPDATE')])),
                ('duration', models.IntegerField()),
                ('success', models.BooleanField(default=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
            ],
        ),
        migrations.CreateModel(
            name='ScheduleItem',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('model_name', models.TextField()),
                ('object_id', models.IntegerField()),
                ('planned_date', models.DateTimeField(default=None, null=True)),
                ('run_now', models.BooleanField(default=False)),
                ('schedule_handler', models.TextField()),
                ('schedule_handler_data', models.TextField(null=True)),
                ('dispatch_setting', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.DispatcherSetting')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SensorAction',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64, unique=True)),
                ('description', models.CharField(default='', max_length=256)),
                ('action', models.CharField(choices=[('none', 'do nothing'), ('reboot', 'restart device'), ('halt', 'halt device'), ('poweroff', 'poweroff device'), ('poweron', 'turn on device')], default='none', max_length=64)),
                ('hard_control', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='SensorThreshold',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=64)),
                ('lower_value', models.FloatField(default=0.0)),
                ('upper_value', models.FloatField(default=0.0)),
                ('lower_mail', models.BooleanField(default=False)),
                ('upper_mail', models.BooleanField(default=False)),
                ('lower_enabled', models.BooleanField(default=True)),
                ('upper_enabled', models.BooleanField(default=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sensor_threshold_create_user', to=settings.AUTH_USER_MODEL)),
                ('device_selection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.DeviceSelection')),
                ('lower_sensor_action', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lower_sensor_action', to='backbone.SensorAction')),
                ('mv_value_entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.MVValueEntry')),
                ('notify_users', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL)),
                ('upper_sensor_action', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='upper_sensor_action', to='backbone.SensorAction')),
            ],
        ),
        migrations.CreateModel(
            name='SensorThresholdAction',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('action_type', models.CharField(choices=[('lower', 'lower'), ('upper', 'upper')], max_length=12)),
                ('mail', models.BooleanField(default=False)),
                ('value', models.FloatField(default=0.0)),
                ('triggered', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('create_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sensor_threshold_action_create_user', to=settings.AUTH_USER_MODEL)),
                ('device_selection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.DeviceSelection')),
                ('notify_users', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
                ('sensor_action', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.SensorAction')),
                ('sensor_threshold', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.SensorThreshold')),
            ],
        ),
        migrations.CreateModel(
            name='snmp_network_type',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('if_type', models.IntegerField(default=0)),
                ('if_label', models.CharField(default='', max_length=128)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='snmp_scheme',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, unique=True)),
                ('description', models.CharField(default='', max_length=128)),
                ('version', models.IntegerField(default=1)),
                ('collect', models.BooleanField(default=False)),
                ('initial', models.BooleanField(default=False)),
                ('mon_check', models.BooleanField(default=False)),
                ('power_control', models.BooleanField(default=False)),
                ('priority', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='snmp_scheme_tl_oid',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('oid', models.CharField(default='', max_length=255)),
                ('optional', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('snmp_scheme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.snmp_scheme')),
            ],
        ),
        migrations.CreateModel(
            name='snmp_scheme_vendor',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, unique=True)),
                ('company_info', models.CharField(default='', max_length=256)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='StaticAsset',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('create_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
            ],
        ),
        migrations.CreateModel(
            name='StaticAssetFieldValue',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('value_str', models.CharField(blank=True, default=None, max_length=255, null=True)),
                ('value_int', models.IntegerField(blank=True, default=None, null=True)),
                ('value_date', models.DateField(blank=True, default=None, null=True)),
                ('value_text', models.TextField(blank=True, default=None, null=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('change_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('static_asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.StaticAsset')),
            ],
        ),
        migrations.CreateModel(
            name='StaticAssetTemplate',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=256)),
                ('name', models.CharField(max_length=128, unique=True)),
                ('description', models.TextField(blank=True, default='')),
                ('system_template', models.BooleanField(default=False)),
                ('enabled', models.BooleanField(default=True)),
                ('multi', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('parent_template', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.StaticAssetTemplate')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StaticAssetTemplateField',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=64)),
                ('field_description', models.TextField(blank=True, default='')),
                ('field_type', models.IntegerField(choices=[(1, b'INTEGER'), (2, b'STRING'), (3, b'DATE'), (4, b'TEXT')])),
                ('optional', models.BooleanField(default=True)),
                ('consumable', models.BooleanField(default=False)),
                ('consumable_start_value', models.IntegerField(default=0)),
                ('consumable_warn_value', models.IntegerField(default=0)),
                ('consumable_critical_value', models.IntegerField(default=0)),
                ('date_check', models.BooleanField(default=False)),
                ('date_warn_value', models.IntegerField(default=60)),
                ('date_critical_value', models.IntegerField(default=30)),
                ('fixed', models.BooleanField(default=False)),
                ('default_value_str', models.CharField(blank=True, default='', max_length=255)),
                ('default_value_int', models.IntegerField(default=0)),
                ('default_value_date', models.DateField(default=django.utils.timezone.now)),
                ('default_value_text', models.TextField(blank=True, default='')),
                ('has_bounds', models.BooleanField(default=False)),
                ('value_int_lower_bound', models.IntegerField(default=0)),
                ('value_int_upper_bound', models.IntegerField(default=0)),
                ('monitor', models.BooleanField(default=False)),
                ('hidden', models.BooleanField(default=False)),
                ('show_in_overview', models.BooleanField(default=False)),
                ('ordering', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('static_asset_template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.StaticAssetTemplate')),
            ],
            options={
                'ordering': ['ordering'],
            },
        ),
        migrations.CreateModel(
            name='status',
            fields=[
                ('idx', models.AutoField(db_column=b'status_idx', primary_key=True, serialize=False)),
                ('status', models.CharField(max_length=255, unique=True)),
                ('prod_link', models.BooleanField(default=True)),
                ('memory_test', models.BooleanField(default=False)),
                ('boot_iso', models.BooleanField(default=False)),
                ('boot_local', models.BooleanField(default=False)),
                ('do_install', models.BooleanField(default=False)),
                ('is_clean', models.BooleanField(default=False)),
                ('allow_boolean_modify', models.BooleanField(default=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'status',
            },
        ),
        migrations.CreateModel(
            name='sys_partition',
            fields=[
                ('idx', models.AutoField(db_column='sys_partition_idx', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=192)),
                ('mountpoint', models.CharField(default='/', max_length=192)),
                ('mount_options', models.CharField(blank=True, max_length=255)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('partition_table', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.partition_table')),
            ],
            options={
                'db_table': 'sys_partition',
                'verbose_name': 'Partition: System Partition',
            },
        ),
        migrations.CreateModel(
            name='SyslogCheck',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64, unique=True)),
                ('xml_source', models.TextField(default='')),
                ('version', models.IntegerField(default=1)),
                ('enabled', models.BooleanField(default=True)),
                ('minutes_to_consider', models.IntegerField(default=5)),
                ('expressions', models.TextField(default='')),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='user_device_login',
            fields=[
                ('idx', models.AutoField(db_column='user_device_login_idx', primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_device_login',
            },
        ),
        migrations.CreateModel(
            name='user_object_permission',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('level', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('csw_object_permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.csw_object_permission')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Object permissions of users',
            },
        ),
        migrations.CreateModel(
            name='user_permission',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('level', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('csw_permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.csw_permission')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Global permissions of users',
            },
        ),
        migrations.CreateModel(
            name='user_quota_setting',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('bytes_used', models.BigIntegerField(default=0)),
                ('bytes_soft', models.BigIntegerField(default=0)),
                ('bytes_hard', models.BigIntegerField(default=0)),
                ('bytes_gracetime', models.IntegerField(default=0)),
                ('bytes_soft_target', models.BigIntegerField(default=0)),
                ('bytes_hard_target', models.BigIntegerField(default=0)),
                ('files_used', models.BigIntegerField(default=0)),
                ('files_soft', models.BigIntegerField(default=0)),
                ('files_hard', models.BigIntegerField(default=0)),
                ('files_gracetime', models.IntegerField(default=0)),
                ('files_soft_target', models.BigIntegerField(default=0)),
                ('files_hard_target', models.BigIntegerField(default=0)),
                ('quota_flags', models.CharField(default='--', max_length=4)),
                ('quota_capable_blockdevice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.quota_capable_blockdevice')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='user_scan_result',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('full_name', models.TextField(default='')),
                ('name', models.CharField(default='', max_length=384)),
                ('size', models.BigIntegerField(default=0)),
                ('size_total', models.BigIntegerField(default=0)),
                ('num_files', models.BigIntegerField(default=0)),
                ('num_dirs', models.BigIntegerField(default=0)),
                ('num_files_total', models.BigIntegerField(default=0)),
                ('num_dirs_total', models.BigIntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('parent_dir', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.user_scan_result')),
            ],
            options={
                'ordering': ('idx',),
            },
        ),
        migrations.CreateModel(
            name='user_scan_run',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('current', models.BooleanField(default=False)),
                ('running', models.BooleanField(default=False)),
                ('run_time', models.IntegerField(default=0)),
                ('scan_depth', models.IntegerField(default=1)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='user_variable',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, default='', max_length=255)),
                ('var_type', models.CharField(choices=[('s', 'string'), ('i', 'integer'), ('b', 'boolean'), ('j', 'json-encoded'), ('n', 'none')], max_length=2)),
                ('name', models.CharField(max_length=189)),
                ('value', models.CharField(blank=True, default='', max_length=512)),
                ('json_value', models.TextField(blank=True, default='')),
                ('editable', models.BooleanField(default=False)),
                ('hidden', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserLogEntry',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('sent_via_digest', models.BooleanField(default=False)),
                ('viewed_via_webfrontend', models.BooleanField(default=False)),
                ('text', models.CharField(default='', max_length=765)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('devices', models.ManyToManyField(to='backbone.device')),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.LogLevel')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.LogSource')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='virtual_desktop_protocol',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=256, unique=True)),
                ('binary', models.CharField(default='', max_length=256)),
                ('description', models.TextField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('devices', models.ManyToManyField(to='backbone.device')),
            ],
        ),
        migrations.CreateModel(
            name='virtual_desktop_user_setting',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('screen_size', models.CharField(max_length=256)),
                ('port', models.IntegerField(default=0)),
                ('effective_port', models.IntegerField(default=0)),
                ('websockify_port', models.IntegerField(default=0)),
                ('websockify_effective_port', models.IntegerField(default=0)),
                ('websockify_pid', models.IntegerField(default=0)),
                ('websockify_process_name', models.CharField(blank=True, default='', max_length=256)),
                ('password', models.CharField(blank=True, default='', max_length=256)),
                ('is_running', models.BooleanField(default=False)),
                ('pid', models.IntegerField(default=0)),
                ('process_name', models.CharField(blank=True, default='', max_length=256)),
                ('last_start_attempt', models.DateTimeField(blank=True, default=datetime.datetime(1970, 1, 1, 1, 0))),
                ('to_delete', models.BooleanField(default=False)),
                ('state', models.IntegerField(default=1)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('virtual_desktop_protocol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.virtual_desktop_protocol')),
            ],
        ),
        migrations.CreateModel(
            name='window_manager',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=256, unique=True)),
                ('binary', models.CharField(default='', max_length=256)),
                ('description', models.TextField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('devices', models.ManyToManyField(to='backbone.device')),
            ],
        ),
        migrations.CreateModel(
            name='WrittenConfigFile',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('run_number', models.IntegerField(default=0)),
                ('uid', models.IntegerField(blank=True, default=0)),
                ('gid', models.IntegerField(blank=True, default=0)),
                ('mode', models.IntegerField(blank=True, default=493)),
                ('dest_type', models.CharField(choices=[(b'f', b'file'), (b'l', b'link'), (b'd', b'directory'), (b'e', b'erase'), (b'c', b'copy'), (b'i', b'internal')], max_length=8)),
                ('source', models.TextField(default=b'')),
                ('dest', models.TextField(default=b'')),
                ('error_flag', models.BooleanField(default=False)),
                ('content', models.TextField(blank=True, default=b'')),
                ('binary', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('config', models.ManyToManyField(to='backbone.config')),
                ('config_tree_node', models.OneToOneField(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.ConfigTreeNode')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
            ],
        ),
        migrations.AddField(
            model_name='virtual_desktop_user_setting',
            name='window_manager',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.window_manager'),
        ),
        migrations.AddField(
            model_name='user_scan_result',
            name='user_scan_run',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.user_scan_run'),
        ),
        migrations.AddField(
            model_name='staticassetfieldvalue',
            name='static_asset_template_field',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.StaticAssetTemplateField'),
        ),
        migrations.AddField(
            model_name='staticasset',
            name='static_asset_template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.StaticAssetTemplate'),
        ),
        migrations.AddField(
            model_name='snmp_scheme',
            name='snmp_scheme_vendor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.snmp_scheme_vendor'),
        ),
        migrations.AddField(
            model_name='role',
            name='object_perms',
            field=models.ManyToManyField(blank=True, related_name='role_perms', through='backbone.RoleObjectPermission', to='backbone.csw_object_permission'),
        ),
        migrations.AddField(
            model_name='role',
            name='perms',
            field=models.ManyToManyField(blank=True, related_name='role_perms', through='backbone.RolePermission', to='backbone.csw_permission'),
        ),
        migrations.AddField(
            model_name='rms_job_run',
            name='rms_pe',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.rms_pe'),
        ),
        migrations.AddField(
            model_name='rms_job_run',
            name='rms_project',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.rms_project'),
        ),
        migrations.AddField(
            model_name='rms_job_run',
            name='rms_queue',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.rms_queue'),
        ),
        migrations.AddField(
            model_name='rms_job',
            name='rms_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backbone.rms_user'),
        ),
        migrations.AddField(
            model_name='rms_job',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='rms_accounting_record',
            name='rms_accounting_run',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.rms_accounting_run'),
        ),
        migrations.AddField(
            model_name='rms_accounting_record',
            name='rms_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.rms_user'),
        ),
        migrations.AddField(
            model_name='partition_disc',
            name='partition_table',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.partition_table'),
        ),
        migrations.AddField(
            model_name='partition',
            name='partition_disc',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.partition_disc'),
        ),
        migrations.AddField(
            model_name='partition',
            name='partition_fs',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.partition_fs'),
        ),
        migrations.AddField(
            model_name='package_repo',
            name='service',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.package_service'),
        ),
        migrations.AddField(
            model_name='package',
            name='package_repo',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.package_repo'),
        ),
        migrations.AddField(
            model_name='package',
            name='target_repo',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='target_repo_package', to='backbone.package_repo'),
        ),
        migrations.AddField(
            model_name='network',
            name='network_device_type',
            field=models.ManyToManyField(blank=True, to='backbone.network_device_type'),
        ),
        migrations.AddField(
            model_name='network',
            name='network_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.network_type'),
        ),
        migrations.AddField(
            model_name='network',
            name='preferred_domain_tree_node',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.domain_tree_node'),
        ),
        migrations.AddField(
            model_name='netdevice',
            name='netdevice_speed',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.netdevice_speed'),
        ),
        migrations.AddField(
            model_name='netdevice',
            name='network_device_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.network_device_type'),
        ),
        migrations.AddField(
            model_name='netdevice',
            name='snmp_network_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.snmp_network_type'),
        ),
        migrations.AddField(
            model_name='net_ip',
            name='netdevice',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.netdevice'),
        ),
        migrations.AddField(
            model_name='net_ip',
            name='network',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.network'),
        ),
        migrations.AddField(
            model_name='monhosttrace',
            name='generation',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.MonHostTraceGeneration'),
        ),
        migrations.AddField(
            model_name='mon_service_dependency',
            name='mon_service_dependency_templ',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_service_dependency_templ'),
        ),
        migrations.AddField(
            model_name='mon_service_cluster',
            name='mon_service_templ',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_service_templ'),
        ),
        migrations.AddField(
            model_name='mon_icinga_log_aggregated_service_data',
            name='timespan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_icinga_log_aggregated_timespan'),
        ),
        migrations.AddField(
            model_name='mon_icinga_log_aggregated_host_data',
            name='timespan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_icinga_log_aggregated_timespan'),
        ),
        migrations.AddField(
            model_name='mon_host_dependency_templ',
            name='dependency_period',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_period'),
        ),
        migrations.AddField(
            model_name='mon_host_dependency',
            name='mon_host_dependency_templ',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_host_dependency_templ'),
        ),
        migrations.AddField(
            model_name='mon_host_cluster',
            name='mon_service_templ',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_service_templ'),
        ),
        migrations.AddField(
            model_name='mon_device_templ',
            name='mon_period',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dev_check_period', to='backbone.mon_period'),
        ),
        migrations.AddField(
            model_name='mon_device_templ',
            name='mon_service_templ',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_service_templ'),
        ),
        migrations.AddField(
            model_name='mon_device_templ',
            name='not_period',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dev_notify_period', to='backbone.mon_period'),
        ),
        migrations.AddField(
            model_name='mon_device_esc_templ',
            name='esc_period',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_period'),
        ),
        migrations.AddField(
            model_name='mon_device_esc_templ',
            name='mon_service_esc_templ',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_service_esc_templ'),
        ),
        migrations.AddField(
            model_name='mon_contactgroup',
            name='service_esc_templates',
            field=models.ManyToManyField(blank=True, to='backbone.mon_service_esc_templ'),
        ),
        migrations.AddField(
            model_name='mon_contactgroup',
            name='service_templates',
            field=models.ManyToManyField(blank=True, to='backbone.mon_service_templ'),
        ),
        migrations.AddField(
            model_name='mon_contact',
            name='hnperiod',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='host_n_period', to='backbone.mon_period', verbose_name='host period'),
        ),
        migrations.AddField(
            model_name='mon_contact',
            name='notifications',
            field=models.ManyToManyField(blank=True, to='backbone.mon_notification'),
        ),
        migrations.AddField(
            model_name='mon_contact',
            name='snperiod',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_n_period', to='backbone.mon_period', verbose_name='service period'),
        ),
        migrations.AddField(
            model_name='mon_contact',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='mon_check_command',
            name='mon_check_command_special',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_check_command_special'),
        ),
        migrations.AddField(
            model_name='mon_check_command',
            name='mon_service_templ',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_service_templ'),
        ),
        migrations.AddField(
            model_name='mon_build_unreachable',
            name='mon_dist_master',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_dist_master'),
        ),
        migrations.AddField(
            model_name='lvm_vg',
            name='partition_table',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.partition_table'),
        ),
        migrations.AddField(
            model_name='lvm_lv',
            name='lvm_vg',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.lvm_vg'),
        ),
        migrations.AddField(
            model_name='lvm_lv',
            name='partition_fs',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.partition_fs'),
        ),
        migrations.AddField(
            model_name='lvm_lv',
            name='partition_table',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.partition_table'),
        ),
        migrations.AddField(
            model_name='logicaldisc',
            name='partition_fs',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.partition_fs'),
        ),
        migrations.AddField(
            model_name='logicaldisc',
            name='partition_table',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.partition_table'),
        ),
        migrations.AddField(
            model_name='logicaldisc',
            name='partitions',
            field=models.ManyToManyField(to='backbone.partition'),
        ),
        migrations.AddField(
            model_name='initrd_build',
            name='kernel',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.kernel'),
        ),
        migrations.AddField(
            model_name='icsweggconsumer',
            name='egg_cradle',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.icswEggCradle'),
        ),
        migrations.AddField(
            model_name='icsweggconsumer',
            name='egg_evaluation_def',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.icswEggEvaluationDef'),
        ),
        migrations.AddField(
            model_name='icsweggbasket',
            name='egg_cradle',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.icswEggCradle'),
        ),
        migrations.AddField(
            model_name='icsweggbasket',
            name='license',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.License'),
        ),
        migrations.AddField(
            model_name='group_quota_setting',
            name='quota_capable_blockdevice',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.quota_capable_blockdevice'),
        ),
        migrations.AddField(
            model_name='group',
            name='object_perms',
            field=models.ManyToManyField(blank=True, related_name='db_group_perms', through='backbone.group_object_permission', to='backbone.csw_object_permission'),
        ),
        migrations.AddField(
            model_name='group',
            name='parent_group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.group'),
        ),
        migrations.AddField(
            model_name='group',
            name='perms',
            field=models.ManyToManyField(blank=True, related_name='db_group_perms', through='backbone.group_permission', to='backbone.csw_permission'),
        ),
        migrations.AddField(
            model_name='group',
            name='roles',
            field=models.ManyToManyField(blank=True, related_name='role_groups', to='backbone.Role'),
        ),
        migrations.AlterUniqueTogether(
            name='graphsettingsize',
            unique_together=set([('width', 'height')]),
        ),
        migrations.AddField(
            model_name='graphsetting',
            name='graph_setting_forecast',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.GraphSettingForecast'),
        ),
        migrations.AddField(
            model_name='graphsetting',
            name='graph_setting_size',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.GraphSettingSize'),
        ),
        migrations.AddField(
            model_name='graphsetting',
            name='graph_setting_timeshift',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.GraphSettingTimeshift'),
        ),
        migrations.AddField(
            model_name='graphsetting',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='ext_license_usage_coarse',
            name='ext_license_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.ext_license_user'),
        ),
        migrations.AddField(
            model_name='ext_license_usage_coarse',
            name='ext_license_version_state_coarse',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.ext_license_version_state_coarse'),
        ),
        migrations.AddField(
            model_name='ext_license_usage',
            name='ext_license_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.ext_license_user'),
        ),
        migrations.AddField(
            model_name='ext_license_usage',
            name='ext_license_version_state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.ext_license_version_state'),
        ),
        migrations.AddField(
            model_name='ext_license_check_coarse',
            name='ext_license_site',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.ext_license_site'),
        ),
        migrations.AddField(
            model_name='ext_license_check',
            name='ext_license_site',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.ext_license_site'),
        ),
        migrations.AddField(
            model_name='ext_license',
            name='ext_license_site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.ext_license_site'),
        ),
        migrations.AddField(
            model_name='distributedservice',
            name='domaintypeenum',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='backbone.DomainTypeEnum'),
        ),
        migrations.AddField(
            model_name='dispatchersetting',
            name='run_schedule',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.DispatcherSettingSchedule'),
        ),
        migrations.AddField(
            model_name='dispatchersetting',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='dispatcherlink',
            name='dispatcher_setting',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.DispatcherSetting'),
        ),
        migrations.AddField(
            model_name='dispatcherlink',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='devicelogentry',
            name='level',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.LogLevel'),
        ),
        migrations.AddField(
            model_name='devicelogentry',
            name='read_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='read_device_logs', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='devicelogentry',
            name='source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.LogSource'),
        ),
        migrations.AddField(
            model_name='devicelogentry',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='device_variable',
            name='device_variable_scope',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device_variable_scope'),
        ),
        migrations.AddField(
            model_name='device_variable',
            name='dvs_allowed_name',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.dvs_allowed_name'),
        ),
        migrations.AddField(
            model_name='device_mon_location',
            name='location_gfx',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.location_gfx'),
        ),
        migrations.AddField(
            model_name='device_group',
            name='domain_tree_node',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.domain_tree_node'),
        ),
        migrations.AddField(
            model_name='device',
            name='act_partition_table',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='act_partition_table', to='backbone.partition_table'),
        ),
        migrations.AddField(
            model_name='device',
            name='bootnetdevice',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='boot_net_device', to='backbone.netdevice'),
        ),
        migrations.AddField(
            model_name='device',
            name='bootserver',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='boot_server', to='backbone.device'),
        ),
        migrations.AddField(
            model_name='device',
            name='categories',
            field=models.ManyToManyField(blank=True, to='backbone.category'),
        ),
        migrations.AddField(
            model_name='device',
            name='com_capability_list',
            field=models.ManyToManyField(to='backbone.ComCapability'),
        ),
        migrations.AddField(
            model_name='device',
            name='creator',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='device',
            name='device_class',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.DeviceClass'),
        ),
        migrations.AddField(
            model_name='device',
            name='device_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='device_group', to='backbone.device_group'),
        ),
        migrations.AddField(
            model_name='device',
            name='domain_tree_node',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.domain_tree_node'),
        ),
        migrations.AddField(
            model_name='device',
            name='master_connections',
            field=models.ManyToManyField(related_name='slave_connections', through='backbone.cd_connection', to='backbone.device'),
        ),
        migrations.AddField(
            model_name='device',
            name='mon_device_esc_templ',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_device_esc_templ'),
        ),
        migrations.AddField(
            model_name='device',
            name='mon_device_templ',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_device_templ'),
        ),
        migrations.AddField(
            model_name='device',
            name='mon_ext_host',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_ext_host'),
        ),
        migrations.AddField(
            model_name='device',
            name='monitor_server',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.device'),
        ),
        migrations.AddField(
            model_name='device',
            name='nagvis_parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='nagvis_childs', to='backbone.device'),
        ),
        migrations.AddField(
            model_name='device',
            name='new_image',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='new_image', to='backbone.image'),
        ),
        migrations.AddField(
            model_name='device',
            name='new_kernel',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='new_kernel', to='backbone.kernel'),
        ),
        migrations.AddField(
            model_name='device',
            name='new_state',
            field=models.ForeignKey(blank=True, db_column=b'newstate_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.status'),
        ),
        migrations.AddField(
            model_name='device',
            name='partition_table',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='new_partition_table', to='backbone.partition_table'),
        ),
        migrations.AddField(
            model_name='device',
            name='prod_link',
            field=models.ForeignKey(blank=True, db_column=b'prod_link', null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.network'),
        ),
        migrations.AddField(
            model_name='device',
            name='snmp_schemes',
            field=models.ManyToManyField(to='backbone.snmp_scheme'),
        ),
        migrations.AlterUniqueTogether(
            name='deleterequest',
            unique_together=set([('obj_pk', 'model')]),
        ),
        migrations.AddField(
            model_name='csw_object_permission',
            name='csw_permission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.csw_permission'),
        ),
        migrations.AddField(
            model_name='configtreenode',
            name='device',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='backbone.device'),
        ),
        migrations.AddField(
            model_name='configtreenode',
            name='parent',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.ConfigTreeNode'),
        ),
        migrations.AddField(
            model_name='config_str',
            name='device',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.device'),
        ),
        migrations.AddField(
            model_name='config_script',
            name='device',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.device'),
        ),
        migrations.AddField(
            model_name='config_int',
            name='device',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.device'),
        ),
        migrations.AddField(
            model_name='config_bool',
            name='device',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.device'),
        ),
        migrations.AddField(
            model_name='config_blob',
            name='device',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.device'),
        ),
        migrations.AddField(
            model_name='config',
            name='config_catalog',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.config_catalog'),
        ),
        migrations.AddField(
            model_name='config',
            name='config_service_enum',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.ConfigServiceEnum'),
        ),
        migrations.AddField(
            model_name='cd_connection',
            name='child',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='child_device', to='backbone.device'),
        ),
        migrations.AddField(
            model_name='cd_connection',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='cd_connection',
            name='parent',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parent_device', to='backbone.device'),
        ),
        migrations.AddField(
            model_name='background_job_run',
            name='server',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device'),
        ),
        migrations.AddField(
            model_name='background_job_run',
            name='source',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.LogSource'),
        ),
        migrations.AddField(
            model_name='background_job',
            name='initiator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bgj_initiator', to='backbone.device'),
        ),
        migrations.AddField(
            model_name='background_job',
            name='target_server',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bgj_target_server', to='backbone.device'),
        ),
        migrations.AddField(
            model_name='background_job',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='assetprocessentry',
            name='asset_run',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.AssetRun'),
        ),
        migrations.AddField(
            model_name='assetpcientry',
            name='asset_run',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.AssetRun'),
        ),
        migrations.AddField(
            model_name='assetlicenseentry',
            name='asset_run',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.AssetRun'),
        ),
        migrations.AddField(
            model_name='assethardwareentry',
            name='asset_run',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.AssetRun'),
        ),
        migrations.AddField(
            model_name='assethardwareentry',
            name='parent',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.AssetHardwareEntry'),
        ),
        migrations.AddField(
            model_name='assetdmihead',
            name='asset_run',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.AssetRun'),
        ),
        migrations.AddField(
            model_name='assetdmihandle',
            name='dmihead',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.AssetDMIHead'),
        ),
        migrations.AddField(
            model_name='assetbatch',
            name='cpus',
            field=models.ManyToManyField(to='backbone.AssetHWCPUEntry'),
        ),
        migrations.AddField(
            model_name='assetbatch',
            name='device',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device'),
        ),
        migrations.AddField(
            model_name='assetbatch',
            name='displays',
            field=models.ManyToManyField(to='backbone.AssetHWDisplayEntry'),
        ),
        migrations.AddField(
            model_name='assetbatch',
            name='gpus',
            field=models.ManyToManyField(to='backbone.AssetHWGPUEntry'),
        ),
        migrations.AddField(
            model_name='assetbatch',
            name='installed_packages',
            field=models.ManyToManyField(to='backbone.AssetPackageVersionInstallInfo'),
        ),
        migrations.AddField(
            model_name='assetbatch',
            name='installed_updates',
            field=models.ManyToManyField(related_name='assetbatch_installed_updates', to='backbone.AssetUpdateEntry'),
        ),
        migrations.AddField(
            model_name='assetbatch',
            name='memory_modules',
            field=models.ManyToManyField(to='backbone.AssetHWMemoryEntry'),
        ),
        migrations.AddField(
            model_name='assetbatch',
            name='network_devices',
            field=models.ManyToManyField(to='backbone.AssetHWNetworkDevice'),
        ),
        migrations.AddField(
            model_name='assetbatch',
            name='partition_table',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backbone.partition_table'),
        ),
        migrations.AddField(
            model_name='assetbatch',
            name='pending_updates',
            field=models.ManyToManyField(related_name='assetbatch_pending_updates', to='backbone.AssetUpdateEntry'),
        ),
        migrations.AddField(
            model_name='assetbatch',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='allowed_device_groups',
            field=models.ManyToManyField(blank=True, to='backbone.device_group'),
        ),
        migrations.AddField(
            model_name='user',
            name='export',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='export', to='backbone.device_config'),
        ),
        migrations.AddField(
            model_name='user',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.group'),
        ),
        migrations.AddField(
            model_name='user',
            name='object_perms',
            field=models.ManyToManyField(blank=True, related_name='db_user_perms', through='backbone.user_object_permission', to='backbone.csw_object_permission'),
        ),
        migrations.AddField(
            model_name='user',
            name='perms',
            field=models.ManyToManyField(blank=True, related_name='db_user_perms', through='backbone.user_permission', to='backbone.csw_permission'),
        ),
        migrations.AddField(
            model_name='user',
            name='roles',
            field=models.ManyToManyField(blank=True, related_name='role_users', to='backbone.Role'),
        ),
        migrations.AddField(
            model_name='user',
            name='secondary_groups',
            field=models.ManyToManyField(blank=True, related_name='secondary', to='backbone.group'),
        ),
        migrations.AlterUniqueTogether(
            name='user_variable',
            unique_together=set([('name', 'user')]),
        ),
        migrations.AlterUniqueTogether(
            name='staticassettemplatefield',
            unique_together=set([('static_asset_template', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='rmsjobvariable',
            unique_together=set([('name', 'rms_job', 'rms_job_run')]),
        ),
        migrations.AlterUniqueTogether(
            name='package',
            unique_together=set([('name', 'version', 'arch', 'kind', 'target_repo')]),
        ),
        migrations.AlterUniqueTogether(
            name='mon_check_command',
            unique_together=set([('name', 'config')]),
        ),
        migrations.AlterUniqueTogether(
            name='graphsetting',
            unique_together=set([('user', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='dvs_allowed_name',
            unique_together=set([('name', 'device_variable_scope')]),
        ),
        migrations.AlterUniqueTogether(
            name='device_variable',
            unique_together=set([('name', 'device', 'device_variable_scope')]),
        ),
        migrations.AlterUniqueTogether(
            name='device',
            unique_together=set([('name', 'domain_tree_node')]),
        ),
        migrations.AlterUniqueTogether(
            name='csw_permission',
            unique_together=set([('content_type', 'codename')]),
        ),
        migrations.AlterUniqueTogether(
            name='config',
            unique_together=set([('name', 'config_catalog')]),
        ),
        migrations.AlterUniqueTogether(
            name='category',
            unique_together=set([('name', 'parent')]),
        ),
    ]
