
# -*- coding: utf-8 -*-
# Generated by Django 1.10.2 on 2016-10-17 12:41


import datetime
import json
import re
import uuid

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models
from django.db.models import Q
from django.utils.timezone import utc

from initat.tools import logging_tools


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# initat.cluster.backbone.migrations.0815_migrate_device_type_to_flags
# initat.cluster.backbone.migrations.0817_rewrite_curl
# initat.cluster.backbone.migrations.0820_data_migrate_kernel_images
# initat.cluster.backbone.migrations.0829_removed_ipmi_flag
# initat.cluster.backbone.migrations.0845_data_migration_kernel_name
# initat.cluster.backbone.migrations.0859_rmsjobvariable_rms_job_run
# initat.cluster.backbone.migrations.0862_to_new_device_log
# initat.cluster.backbone.migrations.0864_ensure_cluster_id
# initat.cluster.backbone.migrations.0872_auto_20151007_1050
# initat.cluster.backbone.migrations.0925_insert_asset_batch
# initat.cluster.backbone.migrations.0927_remove_old_run_stati
# initat.cluster.backbone.migrations.0957_create_devicevar_fields
# initat.cluster.backbone.migrations.0959_auto_20160714_0926


def remove_device_type(apps, schema_editor):
    device = apps.get_model("backbone", "device")
    for _dev in device.objects.all().select_related("device_type"):
        if _dev.device_type.identifier == "MD" and not _dev.is_meta_device:
            _dev.is_meta_device = True
            _dev.save()


def rewrite_curl(apps, schema_editor):
    device = apps.get_model("backbone", "device")
    for _dev in device.objects.all():
        if _dev.curl.lower().startswith("ipmi://") and not _dev.ipmi_capable:
            _dev.curl = ""
            _dev.ipmi_capable = True
            _dev.save()


def create_history_entry(obj, dbh, src):
    _dh = obj(
        device=dbh.device,
        device_boot_history=dbh,
        version=src.version,
        release=src.release,
    )
    return _dh


def migrate_kernel_image(apps, schema_editor):
    device = apps.get_model("backbone", "device")
    boot_history = apps.get_model("backbone", "DeviceBootHistory")
    kernel = apps.get_model("backbone", "kernel")
    kernel_hist = apps.get_model("backbone", "KernelDeviceHistory")
    image = apps.get_model("backbone", "image")
    image_hist = apps.get_model("backbone", "ImageDeviceHistory")
    VERS_RE = re.compile("^(?P<version>\d+)\.(?P<release>\d+)$")
    for _dev in device.objects.all():
        if _dev.act_kernel_id and _dev.act_image_id:
            # only handle cases where act_image and act_kernel are set
            dbh = boot_history.objects.create(device=_dev)
            _kh = create_history_entry(kernel_hist, dbh, _dev.act_kernel)
            _kh.kernel = _dev.act_kernel
            kvm = VERS_RE.match(_dev.kernelversion)
            if kvm:
                _kh.version = int(kvm.group("version"))
                _kh.release = int(kvm.group("release"))
            _kh.save()
            _ih = create_history_entry(image_hist, dbh, _dev.act_image)
            _ih.image = _dev.act_image
            ivm = VERS_RE.match(_dev.imageversion)
            if ivm:
                _ih.version = int(ivm.group("version"))
                _ih.release = int(ivm.group("release"))
            _ih.save()


def migrate_ipmi_flag(apps, schema_editor):
    device = apps.get_model("backbone", "device")
    comcap = apps.get_model("backbone", "ComCapability")
    try:
        _ipmi_com = comcap.objects.get(Q(matchcode="ipmi"))
    except:
        # creating missing comcap
        _ipmi_com = comcap(
            matchcode="ipmi",
            name="IPMI",
            info="Intelligent Platform Management Interface",
            port_spec="623/udp",
        )
        _ipmi_com.save()
    for _dev in device.objects.all():
        if _dev.ipmi_capable:
            _already_there = _dev.com_capability_list.filter(Q(matchcode="ipmi")).count()
            if not _already_there:
                _dev.com_capability_list.add(_ipmi_com)


def copy_kernel_name(apps, schema_editor):
    kernel = apps.get_model("backbone", "kernel")
    _names = set()
    for _kern in kernel.objects.all():
        if not _kern.display_name:
            new_name = _kern.name
            while True:
                if new_name in _names:
                    new_name = "{}X".format(new_name)
                else:
                    break
            _names.add(new_name)
            _kern.display_name = new_name
            _kern.save()


def link_job_vars(apps, schema_editor):
    from initat.cluster.backbone.models import RMSJobVariable
    unset_vars = RMSJobVariable.objects.filter(Q(rms_job_run=None))
    if unset_vars.count():
        print(("Migrating {:d} RMSJobVariables".format(unset_vars.count())))
        for unset_var in unset_vars:
            unset_var.rms_job_run = unset_var.rms_job.rms_job_run_set.all()[0]
            unset_var.save()


def to_new_log_format(apps, schema_editor):
    log_status = apps.get_model("backbone", "log_status")
    devicelog = apps.get_model("backbone", "devicelog")
    log_source = apps.get_model("backbone", "log_source")
    LogLevel = apps.get_model("backbone", "LogLevel")
    LogSource = apps.get_model("backbone", "LogSource")
    DeviceLogEntry = apps.get_model("backbone", "DeviceLogEntry")
    background_job_run = apps.get_model("backbone", "background_job_run")
    cur_c = DeviceLogEntry.objects.all().count()
    if not cur_c:
        print(("migrating to new logging scheme, logs to handle: {:d}".format(devicelog.objects.all().count())))
        # old to new log_source dict
        _ls_dict = {}
        for _ls in log_source.objects.all():
            _ls_dict[_ls.pk] = LogSource(
                identifier=_ls.identifier,
                description=_ls.description,
                device=_ls.device,
            )
            _ls_dict[_ls.pk].save()
        # create new LogLevels
        for _id, _level, _name in [
            ("c", logging_tools.LOG_LEVEL_CRITICAL, "critical"),
            ("e", logging_tools.LOG_LEVEL_ERROR, "error"),
            ("w", logging_tools.LOG_LEVEL_WARN, "warning"),
            ("o", logging_tools.LOG_LEVEL_OK, "ok"),
        ]:
            try:
                _lev = LogLevel.objects.get(Q(identifier=_id))
            except LogLevel.DoesNotExist:
                _lev = LogLevel(
                    identifier=_id,
                    level=_level,
                    name=_name,
                )
                _lev.save()
        # old to new log_status (Level) dict
        _ll_dict = {}
        for _ls in log_status.objects.all():
            _ll_dict[_ls.pk] = LogLevel.objects.get(
                Q(identifier={
                    "c": "c",
                    "w": "w",
                    "e": "e"
                }.get(_ls.identifier, "o"))
            )
        _user_ls = {}
        for _le in devicelog.objects.all().select_related("user", "device", "log_source"):
            _source = _ls_dict[_le.log_source_id]
            _new_le = DeviceLogEntry.objects.create(
                device=_le.device,
                source=_source,
                user=_le.user,
                level=_ll_dict[_le.log_status_id],
                text=_le.text,
            )
            # to preserve date
            _new_le.date = _le.date
            _new_le.save()
        # rewrite job runs
        _runs = background_job_run.objects.exclude(Q(log_source=None))
        print(("background_runs to migrate: {:d}".format(_runs.count())))
        for _run in _runs:
            if _run.log_source_id in _ls_dict:
                _run.source = _ls_dict[_run.log_source_id]
            _run.log_source = None
            _run.save()
    else:
        print("new logging_scheme already in use")


def ensure_cluster_id(apps, schema_editor):
    device = apps.get_model("backbone", "device")
    try:
        _cdd = device.objects.get(models.Q(device_group__cluster_device_group=True))
    except device.DoesNotExist:
        pass
    else:
        _cdd.save()


def db_limit_1():
    # return True if databases do not support some unique_together combinations
    return True if settings.DATABASES["default"]["ENGINE"].lower().count("oracle") else False


def add_graph_setting_size(apps, schema_editor):
    graph_setting_size = apps.get_model("backbone", "GraphSettingSize")
    graph_setting = apps.get_model("backbone", "GraphSetting")
    if graph_setting.objects.all().count():
        _default = graph_setting_size.objects.filter(models.Q(default=True))
        if len(_default):
            _default = _default[0]
        else:
            _default = graph_setting_size(
                name="normal",
                default=True,
                width=640,
                height=300,
            )
            _default.save()
        for _gs in graph_setting.objects.all():
            if not _gs.graph_setting_size_id:
                _gs.graph_setting_size = _default
                _gs.save()


def add_asset_batch_info(apps, schema_editor):
    def create_batch(rfb_list):
        if len(rfb_list):
            _valid = [entry for entry in rfb_list if entry.run_start_time and entry.run_end_time]
            _invalid = [entry for entry in rfb_list if not entry.run_start_time or not entry.run_end_time]
            if len(_valid):
                run_start_time = min([entry.run_start_time for entry in _valid])
                run_end_time = min([entry.run_end_time for entry in _valid])
                # _states = [entry.run_status for entry in _valid]
                new_batch = asset_batch(
                    device=_valid[0].device,
                    num_runs=len(_valid),
                    num_completed=len(_valid),
                    num_runs_ok=len(_valid),
                    num_runs_error=0,
                    run_time=int(abs((run_end_time - run_start_time).seconds)),
                    run_start_time=run_start_time,
                    run_end_time=run_end_time,
                )
                new_batch.save()
                for _idx, _run in enumerate(rfb_list):
                    _run.batch_index = _idx
                    _run.asset_batch = new_batch
                    _run.save()
            if len(_invalid):
                for _entry in _invalid:
                    # delete invalid runs
                    _entry.delete()

    # add asset batch info
    asset_batch = apps.get_model("backbone", "AssetBatch")
    asset_run = apps.get_model("backbone", "AssetRun")
    _batchless = asset_run.objects.filter(Q(asset_batch=None)).order_by("idx")
    # sort according to device
    _dev_dict = {}
    for _run in _batchless:
        _dev_dict.setdefault(_run.device_id, []).append(_run)
    for _dev_pk, _run_list in _dev_dict.items():
        _cur_time = None
        # list of runs for batch
        _rfb_list = []
        for _run in _run_list:
            if _run.run_start_time:
                if _cur_time and (_run.run_start_time - _cur_time).seconds < 1:
                    _rfb_list.append(_run)
                else:
                    create_batch(_rfb_list)
                    _cur_time = _run.run_start_time
                    _rfb_list = [_run]
            else:
                create_batch(_rfb_list)
                # delete illegal runs
                _run.delete()
                _rfb_list = []
        create_batch(_rfb_list)


def fix_run_status(apps, schema_editor):
    # fix run stati
    asset_run = apps.get_model("backbone", "AssetRun")
    for _run in asset_run.objects.all():
        _changed = False
        if _run.run_status > 3:
            _run.run_status = 3
            _run.run_result = 4
            _run.save()


def add_device_variable_uuids(apps, schema_editor):
    device_variable = apps.get_model("backbone", "device_variable")
    for entry in device_variable.objects.all():
        # create uuid (signals not working here)
        # entry.prefix = "normal"
        entry.uuid = str(uuid.uuid4())
        entry.save()


def add_device_variable_scopes(apps, schema_editor):
    device_variable_scope = apps.get_model("backbone", "device_variable_scope")
    device_variable_scope.objects.create(
        name="normal",
        prefix="",
    )
    # set device_variable_fixtures
    device_variable_scope.objects.create(
        name="inventory",
        prefix="__$$ICSW_INV$$__",
        forced_flags=json.dumps(
            {
                "local_copy_ok": False,
                "inherit": False,
            }
        )
    )


def remove_device_variable_scopes(apps, schema_editor):
    device_variable_scope = apps.get_model("backbone", "device_variable_scope")
    device_variable_scope.objects.all().delete()


def set_default_scopes(apps, schema_editor):
    device_variable = apps.get_model("backbone", "device_variable")
    device_variable_scope = apps.get_model("backbone", "device_variable_scope")
    _norm = device_variable_scope.objects.get(name="normal")
    for _dev in device_variable.objects.all():
        if not _dev.device_variable_scope_id:
            _dev.device_variable_scope = _norm
            _dev.save()


def set_default_variable_scope(apps, schema_editor):
    device_variable_scope = apps.get_model("backbone", "device_variable_scope")
    for _scope in device_variable_scope.objects.all():
        _scope.default_scope = False
        _scope.save()

    _normal = device_variable_scope.objects.get(name="normal")
    _normal.default_scope = True
    _normal.save()


def dummy_reverse(apps, schema_editor):
    pass


class Migration(migrations.Migration):
    replaces = [('backbone', '0810_reversion_20150414_0955'), ('backbone', '0811_add_ipmi_capable_flag_to_device'),
                ('backbone', '0812_add_power_control_field'), ('backbone', '0813_device_is_meta_device'),
                ('backbone', '0814_remove_old_image_and_kernel_fields'), ('backbone', '0815_migrate_device_type_to_flags'),
                ('backbone', '0816_remove_device_type'), ('backbone', '0817_rewrite_curl'), ('backbone', '0818_remove_device_curl'),
                ('backbone', '0819_add_device_image_history'), ('backbone', '0820_data_migrate_kernel_images'), ('backbone', '0821_remove_kernel_image_fields'),
                ('backbone', '0822_added_usefull_history_fields'), ('backbone', '0823_license'), ('backbone', '0824_kpi_20150526_1300'),
                ('backbone', '0825_removed_reqrecvstate_and_kpi'), ('backbone', '0826_added_capability'), ('backbone', '0827_auto_20150602_1011'),
                ('backbone', '0828_added_com_capabilities'), ('backbone', '0829_removed_ipmi_flag'), ('backbone', '0830_add_need_hexid_field'),
                ('backbone', '0831_add_mvvalue_entry_name'), ('backbone', '0832_sensoraction_sensorthreshold'), ('backbone', '0833_added_sensoraction_fields'),
                ('backbone', '0834_auto_20150621_1232'), ('backbone', '0835_added_wmi_and_discovery_dispatch_models'), ('backbone', '0836_deviceselection'),
                ('backbone', '0837_added_device_selection_to_sensorthreshold'), ('backbone', '0838_update_threshold_fields'),
                ('backbone', '0839_mvvalueentry_rra_idx'), ('backbone', '0840_sensorthresholdaction'), ('backbone', '0841_added_enabled_fields'),
                ('backbone', '0842_sensorthreshold_create_user'), ('backbone', '0843_sensorthresholdaction_create_user'),
                ('backbone', '0844_alter_kernel_model'), ('backbone', '0845_data_migration_kernel_name'), ('backbone', '0846_auto_20150714_1650'),
                ('backbone', '0847_increase_netdevice_speed_limit'), ('backbone', '0848_sensorthresholdaction_triggered'),
                ('backbone', '0849_auto_20150722_1216'), ('backbone', '0850_background_job_options'), ('backbone', '0851_verbose_names_for_setup_models'),
                ('backbone', '0852_log_times_unique_constraint'), ('backbone', '0853_auto_20150816_2043'), ('backbone', '0854_populateramdiskdcmdline'),
                ('backbone', '0855_auto_20150830_0849'), ('backbone', '0856_auto_20150919_0919'),
                ('backbone', '0857_rmsjobvariableaction_rmsjobvariableactionrun'), ('backbone', '0858_rmsjobvariable_unit'),
                ('backbone', '0859_rmsjobvariable_rms_job_run'), ('backbone', '0861_userlogentry'), ('backbone', '0862_to_new_device_log'),
                ('backbone', '0863_remove_log_source'), ('backbone', '0864_ensure_cluster_id'), ('backbone', '0865_network_device_type_auto_created'),
                ('backbone', '0866_auto_20151002_1049'), ('backbone', '0867_network_preferred_domain_tree_node'), ('backbone', '0868_graphsetting'),
                ('backbone', '0869_auto_20151006_1345'), ('backbone', '0870_auto_20151006_1357'), ('backbone', '0871_auto_20151006_1428'),
                ('backbone', '0872_auto_20151007_1050'), ('backbone', '0873_auto_20151007_1507'), ('backbone', '0874_auto_20151007_1524'),
                ('backbone', '0875_auto_20151009_0807'), ('backbone', '0876_graphtimeframe'), ('backbone', '0877_auto_20151016_1007'),
                ('backbone', '0878_auto_20151102_1938'), ('backbone', '0879_auto_20151114_0232'), ('backbone', '0880_auto_20151115_0252'),
                ('backbone', '0881_auto_20151122_1319'), ('backbone', '0882_deviceinventory'), ('backbone', '0883_auto_20151124_1447'),
                ('backbone', '0884_auto_20151128_1706'), ('backbone', '0885_auto_20151128_1707'), ('backbone', '0886_icswversion_insert_idx'),
                ('backbone', '0887_auto_20151201_1658'), ('backbone', '0888_auto_20151202_2227'), ('backbone', '0889_mon_check_command_special_group'),
                ('backbone', '0890_auto_20151213_0819'), ('backbone', '0891_syslogcheck'), ('backbone', '0892_auto_20151213_2217'),
                ('backbone', '0893_syslogcheck_version'), ('backbone', '0894_auto_20151215_1002'), ('backbone', '0895_netdevice_desired_status'),
                ('backbone', '0896_netdevice_ignore_netdevice_speed'), ('backbone', '0897_auto_20160105_1407'), ('backbone', '0898_auto_20160107_1420'),
                ('backbone', '0899_auto_20160325_1240'), ('backbone', '0900_auto_20160421_1456'), ('backbone', '0901_auto_20160422_0854'),
                ('backbone', '0902_auto_20160422_0958'), ('backbone', '0903_auto_20160425_0914'), ('backbone', '0904_auto_20160425_0950'),
                ('backbone', '0905_auto_20160426_1454'), ('backbone', '0906_auto_20160426_1459'), ('backbone', '0907_assetrun_scan_type'),
                ('backbone', '0908_auto_20160427_1320'), ('backbone', '0909_auto_20160428_1259'), ('backbone', '0910_auto_20160503_1237'),
                ('backbone', '0911_auto_20160504_1131'), ('backbone', '0900_auto_20160504_1141'), ('backbone', '0912_merge'),
                ('backbone', '0913_auto_20160504_1216'), ('backbone', '0912_devicedispatcherlink'), ('backbone', '0914_merge'),
                ('backbone', '0915_scheduleitem'), ('backbone', '0916_scheduleitem_run_now'), ('backbone', '0917_auto_20160510_1059'),
                ('backbone', '0918_remove_assetpackageversion_name'), ('backbone', '0919_auto_20160510_1153'),
                ('backbone', '0920_scheduleitem_dispatch_setting'), ('backbone', '0921_assetpackage_package_type'), ('backbone', '0922_auto_20160517_1636'),
                ('backbone', '0923_assetrun_run_duration'), ('backbone', '0924_auto_20160521_1652'), ('backbone', '0925_insert_asset_batch'),
                ('backbone', '0926_auto_20160521_1814'), ('backbone', '0927_remove_old_run_stati'), ('backbone', '0928_assetpackageversion_info'),
                ('backbone', '0929_auto_20160523_0720'), ('backbone', '0930_assetrun_created'), ('backbone', '0931_assetbatch_created'),
                ('backbone', '0932_auto_20160523_1107'), ('backbone', '0933_auto_20160523_1223'), ('backbone', '0934_assetprocessentry'),
                ('backbone', '0935_auto_20160523_1931'), ('backbone', '0936_auto_20160523_2111'), ('backbone', '0937_staticassettemplate_description'),
                ('backbone', '0938_staticassettemplate_parent_template'), ('backbone', '0939_assetlicenseentry_assetupdateentry'),
                ('backbone', '0940_assetrun_error_string'), ('backbone', '0941_assetupdateentry_new_version'),
                ('backbone', '0942_assetrun_interpret_error_string'), ('backbone', '0943_auto_20160526_0820'), ('backbone', '0944_auto_20160526_0841'),
                ('backbone', '0945_csw_permission_created'), ('backbone', '0946_auto_20160529_1151'), ('backbone', '0947_auto_20160529_1321'),
                ('backbone', '0948_auto_20160603_1224'), ('backbone', '0949_auto_20160606_0922'), ('backbone', '0950_auto_20160606_0944'),
                ('backbone', '0951_auto_20160607_1355'), ('backbone', '0952_assetrun_generate_duration'), ('backbone', '0953_devicescanlock'),
                ('backbone', '0954_devicescanlock_run_time'), ('backbone', '0955_remove_device_active_scan'), ('backbone', '0956_device_variable_uuid'),
                ('backbone', '0957_create_devicevar_fields'), ('backbone', '0958_auto_20160714_0714'), ('backbone', '0959_auto_20160714_0926'),
                ('backbone', '0956_user_ui_theme_selection'), ('backbone', '0960_merge'), ('backbone', '0961_auto_20160714_1638'),
                ('backbone', '0962_auto_20160718_0739'), ('backbone', '0963_auto_20160718_1602'), ('backbone', '0964_dvs_allowed_names_group'),
                ('backbone', '0965_auto_20160720_0812')]

    dependencies = [
        ('backbone', '0801_merge'),
        ('contenttypes', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='icsw_deletion_record',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('object_id_int', models.IntegerField()),
                ('serialized_data', models.TextField()),
                ('object_repr', models.TextField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AlterModelOptions(
            name='category',
            options={'verbose_name': 'Category'},
        ),
        migrations.AlterModelOptions(
            name='config',
            options={'ordering': ['name', 'config_catalog__name'], 'verbose_name': 'Configuration'},
        ),
        migrations.AlterModelOptions(
            name='config_blob',
            options={'verbose_name': 'Configuration variable (blob)'},
        ),
        migrations.AlterModelOptions(
            name='config_bool',
            options={'verbose_name': 'Configuration variable (boolean)'},
        ),
        migrations.AlterModelOptions(
            name='config_catalog',
            options={'verbose_name': 'Configuration catalog'},
        ),
        migrations.AlterModelOptions(
            name='config_int',
            options={'verbose_name': 'Configuration variable (integer)'},
        ),
        migrations.AlterModelOptions(
            name='config_script',
            options={'ordering': ('priority', 'name'), 'verbose_name': 'Configuration script'},
        ),
        migrations.AlterModelOptions(
            name='config_str',
            options={'ordering': ('name',), 'verbose_name': 'Configuration variable (string)'},
        ),
        migrations.AlterModelOptions(
            name='csw_object_permission',
            options={'verbose_name': 'Object permission'},
        ),
        migrations.AlterModelOptions(
            name='csw_permission',
            options={'ordering': ('content_type__app_label', 'content_type__name', 'name'), 'verbose_name': 'Global permission'},
        ),
        migrations.AlterModelOptions(
            name='device',
            options={'ordering': ('name',), 'verbose_name': 'Device'},
        ),
        migrations.AlterModelOptions(
            name='device_config',
            options={'verbose_name': 'Device configuration'},
        ),
        migrations.AlterModelOptions(
            name='device_group',
            options={'ordering': ('-cluster_device_group', 'name'), 'verbose_name': 'Device group'},
        ),
        migrations.AlterModelOptions(
            name='device_variable',
            options={'ordering': ('name',), 'verbose_name': 'Device variable'},
        ),
        migrations.AlterModelOptions(
            name='group',
            options={'ordering': ('groupname',), 'verbose_name': 'Group'},
        ),
        migrations.AlterModelOptions(
            name='mon_check_command',
            options={'verbose_name': 'Check command'},
        ),
        migrations.AlterModelOptions(
            name='mon_check_command_special',
            options={'verbose_name': 'Special check command'},
        ),
        migrations.AlterModelOptions(
            name='net_ip',
            options={'verbose_name': 'IP address'},
        ),
        migrations.AlterModelOptions(
            name='netdevice',
            options={'ordering': ('snmp_idx', 'devname'), 'verbose_name': 'Netdevice'},
        ),
        migrations.AlterModelOptions(
            name='peer_information',
            options={'verbose_name': 'Peer information'},
        ),
        migrations.AlterModelOptions(
            name='user',
            options={'ordering': ('login', 'group__groupname'), 'verbose_name': 'User'},
        ),
        migrations.AlterModelOptions(
            name='user_object_permission',
            options={'verbose_name': 'Object permissions of users'},
        ),
        migrations.AlterModelOptions(
            name='user_permission',
            options={'verbose_name': 'Global permissions of users'},
        ),
        migrations.AddField(
            model_name='device',
            name='ipmi_capable',
            field=models.BooleanField(default=False, verbose_name=b'IPMI cabaple'),
        ),
        migrations.AddField(
            model_name='snmp_scheme',
            name='power_control',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='device',
            name='curl',
            field=models.CharField(default=b'ssh://', max_length=512),
        ),
        migrations.AddField(
            model_name='device',
            name='is_meta_device',
            field=models.BooleanField(default=False),
        ),
        migrations.RemoveField(
            model_name='device',
            name='actimage',
        ),
        migrations.RemoveField(
            model_name='device',
            name='actkernel',
        ),
        migrations.RemoveField(
            model_name='device',
            name='newimage',
        ),
        migrations.RemoveField(
            model_name='device',
            name='newkernel',
        ),
        migrations.AlterField(
            model_name='config_script',
            name='description',
            field=models.CharField(blank=True, db_column=b'descr', max_length=765),
        ),
        migrations.RunPython(
            code=remove_device_type,
        ),
        migrations.RemoveField(
            model_name='device',
            name='device_type',
        ),
        migrations.DeleteModel(
            name='device_type',
        ),
        migrations.RunPython(
            code=rewrite_curl,
        ),
        migrations.RemoveField(
            model_name='device',
            name='curl',
        ),
        migrations.CreateModel(
            name='DeviceBootHistory',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
            ],
        ),
        migrations.CreateModel(
            name='ImageDeviceHistory',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('version', models.IntegerField(blank=True, default=1, null=True)),
                ('release', models.IntegerField(blank=True, default=1, null=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('device_boot_history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.DeviceBootHistory')),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.image')),
            ],
        ),
        migrations.CreateModel(
            name='KernelDeviceHistory',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('version', models.IntegerField(blank=True, default=1, null=True)),
                ('release', models.IntegerField(blank=True, default=1, null=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('device_boot_history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.DeviceBootHistory')),
                ('kernel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.kernel')),
            ],
        ),
        migrations.AlterField(
            model_name='device',
            name='imageversion',
            field=models.CharField(blank=True, default=b'', max_length=192),
        ),
        migrations.AlterField(
            model_name='device',
            name='kernelversion',
            field=models.CharField(blank=True, default=b'', max_length=192),
        ),
        migrations.RunPython(
            code=migrate_kernel_image,
            reverse_code=dummy_reverse,
        ),
        migrations.RemoveField(
            model_name='device',
            name='act_image',
        ),
        migrations.RemoveField(
            model_name='device',
            name='act_kernel',
        ),
        migrations.RemoveField(
            model_name='device',
            name='act_kernel_build',
        ),
        migrations.RemoveField(
            model_name='device',
            name='imageversion',
        ),
        migrations.RemoveField(
            model_name='device',
            name='kernelversion',
        ),
        migrations.AlterModelOptions(
            name='imagedevicehistory',
            options={'ordering': ('-pk',)},
        ),
        migrations.AlterModelOptions(
            name='kerneldevicehistory',
            options={'ordering': ('-pk',)},
        ),
        migrations.AddField(
            model_name='imagedevicehistory',
            name='end',
            field=models.DateTimeField(default=None, null=True),
        ),
        migrations.AddField(
            model_name='imagedevicehistory',
            name='start',
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AddField(
            model_name='imagedevicehistory',
            name='success',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='kerneldevicehistory',
            name='end',
            field=models.DateTimeField(default=None, null=True),
        ),
        migrations.AddField(
            model_name='kerneldevicehistory',
            name='start',
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AddField(
            model_name='kerneldevicehistory',
            name='success',
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name='LicenseLockListDeviceService',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('license', models.CharField(db_index=True, max_length=30)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_check_command')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LicenseLockListExtLicense',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('license', models.CharField(db_index=True, max_length=30)),
                ('ext_license', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.ext_license')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LicenseLockListUser',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('license', models.CharField(db_index=True, max_length=30)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LicenseUsageDeviceService',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('license', models.CharField(db_index=True, max_length=30)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_check_command')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LicenseUsageExtLicense',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('license', models.CharField(db_index=True, max_length=30)),
                ('ext_license', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.ext_license')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LicenseUsageUser',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('license', models.CharField(db_index=True, max_length=30)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LicenseViolation',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('license', models.CharField(db_index=True, max_length=30)),
                ('hard', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.DeleteModel(
            name='cluster_license',
        ),
        migrations.AlterModelOptions(
            name='license',
            options={'verbose_name': 'License'},
        ),
        migrations.AddField(
            model_name='license',
            name='date',
            field=models.DateTimeField(auto_now_add=True, default=datetime.datetime(2015, 5, 12, 14, 9, 41, 272359, tzinfo=utc)),
            preserve_default=False,
        ),
        migrations.CreateModel(
            name='KpiDataSourceTuple',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('device_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='device_category', to='backbone.category')),
                ('kpi', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.Kpi')),
                ('monitoring_category',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='monitoring_category', to='backbone.category')),
            ],
            options={
                'verbose_name': 'KPI data sources',
            },
        ),
        migrations.CreateModel(
            name='KpiStoredResult',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField()),
                ('result', models.TextField(null=True)),
                ('kpi', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='backbone.Kpi')),
            ],
        ),
        migrations.CreateModel(
            name='mon_icinga_log_raw_host_downtime_data',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(db_index=True)),
                ('device_independent', models.BooleanField(db_index=True, default=False)),
                ('msg', models.TextField()),
                ('downtime_state', models.CharField(choices=[(b'START', b'START'), (b'STOP', b'STOP')], max_length=5)),
                ('device', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('logfile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_icinga_log_file')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='mon_icinga_log_raw_service_downtime_data',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(db_index=True)),
                ('device_independent', models.BooleanField(db_index=True, default=False)),
                ('msg', models.TextField()),
                ('service_info', models.TextField(blank=True, null=True)),
                ('downtime_state', models.CharField(choices=[(b'START', b'START'), (b'STOP', b'STOP')], max_length=5)),
                ('device', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('logfile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_icinga_log_file')),
                ('service', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.mon_check_command')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RemoveField(
            model_name='kpi_selected_device_monitoring_category_tuple',
            name='device_category',
        ),
        migrations.RemoveField(
            model_name='kpi_selected_device_monitoring_category_tuple',
            name='kpi',
        ),
        migrations.RemoveField(
            model_name='kpi_selected_device_monitoring_category_tuple',
            name='monitoring_category',
        ),
        migrations.DeleteModel(
            name='kpi_selected_device_monitoring_category_tuple',
        ),
        migrations.AlterModelOptions(
            name='kpi',
            options={'ordering': ('idx',), 'verbose_name': 'KPI'},
        ),
        migrations.RemoveField(
            model_name='kpi',
            name='available_device_categories',
        ),
        migrations.RemoveField(
            model_name='kpi',
            name='available_monitoring_categories',
        ),
        migrations.AddField(
            model_name='kpi',
            name='date',
            field=models.DateTimeField(auto_now_add=True),
        ),
        migrations.AddField(
            model_name='kpi',
            name='enabled',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='kpi',
            name='formula',
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name='kpi',
            name='gui_selected_categories',
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name='kpi',
            name='time_range',
            field=models.TextField(blank=True, default=b'none'),
        ),
        migrations.AddField(
            model_name='kpi',
            name='time_range_parameter',
            field=models.IntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='mon_icinga_log_aggregated_host_data',
            name='state',
            field=models.CharField(
                choices=[(b'UP', b'UP'), (b'D', b'DOWN'), (b'UR', b'UNREACHABLE'), (b'U', b'UNKNOWN'), (b'PD', b'PLANNED DOWN'), (b'UD', b'UNDETERMINED'),
                         (b'FL', b'FLAPPING')], max_length=2),
        ),
        migrations.AlterField(
            model_name='mon_icinga_log_aggregated_host_data',
            name='state_type',
            field=models.CharField(choices=[(b'H', b'HARD'), (b'S', b'SOFT'), (b'UD', b'UD'), (b'PD', b'PLANNED DOWN'), (b'FL', b'FL')], max_length=2),
        ),
        migrations.AlterField(
            model_name='mon_icinga_log_aggregated_service_data',
            name='state',
            field=models.CharField(
                choices=[(b'O', b'OK'), (b'W', b'WARNING'), (b'U', b'UNKNOWN'), (b'C', b'CRITICAL'), (b'UD', b'UNDETERMINED'), (b'PD', b'PLANNED DOWN'),
                         (b'FL', b'FLAPPING')], max_length=2),
        ),
        migrations.AlterField(
            model_name='mon_icinga_log_aggregated_service_data',
            name='state_type',
            field=models.CharField(choices=[(b'H', b'HARD'), (b'S', b'SOFT'), (b'UD', b'UD'), (b'PD', b'PLANNED DOWN'), (b'FL', b'FL')], max_length=2),
        ),
        migrations.AlterField(
            model_name='mon_icinga_log_raw_host_alert_data',
            name='state',
            field=models.CharField(
                choices=[(b'UP', b'UP'), (b'D', b'DOWN'), (b'UR', b'UNREACHABLE'), (b'U', b'UNKNOWN'), (b'PD', b'PLANNED DOWN'), (b'UD', b'UNDETERMINED')],
                max_length=2),
        ),
        migrations.AlterField(
            model_name='mon_icinga_log_raw_host_alert_data',
            name='state_type',
            field=models.CharField(choices=[(b'H', b'HARD'), (b'S', b'SOFT'), (b'UD', b'UD'), (b'PD', b'PLANNED DOWN')], max_length=2),
        ),
        migrations.AlterField(
            model_name='mon_icinga_log_raw_host_notification_data',
            name='state',
            field=models.CharField(
                choices=[(b'UP', b'UP'), (b'D', b'DOWN'), (b'UR', b'UNREACHABLE'), (b'U', b'UNKNOWN'), (b'PD', b'PLANNED DOWN'), (b'UD', b'UNDETERMINED')],
                max_length=2),
        ),
        migrations.AlterField(
            model_name='mon_icinga_log_raw_service_alert_data',
            name='state',
            field=models.CharField(
                choices=[(b'O', b'OK'), (b'W', b'WARNING'), (b'U', b'UNKNOWN'), (b'C', b'CRITICAL'), (b'UD', b'UNDETERMINED'), (b'PD', b'PLANNED DOWN')],
                max_length=2),
        ),
        migrations.AlterField(
            model_name='mon_icinga_log_raw_service_alert_data',
            name='state_type',
            field=models.CharField(choices=[(b'H', b'HARD'), (b'S', b'SOFT'), (b'UD', b'UD'), (b'PD', b'PLANNED DOWN')], max_length=2),
        ),
        migrations.AlterField(
            model_name='mon_icinga_log_raw_service_notification_data',
            name='state',
            field=models.CharField(
                choices=[(b'O', b'OK'), (b'W', b'WARNING'), (b'U', b'UNKNOWN'), (b'C', b'CRITICAL'), (b'UD', b'UNDETERMINED'), (b'PD', b'PLANNED DOWN')],
                max_length=2),
        ),
        migrations.AlterModelOptions(
            name='csw_permission',
            options={'ordering': ('content_type__app_label', 'content_type__model', 'name'), 'verbose_name': 'Global permission'},
        ),
        migrations.RemoveField(
            model_name='device',
            name='recvstate',
        ),
        migrations.RemoveField(
            model_name='device',
            name='recvstate_timestamp',
        ),
        migrations.RemoveField(
            model_name='device',
            name='reqstate',
        ),
        migrations.RemoveField(
            model_name='device',
            name='reqstate_timestamp',
        ),
        migrations.RemoveField(
            model_name='device',
            name='uptime',
        ),
        migrations.RemoveField(
            model_name='device',
            name='uptime_timestamp',
        ),
        migrations.AddField(
            model_name='kpi',
            name='soft_states_as_hard_states',
            field=models.BooleanField(default=True),
        ),
        migrations.CreateModel(
            name='ComCapability',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('matchcode', models.CharField(max_length=16, unique=True)),
                ('name', models.CharField(max_length=16, unique=True)),
                ('info', models.CharField(max_length=64)),
                ('port_spec', models.CharField(default=b'', max_length=256)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.AddField(
            model_name='device',
            name='com_capability_list',
            field=models.ManyToManyField(to='backbone.ComCapability'),
        ),
        migrations.RunPython(
            code=migrate_ipmi_flag,
            reverse_code=dummy_reverse,
        ),
        migrations.RemoveField(
            model_name='device',
            name='ipmi_capable',
        ),
        migrations.AlterField(
            model_name='device',
            name='active_scan',
            field=models.CharField(blank=True, default=b'', max_length=16),
        ),
        migrations.AlterField(
            model_name='kpidatasourcetuple',
            name='kpi',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.Kpi'),
        ),
        migrations.AlterField(
            model_name='kpistoredresult',
            name='kpi',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='backbone.Kpi'),
        ),
        migrations.AddField(
            model_name='partition_fs',
            name='need_hexid',
            field=models.BooleanField(default=True),
        ),
        migrations.AlterField(
            model_name='kpidatasourcetuple',
            name='kpi',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.Kpi'),
        ),
        migrations.AlterField(
            model_name='kpistoredresult',
            name='kpi',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='backbone.Kpi'),
        ),
        migrations.AddField(
            model_name='mvvalueentry',
            name='name',
            field=models.CharField(default=b'', max_length=64),
        ),
        migrations.AlterField(
            model_name='kpidatasourcetuple',
            name='kpi',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.Kpi'),
        ),
        migrations.AlterField(
            model_name='kpistoredresult',
            name='kpi',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='backbone.Kpi'),
        ),
        migrations.CreateModel(
            name='SensorAction',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64, unique=True)),
                ('description', models.CharField(default=b'', max_length=256)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.AddField(
            model_name='sensoraction',
            name='action',
            field=models.CharField(
                choices=[(b'none', b'do nothing'), (b'reboot', b'restart device'), (b'halt', b'halt device'), (b'poweron', b'turn on device')], default=b'none',
                max_length=64),
        ),
        migrations.AddField(
            model_name='sensoraction',
            name='hard_control',
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name='SensorThreshold',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default=b'', max_length=64)),
                ('value', models.FloatField(default=0.0)),
                ('hysteresis', models.FloatField(default=0.0)),
                ('limit_class', models.CharField(choices=[(b'u', b'upper'), (b'l', b'lower')], max_length=2)),
                ('date', models.DateTimeField(auto_now_add=True)),
                # ('sensor_action', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.SensorAction')),
                ('mv_value_entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.MVValueEntry')),
                ('notify_users', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DispatchSetting',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('source', models.IntegerField(choices=[(1, b'SNMP'), (2, b'ASU'), (3, b'IPMI')])),
                ('duration_amount', models.IntegerField(default=1)),
                ('duration_unit', models.IntegerField(choices=[(1, b'months'), (2, b'weeks'), (3, b'days'), (4, b'hours'), (5, b'minutes')])),
                ('run_now', models.BooleanField(default=False)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
            ],
        ),
        migrations.CreateModel(
            name='ScanHistory',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('source', models.IntegerField(choices=[(1, b'SNMP'), (2, b'ASU'), (3, b'IPMI')])),
                ('duration', models.IntegerField()),
                ('success', models.BooleanField(default=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
            ],
        ),
        migrations.AddField(
            model_name='netdevice',
            name='wmi_interface_index',
            field=models.IntegerField(blank=True, default=None, null=True),
        ),
        migrations.CreateModel(
            name='DeviceSelection',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default=b'', max_length=64)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('categories', models.ManyToManyField(to='backbone.category')),
                ('device_groups', models.ManyToManyField(to='backbone.device_group')),
                ('devices', models.ManyToManyField(to='backbone.device')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AlterModelOptions(
            name='deviceselection',
            options={'ordering': ('-date',)},
        ),
        migrations.AddField(
            model_name='sensorthreshold',
            name='device_selection',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.DeviceSelection'),
        ),
        migrations.RenameField(
            model_name='sensorthreshold',
            old_name='hysteresis',
            new_name='lower_value',
        ),
        migrations.RenameField(
            model_name='sensorthreshold',
            old_name='value',
            new_name='upper_value',
        ),
        migrations.RemoveField(
            model_name='sensorthreshold',
            name='limit_class',
        ),
        migrations.AddField(
            model_name='sensorthreshold',
            name='lower_mail',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='sensorthreshold',
            name='lower_sensor_action',
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lower_sensor_action',
                to='backbone.SensorAction'
            ),
        ),
        migrations.AddField(
            model_name='sensorthreshold',
            name='upper_mail',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='sensorthreshold',
            name='upper_sensor_action',
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='upper_sensor_action',
                to='backbone.SensorAction'
            ),
        ),
        migrations.AddField(
            model_name='mvvalueentry',
            name='rra_idx',
            field=models.IntegerField(default=0),
        ),
        migrations.CreateModel(
            name='SensorThresholdAction',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('action_type', models.CharField(choices=[(b'lower', b'lower'), (b'upper', b'upper')], max_length=12)),
                ('mail', models.BooleanField(default=False)),
                ('value', models.FloatField(default=0.0)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device_selection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.DeviceSelection')),
                ('notify_users', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
                ('sensor_action', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.SensorAction')),
                ('sensor_threshold', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.SensorThreshold')),
                (
                    'create_user',
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sensor_threshold_action_create_user',
                        to=settings.AUTH_USER_MODEL
                    )
                ),
            ],
        ),
        migrations.AddField(
            model_name='sensorthreshold',
            name='lower_enabled',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='sensorthreshold',
            name='upper_enabled',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='sensorthreshold',
            name='create_user',
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sensor_threshold_create_user',
                to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name='kernel',
            name='display_name',
            field=models.CharField(default=b'', max_length=128),
        ),
        migrations.AlterField(
            model_name='kernel',
            name='name',
            field=models.CharField(default=b'', max_length=384),
        ),
        migrations.RunPython(
            code=copy_kernel_name,
            reverse_code=dummy_reverse,
        ),
        migrations.AlterModelOptions(
            name='csw_permission',
            options={'ordering': ('content_type__app_label', 'name'), 'verbose_name': 'Global permission'},
        ),
        migrations.RemoveField(
            model_name='config',
            name='parent_config',
        ),
        migrations.AddField(
            model_name='config_catalog',
            name='system_catalog',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='device',
            name='enable_perfdata',
            field=models.BooleanField(default=True, verbose_name=b'enable perfdata, check IPMI, SNMP and WMI'),
        ),
        migrations.AlterField(
            model_name='netdevice',
            name='speed',
            field=models.BigIntegerField(blank=True, default=0, null=True),
        ),
        migrations.AddField(
            model_name='sensorthresholdaction',
            name='triggered',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='background_job',
            name='num_objects',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='background_job',
            name='result',
            field=models.IntegerField(default=4),
        ),
        migrations.AddField(
            model_name='background_job',
            name='options',
            field=models.CharField(default=b'', max_length=256),
        ),
        migrations.AlterModelOptions(
            name='architecture',
            options={'verbose_name': 'Architecture'},
        ),
        migrations.AlterModelOptions(
            name='image',
            options={'ordering': ('name',), 'verbose_name': 'Image'},
        ),
        migrations.AlterModelOptions(
            name='kernel',
            options={'ordering': ('display_name', 'pk'), 'verbose_name': 'Kernel'},
        ),
        migrations.AlterModelOptions(
            name='lvm_lv',
            options={'ordering': ('name',), 'verbose_name': 'Partition: LVM Logical Volume'},
        ),
        migrations.AlterModelOptions(
            name='lvm_vg',
            options={'ordering': ('name',), 'verbose_name': 'Partition: LVM Volume Group'},
        ),
        migrations.AlterModelOptions(
            name='partition',
            options={'ordering': ('pnum',), 'verbose_name': 'Partition'},
        ),
        migrations.AlterModelOptions(
            name='partition_disc',
            options={'ordering': ('priority', 'disc'), 'verbose_name': 'Partition: Disc'},
        ),
        migrations.AlterModelOptions(
            name='partition_fs',
            options={'ordering': ('name',), 'verbose_name': 'Partition: File System'},
        ),
        migrations.AlterModelOptions(
            name='partition_table',
            options={'verbose_name': 'Partition: Table'},
        ),
        migrations.AlterModelOptions(
            name='sys_partition',
            options={'verbose_name': 'Partition: System Partition'},
        ),
        migrations.AlterField(
            model_name='mon_icinga_log_full_system_dump',
            name='date',
            field=models.DateTimeField(db_index=True, unique=True),
        ),
        migrations.AddField(
            model_name='package_repo',
            name='password',
            field=models.CharField(default=b'', max_length=128),
        ),
        migrations.AddField(
            model_name='package_repo',
            name='username',
            field=models.CharField(default=b'', max_length=128),
        ),
        migrations.CreateModel(
            name='PopulateRamdiskCmdLine',
            fields=[
                ('idx', models.AutoField(db_column=b'kernel_log_idx', primary_key=True, serialize=False)),
                ('user', models.CharField(default=b'', max_length=256)),
                ('machine', models.CharField(default=b'', max_length=256)),
                ('cmdline', models.CharField(max_length=1024)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('kernel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.kernel')),
            ],
        ),
        migrations.CreateModel(
            name='RMSJobVariable',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default=b'', max_length=255)),
                ('raw_value', models.TextField(default=b'')),
                ('parsed_type', models.CharField(choices=[(b'i', b'Integer'), (b'f', b'Float'), (b's', b'String')], default=b's', max_length=2)),
                ('parsed_integer', models.IntegerField(default=None, null=True)),
                ('parsed_float', models.FloatField(default=None, null=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('rms_job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.rms_job')),
                ('unit', models.CharField(default=b'', max_length=16)),
                ('rms_job_run', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.rms_job_run')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='rmsjobvariable',
            unique_together=set([('name', 'rms_job')]),
        ),
        migrations.CreateModel(
            name='RMSJobVariableAction',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default=b'', max_length=255, unique=True)),
                ('code', models.TextField(default=b'')),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='RMSJobVariableActionRun',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('run_time', models.FloatField(default=0.0)),
                ('success', models.BooleanField(default=False)),
                ('vars_created', models.IntegerField(default=0)),
                ('triggered_run', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('rms_job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.rms_job')),
                ('rms_job_variable_action_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.RMSJobVariableAction')),
            ],
        ),
        migrations.RunPython(
            code=link_job_vars,
        ),
        migrations.CreateModel(
            name='UserLogEntry',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('sent_via_digest', models.BooleanField(default=False)),
                ('viewed_via_webfrontend', models.BooleanField(default=False)),
                ('text', models.CharField(default=b'', max_length=765)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('devices', models.ManyToManyField(to='backbone.device')),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.LogLevel')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.LogSource')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.RunPython(
            code=to_new_log_format,
            reverse_code=dummy_reverse,
        ),
        migrations.RemoveField(
            model_name='devicelog',
            name='device',
        ),
        migrations.RemoveField(
            model_name='devicelog',
            name='log_source',
        ),
        migrations.RemoveField(
            model_name='devicelog',
            name='log_status',
        ),
        migrations.RemoveField(
            model_name='devicelog',
            name='user',
        ),
        migrations.RemoveField(
            model_name='log_source',
            name='device',
        ),
        migrations.RemoveField(
            model_name='background_job_run',
            name='log_source',
        ),
        migrations.RemoveField(
            model_name='macbootlog',
            name='log_source',
        ),
        migrations.DeleteModel(
            name='devicelog',
        ),
        migrations.DeleteModel(
            name='log_source',
        ),
        migrations.RunPython(
            code=ensure_cluster_id,
            reverse_code=dummy_reverse,
        ),
        migrations.AddField(
            model_name='network_device_type',
            name='auto_created',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='netdevice',
            name='bond_master',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bond_slaves', to='backbone.netdevice'),
        ),
        migrations.AddField(
            model_name='netdevice',
            name='is_bond',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='network',
            name='preferred_domain_tree_node',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.domain_tree_node'),
        ),
        migrations.CreateModel(
            name='GraphSettingSize',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default=b'', max_length=64, unique=True)),
                ('default', models.BooleanField(default=False)),
                ('width', models.IntegerField(default=0)),
                ('height', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='GraphSetting',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('hide_empty', models.BooleanField(default=True)),
                ('include_zero', models.BooleanField(default=True)),
                ('scale_mode', models.CharField(choices=[(b'l', b'level'), (b'n', b'none'), (b't', b'to100')], default=b'l', max_length=4)),
                ('legend_mode', models.CharField(choices=[(b'f', b'full with values'), (b'n', b'nothing'), (b't', b'only text')], default=b'f', max_length=4)),
                ('merge_devices', models.BooleanField(default=False)),
                ('merge_graphs', models.BooleanField(default=False)),
                ('merge_controlling_devices', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('name', models.CharField(default=b'', max_length=128)),
                ('graph_setting_size', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.GraphSettingSize')),
            ],
        ),
        migrations.AlterField(
            model_name='user_scan_result',
            name='full_name',
            field=models.TextField(default=b''),
        ),
        migrations.AlterField(
            model_name='category',
            name='full_name',
            field=models.TextField(blank=True, default=b''),
        ),
        migrations.AlterField(
            model_name='device_mon_location',
            name='comment',
            field=models.TextField(blank=True, default=b''),
        ),
        migrations.AlterField(
            model_name='location_gfx',
            name='comment',
            field=models.TextField(blank=True, default=b''),
        ),
        migrations.AlterField(
            model_name='mon_notification',
            name='content',
            field=models.TextField(default=b''),
        ),
        migrations.AlterField(
            model_name='populateramdiskcmdline',
            name='cmdline',
            field=models.TextField(default=b''),
        ),
        migrations.AlterField(
            model_name='wc_files',
            name='dest',
            field=models.TextField(default=b''),
        ),
        migrations.AlterField(
            model_name='wc_files',
            name='source',
            field=models.TextField(default=b''),
        ),
        migrations.AlterUniqueTogether(
            name='graphsetting',
            unique_together=set([('user', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='graphsettingsize',
            unique_together=set([('width', 'height')]),
        ),
        migrations.RunPython(
            code=add_graph_setting_size,
            reverse_code=dummy_reverse,
        ),
        migrations.CreateModel(
            name='GraphSettingTimeshift',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default=b'', max_length=64, unique=True)),
                ('seconds', models.IntegerField(default=0, unique=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.AlterModelOptions(
            name='graphsettingsize',
            options={'ordering': ('width', 'height')},
        ),
        migrations.AddField(
            model_name='graphsetting',
            name='graph_setting_timeshift',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.GraphSettingTimeshift'),
        ),
        migrations.AlterField(
            model_name='graphsetting',
            name='graph_setting_size',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.GraphSettingSize'),
        ),
        migrations.CreateModel(
            name='GraphSettingForecast',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default=b'', max_length=64, unique=True)),
                ('seconds', models.IntegerField(default=0, unique=True)),
                ('mode', models.CharField(choices=[(b'sl', b'simple linear')], default=b'sl', max_length=4)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.AddField(
            model_name='graphsetting',
            name='graph_setting_forecast',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.GraphSettingForecast'),
        ),
        migrations.CreateModel(
            name='GraphTimeFrame',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default=b'', max_length=64, unique=True)),
                ('relative_to_now', models.BooleanField(default=False)),
                ('auto_refresh', models.BooleanField(default=False)),
                ('seconds', models.IntegerField(default=0)),
                (
                    'base_timeframe',
                    models.CharField(
                        choices=[(b'h', b'hour'), (b'd', b'day'), (b'w', b'week'), (b'm', b'month'), (b'y', b'year'), (b'D', b'decade')],
                        default=b'd',
                        max_length=4,
                    )
                ),
                ('timeframe_offset', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.AlterModelOptions(
            name='graphtimeframe',
            options={'ordering': ('-relative_to_now', 'timeframe_offset', 'seconds')},
        ),
        migrations.AlterField(
            model_name='mvstructentry',
            name='type_instance',
            field=models.CharField(default=b'', max_length=255),
        ),
        migrations.AddField(
            model_name='graphsetting',
            name='cf',
            field=models.CharField(choices=[(b'AVERAGE', b'average'), (b'MAX', b'maximum'), (b'MIN', b'minimum')], default=b'AVERAGE', max_length=16),
        ),
        migrations.AlterField(
            model_name='package_repo',
            name='password',
            field=models.CharField(blank=True, default=b'', max_length=128),
        ),
        migrations.AlterField(
            model_name='package_repo',
            name='username',
            field=models.CharField(blank=True, default=b'', max_length=128),
        ),
        migrations.AddField(
            model_name='user',
            name='login_fail_count',
            field=models.IntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='rms_job',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ConfigTreeNode',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('is_dir', models.BooleanField(default=False)),
                ('is_link', models.BooleanField(default=False)),
                ('intermediate', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('parent', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.ConfigTreeNode')),
            ],
        ),
        migrations.CreateModel(
            name='WrittenConfigFile',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('run_number', models.IntegerField(default=0)),
                ('uid', models.IntegerField(blank=True, default=0)),
                ('gid', models.IntegerField(blank=True, default=0)),
                ('mode', models.IntegerField(blank=True, default=493)),
                (
                    'dest_type',
                    models.CharField(
                        choices=[(b'f', b'file'), (b'l', b'link'), (b'd', b'directory'), (b'e', b'erase'), (b'c', b'copy'), (b'i', b'internal')],
                        max_length=8
                    )
                ),
                ('source', models.TextField(default=b'')),
                ('dest', models.TextField(default=b'')),
                ('error_flag', models.BooleanField(default=False)),
                ('content', models.TextField(blank=True, default=b'')),
                ('binary', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('config', models.ManyToManyField(to='backbone.config')),
                ('config_tree_node', models.OneToOneField(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.ConfigTreeNode')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
            ],
        ),
        migrations.RemoveField(
            model_name='tree_node',
            name='device',
        ),
        migrations.RemoveField(
            model_name='tree_node',
            name='parent',
        ),
        migrations.RemoveField(
            model_name='wc_files',
            name='config',
        ),
        migrations.RemoveField(
            model_name='wc_files',
            name='device',
        ),
        migrations.RemoveField(
            model_name='wc_files',
            name='tree_node',
        ),
        migrations.DeleteModel(
            name='tree_node',
        ),
        migrations.DeleteModel(
            name='wc_files',
        ),
        migrations.CreateModel(
            name='DeviceInventory',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('inventory_type', models.CharField(choices=[(b'lstopo', b'LSTopo'), (b'dmi', b'DMI'), (b'pci', b'PCI')], max_length=255)),
                ('run_idx', models.IntegerField(default=0)),
                ('value', models.TextField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
            ],
        ),
        migrations.AddField(
            model_name='package_repo',
            name='deb_components',
            field=models.CharField(blank=True, default=b'', max_length=255),
        ),
        migrations.AddField(
            model_name='package_repo',
            name='deb_distribution',
            field=models.CharField(blank=True, default=b'', max_length=128),
        ),
        migrations.CreateModel(
            name='ICSWVersion',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(choices=[(b'database', b'Database scheme'), (b'software', b'Software package version'),
                                                   (b'models', b'Models version')], max_length=63)),
                ('version', models.CharField(max_length=128)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('insert_idx', models.IntegerField(default=1)),
            ],
        ),
        migrations.AlterField(
            model_name='package_repo',
            name='alias',
            field=models.CharField(blank=True, default=b'', max_length=128),
        ),
        migrations.AlterField(
            model_name='package_repo',
            name='repo_type',
            field=models.CharField(blank=True, default=b'', max_length=128),
        ),
        migrations.AlterField(
            model_name='package_service',
            name='alias',
            field=models.CharField(default=b'', max_length=128),
        ),
        migrations.AlterField(
            model_name='sensoraction',
            name='action',
            field=models.CharField(choices=[(b'none', b'do nothing'), (b'reboot', b'restart device'), (b'halt', b'halt device'),
                                            (b'poweroff', b'poweroff device'), (b'poweron', b'turn on device')], default=b'none', max_length=64),
        ),
        migrations.AddField(
            model_name='category',
            name='useable',
            field=models.BooleanField(default=True),
        ),
        migrations.AlterUniqueTogether(
            name='category',
            unique_together=set([('name', 'parent')]),
        ),
        migrations.AddField(
            model_name='mon_check_command_special',
            name='group',
            field=models.CharField(default=b'', max_length=64),
        ),
        migrations.AlterModelOptions(
            name='mon_check_command_special',
            options={'ordering': ('group', 'name'), 'verbose_name': 'Special check command'},
        ),
        migrations.RemoveField(
            model_name='mon_check_command',
            name='mon_check_command_type',
        ),
        migrations.DeleteModel(
            name='mon_check_command_type',
        ),
        migrations.CreateModel(
            name='SyslogCheck',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64, unique=True)),
                ('xml_source', models.TextField(default=b'')),
                ('enabled', models.BooleanField(default=True)),
                ('minutes_to_consider', models.IntegerField(default=5)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('expressions', models.TextField(default=b'')),
                ('version', models.IntegerField(default=1)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.AlterField(
            model_name='network',
            name='preferred_domain_tree_node',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.domain_tree_node'),
        ),
        migrations.AddField(
            model_name='netdevice',
            name='desired_status',
            field=models.CharField(choices=[(b'd', b'down'), (b'i', b'ignore'), (b'u', b'up')], default=b'i', max_length=4),
        ),
        migrations.AddField(
            model_name='netdevice',
            name='ignore_netdevice_speed',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='config',
            name='categories',
            field=models.ManyToManyField(blank=True, to='backbone.category'),
        ),
        migrations.AlterField(
            model_name='network',
            name='network_device_type',
            field=models.ManyToManyField(blank=True, to='backbone.network_device_type'),
        ),
        migrations.AddField(
            model_name='monitoring_hint',
            name='value_blob',
            field=models.TextField(blank=True, default=b''),
        ),
        migrations.AlterField(
            model_name='monitoring_hint',
            name='v_type',
            field=models.CharField(
                choices=[(b'f', b'float'), (b'i', b'integer'), (b'b', b'boolean'), (b's', b'string'), (b'B', b'blob')],
                default=b'f', max_length=6
            ),
        ),
        migrations.AlterModelOptions(
            name='csw_permission',
            options={'ordering': ('content_type__app_label', 'content_type__model', 'name'), 'verbose_name': 'Global permission'},
        ),
        migrations.AlterField(
            model_name='device',
            name='alias',
            field=models.CharField(blank=True, default=b'', max_length=384),
        ),
        migrations.AlterField(
            model_name='device',
            name='comment',
            field=models.CharField(blank=True, default=b'', max_length=384),
        ),
        migrations.AlterField(
            model_name='device_group',
            name='description',
            field=models.CharField(blank=True, default=b'', max_length=384),
        ),
        migrations.AlterField(
            model_name='deviceselection',
            name='categories',
            field=models.ManyToManyField(blank=True, to='backbone.category'),
        ),
        migrations.AlterField(
            model_name='deviceselection',
            name='device_groups',
            field=models.ManyToManyField(blank=True, to='backbone.device_group'),
        ),
        migrations.AlterField(
            model_name='deviceselection',
            name='devices',
            field=models.ManyToManyField(blank=True, to='backbone.device'),
        ),
        migrations.CreateModel(
            name='AssetBatch',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='AssetPackage',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now)),
                ('package_type', models.IntegerField(choices=[(1, b'WINDOWS'), (2, b'LINUX')], default=1)),
            ],
        ),
        migrations.CreateModel(
            name='AssetPackageVersion',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('size', models.IntegerField(default=0)),
                ('version', models.TextField(blank=True, default=b'')),
                ('release', models.TextField(blank=True, default=b'')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('asset_package', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.AssetPackage')),
            ],
        ),
        migrations.CreateModel(
            name='AssetRun',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('run_index', models.IntegerField(default=1)),
                ('run_status', models.IntegerField(choices=[(1, b'PLANNED'), (2, b'RUNNING'), (3, b'ENDED'), (4, b'FAILED')], null=True)),
                ('run_start_time', models.DateTimeField(blank=True, null=True)),
                ('run_end_time', models.DateTimeField(blank=True, null=True)),
                ('asset_batch', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.AssetBatch')),
                ('device', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('raw_result_interpreted', models.BooleanField(default=False)),
                ('raw_result_str', models.TextField(null=True)),
                ('run_type', models.IntegerField(choices=[(1, b'PACKAGE'), (2, b'HARDWARE'), (3, b'LICENSE'), (4, b'UPDATE'), (5, b'SOFTWARE_VERSION'),
                                                          (6, b'PROCESS'), (7, b'PENDING_UPDATE')], null=True)),
                ('scan_type', models.IntegerField(choices=[(1, b'HM'), (2, b'NRPE')], null=True)),
                ('packages', models.ManyToManyField(to='backbone.AssetPackageVersion')),
                ('run_duration', models.IntegerField(default=0)),
                ('batch_index', models.IntegerField(default=0)),
            ],
        ),
        migrations.AlterField(
            model_name='sensorthreshold',
            name='notify_users',
            field=models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='dispatchsetting',
            name='source',
            field=models.IntegerField(choices=[(1, b'SNMP'), (2, b'ASU'), (3, b'IPMI'), (4, b'NRPE')]),
        ),
        migrations.AlterField(
            model_name='scanhistory',
            name='source',
            field=models.IntegerField(choices=[(1, b'SNMP'), (2, b'ASU'), (3, b'IPMI'), (4, b'NRPE')]),
        ),
        migrations.AlterField(
            model_name='dispatchsetting',
            name='source',
            field=models.IntegerField(choices=[(1, b'SNMP'), (2, b'ASU'), (3, b'IPMI'), (4, b'NRPE_PACKAGE'), (5, b'NRPE_HARDWARE'), (6, b'NRPE_LICENSE'),
                                               (7, b'NRPE_UPDATE'), (8, b'NRPE_SOFTWARE_VERSION')]),
        ),
        migrations.AlterField(
            model_name='scanhistory',
            name='source',
            field=models.IntegerField(choices=[(1, b'SNMP'), (2, b'ASU'), (3, b'IPMI'), (4, b'NRPE_PACKAGE'), (5, b'NRPE_HARDWARE'), (6, b'NRPE_LICENSE'),
                                               (7, b'NRPE_UPDATE'), (8, b'NRPE_SOFTWARE_VERSION')]),
        ),
        migrations.AlterField(
            model_name='dispatchsetting',
            name='source',
            field=models.IntegerField(choices=[(1, b'SNMP'), (2, b'ASU'), (3, b'IPMI'), (4, b'NRPE_PACKAGE'), (5, b'NRPE_HARDWARE'), (6, b'NRPE_LICENSE'),
                                               (7, b'NRPE_UPDATE'), (8, b'NRPE_SOFTWARE_VERSION'), (9, b'NRPE_PROCESS')]),
        ),
        migrations.AlterField(
            model_name='scanhistory',
            name='source',
            field=models.IntegerField(choices=[(1, b'SNMP'), (2, b'ASU'), (3, b'IPMI'), (4, b'NRPE_PACKAGE'), (5, b'NRPE_HARDWARE'), (6, b'NRPE_LICENSE'),
                                               (7, b'NRPE_UPDATE'), (8, b'NRPE_SOFTWARE_VERSION'), (9, b'NRPE_PROCESS')]),
        ),
        migrations.AlterField(
            model_name='dispatchsetting',
            name='source',
            field=models.IntegerField(choices=[(1, b'SNMP'), (2, b'ASU'), (3, b'IPMI'), (4, b'PACKAGE'), (5, b'HARDWARE'), (6, b'LICENSE'), (7, b'UPDATE'),
                                               (8, b'SOFTWARE_VERSION'), (9, b'PROCESS')]),
        ),
        migrations.AlterField(
            model_name='scanhistory',
            name='source',
            field=models.IntegerField(choices=[(1, b'SNMP'), (2, b'ASU'), (3, b'IPMI'), (4, b'PACKAGE'), (5, b'HARDWARE'), (6, b'LICENSE'), (7, b'UPDATE'),
                                               (8, b'SOFTWARE_VERSION'), (9, b'PROCESS')]),
        ),
        migrations.AlterField(
            model_name='dispatchsetting',
            name='source',
            field=models.IntegerField(choices=[(1, b'SNMP'), (2, b'ASU'), (3, b'IPMI'), (4, b'PACKAGE'), (5, b'HARDWARE'), (6, b'LICENSE'), (7, b'UPDATE'),
                                               (8, b'SOFTWARE_VERSION'), (9, b'PROCESS'), (10, b'PENDING_UPDATE')]),
        ),
        migrations.AlterField(
            model_name='scanhistory',
            name='source',
            field=models.IntegerField(choices=[(1, b'SNMP'), (2, b'ASU'), (3, b'IPMI'), (4, b'PACKAGE'), (5, b'HARDWARE'), (6, b'LICENSE'), (7, b'UPDATE'),
                                               (8, b'SOFTWARE_VERSION'), (9, b'PROCESS'), (10, b'PENDING_UPDATE')]),
        ),
        migrations.CreateModel(
            name='DispatcherSetting',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default=b'', max_length=64, unique=True)),
                ('description', models.CharField(blank=True, default=b'', max_length=256)),
                ('is_system', models.BooleanField(default=False)),
                ('mult', models.IntegerField(default=1)),
                ('sched_start_second', models.IntegerField(default=None, null=True)),
                ('sched_start_minute', models.IntegerField(default=None, null=True)),
                ('sched_start_hour', models.IntegerField(default=None, null=True)),
                ('sched_start_day', models.IntegerField(default=None, null=True)),
                ('sched_start_week', models.IntegerField(default=None, null=True)),
                ('sched_start_month', models.IntegerField(default=None, null=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('com_capabilities', models.ManyToManyField(blank=True, to='backbone.ComCapability')),
            ],
        ),
        migrations.CreateModel(
            name='DispatcherSettingSchedule',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default=b'', max_length=64, unique=True)),
                ('baseline', models.IntegerField(choices=[(0, b'year'), (1, b'month'), (2, b'week'), (3, b'day'), (4, b'hour'),
                                                          (5, b'minute'), (6, b'second')])),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.AlterField(
            model_name='dispatchsetting',
            name='source',
            field=models.IntegerField(choices=[(1, b'SNMP'), (2, b'ASU'), (3, b'IPMI')]),
        ),
        migrations.AlterField(
            model_name='scanhistory',
            name='source',
            field=models.IntegerField(choices=[(1, b'SNMP'), (2, b'ASU'), (3, b'IPMI')]),
        ),
        migrations.AddField(
            model_name='dispatchersetting',
            name='run_schedule',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.DispatcherSettingSchedule'),
        ),
        migrations.AddField(
            model_name='dispatchersetting',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='sensorthreshold',
            name='notify_users',
            field=models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='dispatchsetting',
            name='source',
            field=models.IntegerField(choices=[(1, b'SNMP'), (2, b'ASU'), (3, b'IPMI'), (4, b'PACKAGE'), (5, b'HARDWARE'), (6, b'LICENSE'),
                                               (7, b'UPDATE'), (8, b'SOFTWARE_VERSION'), (9, b'PROCESS'), (10, b'PENDING_UPDATE')]),
        ),
        migrations.AlterField(
            model_name='scanhistory',
            name='source',
            field=models.IntegerField(choices=[(1, b'SNMP'), (2, b'ASU'), (3, b'IPMI'), (4, b'PACKAGE'), (5, b'HARDWARE'), (6, b'LICENSE'),
                                               (7, b'UPDATE'), (8, b'SOFTWARE_VERSION'), (9, b'PROCESS'), (10, b'PENDING_UPDATE')]),
        ),
        migrations.CreateModel(
            name='DeviceDispatcherLink',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('dispatcher_setting', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.DispatcherSetting')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ScheduleItem',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('source', models.IntegerField(choices=[(1, b'SNMP'), (2, b'ASU'), (3, b'IPMI'), (4, b'PACKAGE'), (5, b'HARDWARE'), (6, b'LICENSE'),
                                                        (7, b'UPDATE'), (8, b'SOFTWARE_VERSION'), (9, b'PROCESS'), (10, b'PENDING_UPDATE')])),
                ('planned_date', models.DateTimeField(default=None, null=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('run_now', models.BooleanField(default=False)),
                ('dispatch_setting', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.DispatcherSetting')),
            ],
        ),
        migrations.CreateModel(
            name='StaticAsset',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
            ],
        ),
        migrations.CreateModel(
            name='StaticAssetFieldValue',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('value_str', models.CharField(blank=True, default=None, max_length=255, null=True)),
                ('value_int', models.IntegerField(blank=True, default=None, null=True)),
                ('value_date', models.DateField(blank=True, default=None, null=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('static_asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.StaticAsset')),
            ],
        ),
        migrations.CreateModel(
            name='StaticAssetTemplate',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.IntegerField(choices=[(1, b'LICENSE'), (2, b'CONTRACT'), (3, b'HARDWARE')])),
                ('name', models.CharField(max_length=128, unique=True)),
                ('consumable', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='StaticAssetTemplateField',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('field_type', models.IntegerField(choices=[(1, b'INTEGER'), (2, b'STRING'), (3, b'DATE')])),
                ('optional', models.BooleanField(default=False)),
                ('default_value_str', models.CharField(blank=True, default=b'', max_length=255)),
                ('default_value_int', models.IntegerField(default=0)),
                ('default_value_date', models.DateField(default=django.utils.timezone.now)),
                ('has_bounds', models.BooleanField(default=False)),
                ('value_int_lower_bound', models.IntegerField(default=0)),
                ('value_int_upper_bound', models.IntegerField(default=0)),
                ('monitor', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('static_asset_template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.StaticAssetTemplate')),
            ],
        ),
        migrations.AddField(
            model_name='staticassetfieldvalue',
            name='static_asset_template_field',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.StaticAssetTemplateField'),
        ),
        migrations.AddField(
            model_name='staticassetfieldvalue',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='staticasset',
            name='static_asset_template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.StaticAssetTemplate'),
        ),
        migrations.AddField(
            model_name='assetbatch',
            name='date',
            field=models.DateTimeField(auto_now_add=True),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='assetbatch',
            name='device',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device'),
        ),
        migrations.AddField(
            model_name='assetbatch',
            name='num_completed',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='assetbatch',
            name='num_runs',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='assetbatch',
            name='num_runs_error',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='assetbatch',
            name='num_runs_ok',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='assetbatch',
            name='run_end_time',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='assetbatch',
            name='run_start_time',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='assetbatch',
            name='run_time',
            field=models.IntegerField(default=0),
        ),
        migrations.RunPython(
            code=add_asset_batch_info,
            reverse_code=dummy_reverse,
        ),
        migrations.AddField(
            model_name='assetrun',
            name='run_result',
            field=models.IntegerField(choices=[(1, b'UNKNOWN'), (2, b'SUCCESS'), (3, b'WARNING'), (4, b'FAILED')], default=1),
        ),
        migrations.AlterField(
            model_name='assetrun',
            name='run_status',
            field=models.IntegerField(choices=[(1, b'PLANNED'), (2, b'RUNNING'), (3, b'ENDED'), (4, b'FAILED')], default=1),
        ),
        migrations.AlterField(
            model_name='assetrun',
            name='run_type',
            field=models.IntegerField(choices=[(1, b'PACKAGE'), (2, b'HARDWARE'), (3, b'LICENSE'), (4, b'UPDATE'),
                                               (5, b'SOFTWARE_VERSION'), (6, b'PROCESS'), (7, b'PENDING_UPDATE')], default=1),
        ),
        migrations.AlterField(
            model_name='assetrun',
            name='run_status',
            field=models.IntegerField(choices=[(1, b'PLANNED'), (2, b'RUNNING'), (3, b'ENDED')], default=1),
        ),
        migrations.RunPython(
            code=fix_run_status,
            reverse_code=dummy_reverse,
        ),
        migrations.AddField(
            model_name='assetpackageversion',
            name='info',
            field=models.TextField(default=b''),
        ),
        migrations.AddField(
            model_name='assetbatch',
            name='error_string',
            field=models.TextField(default=b''),
        ),
        migrations.AddField(
            model_name='assetbatch',
            name='run_result',
            field=models.IntegerField(choices=[(1, b'UNKNOWN'), (2, b'SUCCESS'), (3, b'WARNING'), (4, b'FAILED'), (5, b'CANCELED')], default=1),
        ),
        migrations.AddField(
            model_name='assetbatch',
            name='run_status',
            field=models.IntegerField(choices=[(1, b'PLANNED'), (2, b'RUNNING'), (3, b'ENDED')], default=1),
        ),
        migrations.AlterField(
            model_name='assetrun',
            name='run_result',
            field=models.IntegerField(choices=[(1, b'UNKNOWN'), (2, b'SUCCESS'), (3, b'WARNING'), (4, b'FAILED'), (5, b'CANCELED')], default=1),
        ),
        migrations.AddField(
            model_name='assetrun',
            name='created',
            field=models.DateTimeField(auto_now_add=True, default=datetime.datetime(2016, 5, 23, 5, 49, 35, 542592, tzinfo=utc)),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='assetbatch',
            name='created',
            field=models.DateTimeField(auto_now_add=True, default=datetime.datetime(2016, 5, 23, 6, 5, 4, 604067, tzinfo=utc)),
            preserve_default=False,
        ),
        migrations.CreateModel(
            name='AssetHardwareEntry',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.TextField(default=b'')),
                ('attributes', models.TextField(default=b'')),
                ('info_list', models.TextField(default=b'')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('asset_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.AssetRun')),
                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.AssetHardwareEntry')),
            ],
        ),
        migrations.AlterModelOptions(
            name='assethardwareentry',
            options={'ordering': ('idx',)},
        ),
        migrations.AddField(
            model_name='assethardwareentry',
            name='depth',
            field=models.IntegerField(default=0),
        ),
        migrations.CreateModel(
            name='AssetProcessEntry',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('pid', models.IntegerField(default=0)),
                ('name', models.CharField(default=b'', max_length=255)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('asset_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.AssetRun')),
            ],
            options={
                'ordering': ('idx',),
            },
        ),
        migrations.AlterModelOptions(
            name='assetprocessentry',
            options={'ordering': ('pid',)},
        ),
        migrations.AddField(
            model_name='staticassettemplate',
            name='system_template',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='staticassettemplate',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='staticassettemplatefield',
            name='field_description',
            field=models.TextField(default=b''),
        ),
        migrations.AddField(
            model_name='staticassettemplatefield',
            name='name',
            field=models.CharField(default=b'', max_length=64),
        ),
        migrations.AddField(
            model_name='staticassettemplatefield',
            name='consumable',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='staticassettemplatefield',
            name='optional',
            field=models.BooleanField(default=True),
        ),
        migrations.AlterUniqueTogether(
            name='staticassettemplatefield',
            unique_together=set([('static_asset_template', 'name')]),
        ),
        migrations.RemoveField(
            model_name='staticassettemplate',
            name='consumable',
        ),
        migrations.AddField(
            model_name='staticassettemplate',
            name='description',
            field=models.TextField(default=b''),
        ),
        migrations.AddField(
            model_name='staticassettemplate',
            name='parent_template',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.StaticAssetTemplate'),
        ),
        migrations.CreateModel(
            name='AssetLicenseEntry',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default=b'', max_length=255)),
                ('license_key', models.CharField(default=b'', max_length=255)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('asset_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.AssetRun')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='AssetUpdateEntry',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default=b'', max_length=255)),
                ('version', models.CharField(default=b'', max_length=255)),
                ('release', models.CharField(default=b'', max_length=255)),
                ('kb_idx', models.IntegerField(default=0)),
                ('install_date', models.DateTimeField(null=True)),
                ('status', models.CharField(default=b'', max_length=128)),
                ('optional', models.BooleanField(default=True)),
                ('installed', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('asset_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.AssetRun')),
                ('new_version', models.CharField(default=b'', max_length=64)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.AddField(
            model_name='assetrun',
            name='error_string',
            field=models.TextField(default=b''),
        ),
        migrations.AddField(
            model_name='assetrun',
            name='interpret_error_string',
            field=models.TextField(default=b''),
        ),
        migrations.CreateModel(
            name='AssetPCIEntry',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('domain', models.IntegerField(default=0)),
                ('bus', models.IntegerField(default=0)),
                ('slot', models.IntegerField(default=0)),
                ('func', models.IntegerField(default=0)),
                ('pci_class', models.IntegerField(default=0)),
                ('subclass', models.IntegerField(default=0)),
                ('device', models.IntegerField(default=0)),
                ('vendor', models.IntegerField(default=0)),
                ('revision', models.IntegerField(default=0)),
                ('pci_classname', models.CharField(default=b'', max_length=255)),
                ('subclassname', models.CharField(default=b'', max_length=255)),
                ('devicename', models.CharField(default=b'', max_length=255)),
                ('vendorname', models.CharField(default=b'', max_length=255)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('domain', 'bus', 'slot', 'func'),
            },
        ),
        migrations.AlterField(
            model_name='assetrun',
            name='run_type',
            field=models.IntegerField(choices=[(1, b'PACKAGE'), (2, b'HARDWARE'), (3, b'LICENSE'), (4, b'UPDATE'),
                                               (5, b'SOFTWARE_VERSION'), (6, b'PROCESS'), (7, b'PENDING_UPDATE'),
                                               (8, b'DMI'), (9, b'PCI')], default=1),
        ),
        migrations.AddField(
            model_name='assetpcientry',
            name='asset_run',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.AssetRun'),
        ),
        migrations.CreateModel(
            name='AssetDMIHandle',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('handle', models.IntegerField(default=0)),
                ('dmi_type', models.IntegerField(default=0)),
                ('header', models.CharField(default=b'', max_length=128)),
                ('length', models.IntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='AssetDMIHead',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('version', models.CharField(default=b'', max_length=63)),
                ('size', models.IntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('asset_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.AssetRun')),
            ],
        ),
        migrations.CreateModel(
            name='AssetDMIValue',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(default=b'', max_length=128)),
                ('single_value', models.BooleanField(default=True)),
                ('num_values', models.IntegerField(default=1)),
                ('value', models.TextField(default=b'')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('dmihandle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.AssetDMIHandle')),
            ],
        ),
        migrations.AddField(
            model_name='assetdmihandle',
            name='dmihead',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.AssetDMIHead'),
        ),
        migrations.AddField(
            model_name='csw_permission',
            name='created',
            field=models.DateTimeField(auto_now_add=True, default=datetime.datetime(2016, 5, 27, 9, 0, 9, 367781, tzinfo=utc)),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='user_variable',
            name='editable',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='user_variable',
            name='hidden',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='user_variable',
            name='json_value',
            field=models.TextField(blank=True, default=b''),
        ),
        migrations.AlterField(
            model_name='user_variable',
            name='var_type',
            field=models.CharField(choices=[(b's', b'string'), (b'i', b'integer'), (b'b', b'boolean'), (b'j', b'json-encoded'), (b'n', b'none')], max_length=2),
        ),
        migrations.AddField(
            model_name='user_variable',
            name='description',
            field=models.CharField(blank=True, default=b'', max_length=255),
        ),
        migrations.AlterField(
            model_name='user_variable',
            name='value',
            field=models.CharField(blank=True, default=b'', max_length=512),
        ),
        migrations.CreateModel(
            name='AssetHWCPUEntry',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('cpuname', models.TextField(null=True)),
                ('numberofcores', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AssetHWMemoryEntry',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('banklabel', models.TextField(null=True)),
                ('capacity', models.BigIntegerField(null=True)),
                ('formfactor', models.TextField(null=True)),
                ('manufacturer', models.TextField(null=True)),
                ('memorytype', models.TextField(null=True)),
            ],
        ),
        migrations.AlterField(
            model_name='assetrun',
            name='run_type',
            field=models.IntegerField(choices=[(1, b'PACKAGE'), (2, b'HARDWARE'), (3, b'LICENSE'), (4, b'UPDATE'),
                                               (5, b'SOFTWARE_VERSION'), (6, b'PROCESS'), (7, b'PENDING_UPDATE'),
                                               (8, b'DMI'), (9, b'PCI'), (10, b'PRETTYWINHW')], default=1),
        ),
        migrations.AlterField(
            model_name='device',
            name='categories',
            field=models.ManyToManyField(blank=True, to='backbone.category'),
        ),
        migrations.AlterField(
            model_name='device',
            name='stage1_flavour',
            field=models.CharField(blank=True, default=b'cpio', max_length=48),
        ),
        migrations.AddField(
            model_name='assetrun',
            name='cpus',
            field=models.ManyToManyField(to='backbone.AssetHWCPUEntry'),
        ),
        migrations.AddField(
            model_name='assetrun',
            name='memory_modules',
            field=models.ManyToManyField(to='backbone.AssetHWMemoryEntry'),
        ),
        migrations.AddField(
            model_name='assetrun',
            name='cpu_count',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='assetrun',
            name='memory_count',
            field=models.IntegerField(default=0),
        ),
        migrations.CreateModel(
            name='AssetHWDisplayEntry',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(null=True)),
                ('type', models.TextField(null=True)),
                ('xpixels', models.IntegerField(null=True)),
                ('ypixels', models.IntegerField(null=True)),
                ('manufacturer', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AssetHWGPUEntry',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('gpuname', models.TextField(null=True)),
                ('driverversion', models.TextField(null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='AssetHWHDDEntry',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(null=True)),
                ('serialnumber', models.TextField(null=True)),
                ('size', models.BigIntegerField(null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='AssetHWLogicalEntry',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(null=True)),
                ('size', models.BigIntegerField(null=True)),
                ('free', models.BigIntegerField(null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.AddField(
            model_name='assetrun',
            name='displays',
            field=models.ManyToManyField(to='backbone.AssetHWDisplayEntry'),
        ),
        migrations.AddField(
            model_name='assetrun',
            name='gpus',
            field=models.ManyToManyField(to='backbone.AssetHWGPUEntry'),
        ),
        migrations.AddField(
            model_name='assetrun',
            name='hdds',
            field=models.ManyToManyField(to='backbone.AssetHWHDDEntry'),
        ),
        migrations.AddField(
            model_name='assetrun',
            name='partitions',
            field=models.ManyToManyField(to='backbone.AssetHWLogicalEntry'),
        ),
        migrations.AddField(
            model_name='assetrun',
            name='generate_duration',
            field=models.FloatField(default=0.0),
        ),
        migrations.CreateModel(
            name='DeviceScanLock',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('uuid', models.TextField(default=b'', max_length=64)),
                ('description', models.CharField(default=b'', max_length=255)),
                ('active', models.BooleanField(default=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='config_lock', to='backbone.config')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device')),
                ('server', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='device_lock', to='backbone.device')),
                ('run_time', models.IntegerField(default=0)),
            ],
        ),
        migrations.RemoveField(
            model_name='device',
            name='active_scan',
        ),
        migrations.CreateModel(
            name='device_variable_scope',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=32, unique=True)),
                ('prefix', models.CharField(default=b'', max_length=127)),
                ('forced_flags', models.CharField(default=b'', max_length=127)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.AddField(
            model_name='device_variable',
            name='uuid',
            field=models.TextField(default=b'', max_length=64),
        ),
        migrations.AddField(
            model_name='device_variable',
            name='device_variable_scope',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backbone.device_variable_scope'),
        ),
        migrations.AlterUniqueTogether(
            name='device_variable',
            unique_together=set([('name', 'device', 'device_variable_scope')]),
        ),
        migrations.RunPython(
            code=add_device_variable_uuids,
            reverse_code=dummy_reverse,
        ),
        migrations.RunPython(
            code=add_device_variable_scopes,
            reverse_code=remove_device_variable_scopes,
        ),
        migrations.RunPython(
            code=set_default_scopes,
            reverse_code=dummy_reverse,
        ),
        migrations.AlterField(
            model_name='device_variable',
            name='device_variable_scope',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device_variable_scope'),
        ),
        migrations.CreateModel(
            name='dvs_allowed_names',
            fields=[
                ('idx', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default=b'', max_length=127, unique=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.AddField(
            model_name='device_variable_scope',
            name='default_scope',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='dvs_allowed_names',
            name='device_variable_scope',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backbone.device_variable_scope'),
        ),
        migrations.RunPython(
            code=set_default_variable_scope,
            reverse_code=dummy_reverse,
        ),
        migrations.AddField(
            model_name='user',
            name='ui_theme_selection',
            field=models.CharField(default=b'default', max_length=64),
        ),
        migrations.AddField(
            model_name='dvs_allowed_names',
            name='description',
            field=models.TextField(default=b''),
        ),
        migrations.AlterField(
            model_name='device',
            name='name',
            field=models.CharField(default=b'', max_length=192),
        ),
        migrations.AddField(
            model_name='dvs_allowed_names',
            name='forced_type',
            field=models.CharField(choices=[(b'', b'ignore'), (b'i', b'integer'), (b's', b'string'), (b'd', b'datetime'), (b'D', b'date'),
                                            (b't', b'time'), (b'b', b'blob')], default=b'', max_length=3),
        ),
        migrations.AddField(
            model_name='dvs_allowed_names',
            name='unique',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='dvs_allowed_names',
            name='group',
            field=models.CharField(default=b'', max_length=127),
        ),
        migrations.AlterField(
            model_name='device_variable',
            name='var_type',
            field=models.CharField(choices=[(b'i', b'integer'), (b's', b'string'), (b'd', b'datetime'), (b'D', b'date'), (b't', b'time'),
                                            (b'b', b'blob'), (b'?', b'guess')], max_length=3),
        ),
        migrations.AlterField(
            model_name='staticassettemplatefield',
            name='field_description',
            field=models.TextField(blank=True, default=b''),
        ),
    ]
