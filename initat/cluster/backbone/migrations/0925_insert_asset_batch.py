# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2016-05-21 14:55


from django.db import migrations, models
import django.db.models.deletion
from django.db.models import Q
import datetime

import re


def add_asset_batch_info(apps, schema_editor):
    def create_batch(rfb_list):
        if len(rfb_list):
            _valid = [entry for entry in rfb_list if entry.run_start_time and entry.run_end_time]
            _invalid = [entry for entry in rfb_list if not entry.run_start_time or not entry.run_end_time]
            if len(_valid):
                run_start_time = min([entry.run_start_time for entry in _valid])
                run_end_time = min([entry.run_end_time for entry in _valid])
                # _states = [entry.run_status for entry in _valid]
                new_batch = asset_batch(
                    device=_valid[0].device,
                    num_runs=len(_valid),
                    num_completed=len(_valid),
                    num_runs_ok=len(_valid),
                    num_runs_error=0,
                    run_time=int(abs((run_end_time - run_start_time).seconds)),
                    run_start_time=run_start_time,
                    run_end_time=run_end_time,
                )
                new_batch.save()
                for _idx, _run in enumerate(rfb_list):
                    _run.batch_index = _idx
                    _run.asset_batch = new_batch
                    _run.save()
            if len(_invalid):
                for _entry in _invalid:
                    # delete invalid runs
                    _entry.delete()

    # add asset batch info
    asset_batch = apps.get_model("backbone", "AssetBatch")
    asset_run = apps.get_model("backbone", "AssetRun")
    _batchless = asset_run.objects.filter(Q(asset_batch=None)).order_by("idx")
    # sort according to device
    _dev_dict = {}
    for _run in _batchless:
        _dev_dict.setdefault(_run.device_id, []).append(_run)
    for _dev_pk, _run_list in _dev_dict.items():
        _cur_time = None
        # list of runs for batch
        _rfb_list = []
        for _run in _run_list:
            if _run.run_start_time:
                if _cur_time and (_run.run_start_time - _cur_time).seconds < 1:
                    _rfb_list.append(_run)
                else:
                    create_batch(_rfb_list)
                    _cur_time = _run.run_start_time
                    _rfb_list = [_run]
            else:
                create_batch(_rfb_list)
                # delete illegal runs
                _run.delete()
                _rfb_list = []
        create_batch(_rfb_list)


def dummy_reverse(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    reversible = True

    dependencies = [
        ('backbone', '0924_auto_20160521_1652'),
    ]

    operations = [
        migrations.RunPython(add_asset_batch_info, reverse_code=dummy_reverse)
    ]
