# -*- coding: utf-8 -*-


from django.db import models, migrations
import datetime
import django.db.models.deletion
from django.conf import settings


def db_limit_1():
    # return True if databases do not support some unique_together combinations
    return True if settings.DATABASES["default"]["ENGINE"].lower().count("oracle") else False


class Migration(migrations.Migration):
    initial =  True

    dependencies = [
        ('backbone', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='user',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'user_idx')),
                ('active', models.BooleanField(default=True)),
                ('login', models.CharField(unique=True, max_length=255)),
                ('uid', models.IntegerField(unique=True)),
                ('aliases', models.TextField(default=b'', null=True, blank=True)),
                ('home', models.CharField(default=b'', max_length=128, blank=True)),
                ('shell', models.CharField(default=b'/bin/bash', max_length=765, blank=True)),
                ('password', models.CharField(max_length=128, blank=True)),
                ('password_ssha', models.CharField(default=b'', max_length=128, blank=True)),
                ('nt_password', models.CharField(default=b'', max_length=255, blank=True)),
                ('lm_password', models.CharField(default=b'', max_length=255, blank=True)),
                ('first_name', models.CharField(default=b'', max_length=765, blank=True)),
                ('last_name', models.CharField(default=b'', max_length=765, blank=True)),
                ('title', models.CharField(default=b'', max_length=765, blank=True)),
                ('email', models.CharField(default=b'', max_length=765, blank=True)),
                ('pager', models.CharField(default=b'', max_length=765, verbose_name=b'mobile', blank=True)),
                ('tel', models.CharField(default=b'', max_length=765, blank=True)),
                ('comment', models.CharField(default=b'', max_length=765, blank=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('home_dir_created', models.BooleanField(default=False)),
                ('last_login', models.DateTimeField(null=True)),
                ('login_count', models.IntegerField(default=0)),
                ('is_superuser', models.BooleanField(default=False)),
                ('db_is_auth_for_password', models.BooleanField(default=False)),
                ('only_webfrontend', models.BooleanField(default=False)),
                ('create_rms_user', models.BooleanField(default=False)),
                ('rms_user_created', models.BooleanField(default=False)),
                ('scan_user_home', models.BooleanField(default=False)),
                ('scan_depth', models.IntegerField(default=2)),
            ],
            options={
                'ordering': ('login', 'group__groupname'),
                'db_table': 'user',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='architecture',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'architecture_idx')),
                ('architecture', models.CharField(default=b'', unique=True, max_length=128)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'architecture',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='background_job',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('cause', models.CharField(default=b'unknown', max_length=256)),
                ('command', models.CharField(max_length=256)),
                ('state', models.CharField(default=b'pre-init', max_length=128, choices=[(b'pre-init', b'before cluster-server detection'), (b'pending', b'init and awaiting processing'), (b'done', b'job finished'), (b'timeout', b'timeout'), (b'merged', b'merged with other job')])),
                ('command_xml', models.TextField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('valid_until', models.DateTimeField(null=True)),
                ('num_servers', models.IntegerField(default=0)),
            ],
            options={
                'ordering': ('-date',),
                'verbose_name': 'Background jobs',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='background_job_run',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('command_xml', models.TextField()),
                ('state', models.IntegerField(default=4)),
                ('result', models.TextField(default=b'')),
                ('result_xml', models.TextField(null=True)),
                ('start', models.DateTimeField(null=True)),
                ('end', models.DateTimeField(null=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('background_job', models.ForeignKey(to='backbone.background_job')),
            ],
            options={
                'ordering': ('date',),
                'verbose_name': 'Background job run',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='category',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(default=b'', max_length=64)),
                ('full_name', models.CharField(default=b'', max_length=1024, blank=True)),
                ('depth', models.IntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('immutable', models.BooleanField(default=False)),
                ('physical', models.BooleanField(default=True)),
                ('latitude', models.FloatField(default=48.1)),
                ('longitude', models.FloatField(default=16.3)),
                ('locked', models.BooleanField(default=False)),
                ('comment', models.CharField(default=b'', max_length=256, blank=True)),
                ('parent', models.ForeignKey(to='backbone.category', null=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='cd_connection',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('connection_info', models.CharField(default=b'not set', max_length=256)),
                ('parameter_i1', models.IntegerField(default=0)),
                ('parameter_i2', models.IntegerField(default=0)),
                ('parameter_i3', models.IntegerField(default=0)),
                ('parameter_i4', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('parent__name', 'child__name'),
                'verbose_name': 'Controlling device connection',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='cluster_license',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'device_rsync_config_idx')),
                ('name', models.CharField(default=b'', unique=True, max_length=64)),
                ('enabled', models.BooleanField(default=False)),
                ('description', models.CharField(default=b'', max_length=256)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='config',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'new_config_idx')),
                ('name', models.CharField(max_length=192)),
                ('description', models.CharField(default=b'', max_length=765, blank=True)),
                ('priority', models.IntegerField(default=0, null=True)),
                ('server_config', models.BooleanField(default=False)),
                ('system_config', models.BooleanField(default=False)),
                ('enabled', models.BooleanField(default=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('categories', models.ManyToManyField(to='backbone.category')),
            ],
            options={
                'ordering': ['name', 'config_catalog__name'],
                'db_table': 'new_config',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='config_blob',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'config_blob_idx')),
                ('name', models.CharField(max_length=192)),
                ('description', models.CharField(max_length=765, db_column=b'descr')),
                ('config_old', models.IntegerField(null=True, db_column=b'config', blank=True)),
                ('value', models.TextField(blank=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('config', models.ForeignKey(to='backbone.config', db_column=b'new_config_id')),
            ],
            options={
                'db_table': 'config_blob',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='config_bool',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'config_bool_idx')),
                ('name', models.CharField(max_length=192)),
                ('description', models.CharField(max_length=765, db_column=b'descr')),
                ('config_old', models.IntegerField(null=True, db_column=b'config', blank=True)),
                ('value', models.IntegerField(null=True, blank=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('config', models.ForeignKey(to='backbone.config', db_column=b'new_config_id')),
            ],
            options={
                'db_table': 'config_bool',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='config_catalog',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=254)),
                ('url', models.URLField(default=b'', max_length=256, blank=True)),
                ('author', models.CharField(default=b'', max_length=256, blank=True)),
                ('version', models.IntegerField(default=1)),
                ('extraction_time', models.DateTimeField(null=True, blank=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='config_hint',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('config_name', models.CharField(unique=True, max_length=192)),
                ('config_description', models.CharField(default=b'', max_length=192)),
                ('valid_for_meta', models.BooleanField(default=True)),
                ('exact_match', models.BooleanField(default=True)),
                ('help_text_short', models.TextField(default=b'')),
                ('help_text_html', models.TextField(default=b'')),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='config_int',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'config_int_idx')),
                ('name', models.CharField(max_length=192)),
                ('description', models.CharField(max_length=765, db_column=b'descr')),
                ('config_old', models.IntegerField(null=True, db_column=b'config', blank=True)),
                ('value', models.IntegerField(null=True, blank=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('config', models.ForeignKey(to='backbone.config', db_column=b'new_config_id')),
            ],
            options={
                'db_table': 'config_int',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='config_script',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'config_script_idx')),
                ('name', models.CharField(max_length=192)),
                ('description', models.CharField(max_length=765, db_column=b'descr')),
                ('enabled', models.BooleanField(default=True)),
                ('priority', models.IntegerField(default=0, null=True, blank=True)),
                ('value', models.TextField(blank=True)),
                ('error_text', models.TextField(default=b'', blank=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('config', models.ForeignKey(to='backbone.config', db_column=b'new_config_id')),
            ],
            options={
                'ordering': ('priority', 'name'),
                'db_table': 'config_script',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='config_script_hint',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('script_name', models.CharField(default=b'', max_length=192)),
                ('help_text_short', models.TextField(default=b'')),
                ('help_text_html', models.TextField(default=b'')),
                ('ac_flag', models.BooleanField(default=False)),
                ('ac_description', models.CharField(default=b'description', max_length=128)),
                ('ac_value', models.TextField(default=b'')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('config_hint', models.ForeignKey(to='backbone.config_hint')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='config_str',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'config_str_idx')),
                ('name', models.CharField(max_length=192)),
                ('description', models.CharField(max_length=765, db_column=b'descr')),
                ('config_old', models.IntegerField(null=True, db_column=b'config', blank=True)),
                ('value', models.TextField(blank=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('config', models.ForeignKey(to='backbone.config', db_column=b'new_config_id')),
            ],
            options={
                'ordering': ('name',),
                'db_table': 'config_str',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='config_var_hint',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('var_name', models.CharField(default=b'', max_length=192)),
                ('help_text_short', models.TextField(default=b'')),
                ('help_text_html', models.TextField(default=b'')),
                ('ac_flag', models.BooleanField(default=False)),
                ('ac_type', models.CharField(default=b'str', max_length=64, choices=[(b'str', b'string var'), (b'int', b'int var'), (b'bool', b'bool var')])),
                ('ac_description', models.CharField(default=b'description', max_length=128)),
                ('ac_value', models.TextField(default=b'')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('config_hint', models.ForeignKey(to='backbone.config_hint')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='csw_object_permission',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('object_pk', models.IntegerField(default=0)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='csw_permission',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=150)),
                ('codename', models.CharField(max_length=150)),
                ('valid_for_object_level', models.BooleanField(default=True)),
                ('content_type', models.ForeignKey(to='contenttypes.ContentType')),
            ],
            options={
                'ordering': ('content_type__app_label', 'content_type__name', 'name'),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='DeleteRequest',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('obj_pk', models.IntegerField()),
                ('model', models.TextField()),
                ('delete_strategies', models.TextField(null=True, blank=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='device',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'device_idx')),
                ('name', models.CharField(max_length=192)),
                ('alias', models.CharField(max_length=384, blank=True)),
                ('comment', models.CharField(max_length=384, blank=True)),
                ('etherboot_valid', models.BooleanField(default=False)),
                ('kernel_append', models.CharField(max_length=384, blank=True)),
                ('newkernel', models.CharField(max_length=192, blank=True)),
                ('actkernel', models.CharField(max_length=192, blank=True)),
                ('act_kernel_build', models.IntegerField(null=True, blank=True)),
                ('kernelversion', models.CharField(max_length=192, blank=True)),
                ('stage1_flavour', models.CharField(default=b'CPIO', max_length=48, blank=True)),
                ('newimage', models.CharField(max_length=765, blank=True)),
                ('actimage', models.CharField(max_length=765, blank=True)),
                ('imageversion', models.CharField(max_length=192, blank=True)),
                ('partdev', models.CharField(max_length=192, blank=True)),
                ('fixed_partdev', models.IntegerField(null=True, blank=True)),
                ('bz2_capable', models.IntegerField(null=True, blank=True)),
                ('rsync', models.BooleanField(default=False)),
                ('rsync_compressed', models.BooleanField(default=False)),
                ('recvstate', models.TextField(default=b'not set', blank=True)),
                ('recvstate_timestamp', models.DateTimeField(null=True)),
                ('reqstate', models.TextField(default=b'not set', blank=True)),
                ('reqstate_timestamp', models.DateTimeField(null=True)),
                ('uptime', models.IntegerField(default=0)),
                ('uptime_timestamp', models.DateTimeField(default=None, null=True)),
                ('reachable_via_bootserver', models.BooleanField(default=False)),
                ('dhcp_mac', models.NullBooleanField(default=False)),
                ('dhcp_write', models.NullBooleanField(default=False)),
                ('dhcp_written', models.NullBooleanField(default=False)),
                ('dhcp_error', models.CharField(max_length=765, blank=True)),
                ('propagation_level', models.IntegerField(default=0, blank=True)),
                ('last_install', models.CharField(max_length=192, blank=True)),
                ('last_boot', models.CharField(max_length=192, blank=True)),
                ('last_kernel', models.CharField(max_length=192, blank=True)),
                ('root_passwd', models.CharField(max_length=192, blank=True)),
                ('monitor_checks', models.BooleanField(default=True, verbose_name=b'Checks enabled', db_column=b'nagios_checks')),
                ('enable_perfdata', models.BooleanField(default=True, verbose_name=b'enable perfdata, check IPMI and SNMP')),
                ('flap_detection_enabled', models.BooleanField(default=True)),
                ('show_in_bootcontrol', models.BooleanField(default=True)),
                ('uuid', models.TextField(default=b'', max_length=64)),
                ('curl', models.CharField(default=b'ssh://', max_length=512, verbose_name=b'cURL')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('automap_root_nagvis', models.BooleanField(default=False)),
                ('enabled', models.BooleanField(default=True)),
                ('md_cache_mode', models.IntegerField(default=1, choices=[(1, b'automatic (server)'), (2, b'never use cache'), (3, b'once (until successfull)')])),
                ('mon_resolve_name', models.BooleanField(default=True, verbose_name=b'Resolve to IP for monitoring')),
                ('store_rrd_data', models.BooleanField(default=True)),
                ('has_active_rrds', models.BooleanField(default=False)),
                ('active_scan', models.CharField(default=b'', max_length=16, blank=True, choices=[(b'snmp', b'SNMP'), (b'ipmi', b'IPMI'), (b'hm', b'Host monitor')])),
            ],
            options={
                'ordering': ('name',),
                'db_table': 'device',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='device_config',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'device_config_idx')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('config', models.ForeignKey(to='backbone.config', db_column=b'new_config_id')),
                ('device', models.ForeignKey(to='backbone.device')),
            ],
            options={
                'db_table': 'device_config',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='device_group',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'device_group_idx')),
                ('name', models.CharField(unique=True, max_length=192)),
                ('description', models.CharField(default=b'', max_length=384)),
                ('cluster_device_group', models.BooleanField(default=False)),
                ('enabled', models.BooleanField(default=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(related_name='group_device', db_column=b'device', blank=True, to='backbone.device', null=True)),
            ],
            options={
                'ordering': ('-cluster_device_group', 'name'),
                'db_table': 'device_group',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='device_mon_location',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('pos_x', models.IntegerField(default=0)),
                ('pos_y', models.IntegerField(default=0)),
                ('locked', models.BooleanField(default=False)),
                ('comment', models.CharField(default=b'', max_length=1024, blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(to='backbone.device')),
                ('location', models.ForeignKey(to='backbone.category')),
            ],
            options={
                'verbose_name': 'Monitoring location',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='device_rsync_config',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'device_rsync_config_idx')),
                ('last_rsync_time', models.DateTimeField(null=True, blank=True)),
                ('status', models.TextField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('config', models.ForeignKey(to='backbone.config', db_column=b'new_config_id')),
                ('device', models.ForeignKey(to='backbone.device')),
            ],
            options={
                'db_table': 'device_rsync_config',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='device_type',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'device_type_idx')),
                ('identifier', models.CharField(unique=True, max_length=24)),
                ('priority', models.IntegerField(default=0)),
                ('description', models.CharField(unique=True, max_length=192)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'device_type',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='device_variable',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'device_variable_idx')),
                ('is_public', models.BooleanField(default=True)),
                ('name', models.CharField(max_length=765)),
                ('description', models.CharField(default=b'', max_length=765, blank=True)),
                ('local_copy_ok', models.BooleanField(default=True)),
                ('inherit', models.BooleanField(default=True)),
                ('protected', models.BooleanField(default=False)),
                ('var_type', models.CharField(max_length=3, choices=[(b'i', b'integer'), (b's', b'string'), (b'd', b'datetime'), (b't', b'time'), (b'b', b'blob'), (b'?', b'guess')])),
                ('val_str', models.TextField(default=b'', null=True, blank=True)),
                ('val_int', models.IntegerField(default=0, null=True, blank=True)),
                ('val_blob', models.TextField(default=b'', null=True, blank=True)),
                ('val_date', models.DateTimeField(null=True, blank=True)),
                ('val_time', models.TextField(null=True, blank=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(to='backbone.device')),
            ],
            options={
                'ordering': ('name',),
                'db_table': 'device_variable',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='devicelog',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'devicelog_idx')),
                ('text', models.CharField(max_length=765, blank=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(blank=True, to='backbone.device', null=True)),
            ],
            options={
                'db_table': 'devicelog',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='DeviceLogEntry',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('text', models.CharField(default=b'', max_length=765)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(to='backbone.device')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='DeviceSNMPInfo',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'device_idx')),
                ('description', models.CharField(default=b'', max_length=512)),
                ('contact', models.CharField(default=b'', max_length=512)),
                ('name', models.CharField(default=b'', max_length=512)),
                ('location', models.CharField(default=b'', max_length=512)),
                ('services', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.OneToOneField(related_name='DeviceSNMPInfo', null=True, to='backbone.device')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='domain_tree_node',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(default=b'', max_length=64)),
                ('full_name', models.CharField(default=b'', max_length=256, blank=True)),
                ('node_postfix', models.CharField(default=b'', max_length=16, blank=True)),
                ('depth', models.IntegerField(default=0)),
                ('intermediate', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('create_short_names', models.BooleanField(default=True)),
                ('always_create_ip', models.BooleanField(default=False)),
                ('write_nameserver_config', models.BooleanField(default=False)),
                ('comment', models.CharField(default=b'', max_length=256, blank=True)),
                ('parent', models.ForeignKey(to='backbone.domain_tree_node', null=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ext_license',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(unique=True, max_length=128)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ext_license_check',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('run_time', models.FloatField(default=0.0)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ext_license_check_coarse',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('duration', models.IntegerField()),
                ('duration_type', models.IntegerField()),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ext_license_client',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('long_name', models.CharField(default=b'', max_length=256)),
                ('short_name', models.CharField(default=b'', max_length=128)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.SET_NULL, to='backbone.device', null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ext_license_client_version',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('client_version', models.CharField(default=b'', max_length=64)),
                ('ext_license', models.ForeignKey(to='backbone.ext_license')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ext_license_site',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(unique=True, max_length=128)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ext_license_state',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('used', models.IntegerField(default=0)),
                ('reserved', models.IntegerField(default=0)),
                ('free', models.IntegerField(default=0)),
                ('issued', models.IntegerField(default=0)),
                ('ext_license', models.ForeignKey(to='backbone.ext_license')),
                ('ext_license_check', models.ForeignKey(to='backbone.ext_license_check')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ext_license_state_coarse',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('used', models.FloatField(default=0.0)),
                ('used_min', models.IntegerField(default=0)),
                ('used_max', models.IntegerField(default=0)),
                ('issued', models.FloatField(default=0.0)),
                ('issued_min', models.IntegerField(default=0)),
                ('issued_max', models.IntegerField(default=0)),
                ('data_points', models.IntegerField()),
                ('ext_license', models.ForeignKey(to='backbone.ext_license')),
                ('ext_license_check_coarse', models.ForeignKey(to='backbone.ext_license_check_coarse')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ext_license_usage',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('checkout_time', models.IntegerField(default=0)),
                ('num', models.IntegerField(default=0)),
                ('ext_license_client', models.ForeignKey(to='backbone.ext_license_client')),
                ('ext_license_client_version', models.ForeignKey(to='backbone.ext_license_client_version', null=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ext_license_usage_coarse',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('num', models.IntegerField(default=0)),
                ('frequency', models.IntegerField()),
                ('ext_license_client', models.ForeignKey(to='backbone.ext_license_client')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ext_license_user',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(default=b'', max_length=256)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ext_license_vendor',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(default=b'', unique=True, max_length=64)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ext_license_version',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('version', models.CharField(default=b'', max_length=64)),
                ('ext_license', models.ForeignKey(to='backbone.ext_license')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ext_license_version_state',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('is_floating', models.BooleanField(default=False)),
                ('ext_license_check', models.ForeignKey(to='backbone.ext_license_check')),
                ('ext_license_state', models.ForeignKey(to='backbone.ext_license_state')),
                ('ext_license_version', models.ForeignKey(to='backbone.ext_license_version')),
                ('vendor', models.ForeignKey(to='backbone.ext_license_vendor')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ext_license_version_state_coarse',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('frequency', models.IntegerField()),
                ('ext_license_check_coarse', models.ForeignKey(to='backbone.ext_license_check_coarse')),
                ('ext_license_state_coarse', models.ForeignKey(to='backbone.ext_license_state_coarse')),
                ('ext_license_version', models.ForeignKey(to='backbone.ext_license_version')),
                ('vendor', models.ForeignKey(to='backbone.ext_license_vendor')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='group',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'ggroup_idx')),
                ('active', models.BooleanField(default=True)),
                ('groupname', models.CharField(unique=True, max_length=48, db_column=b'ggroupname')),
                ('gid', models.IntegerField(unique=True)),
                ('homestart', models.TextField(blank=True)),
                ('group_comment', models.CharField(max_length=765, blank=True)),
                ('first_name', models.CharField(max_length=765, blank=True)),
                ('last_name', models.CharField(max_length=765, blank=True)),
                ('title', models.CharField(max_length=765, blank=True)),
                ('email', models.CharField(default=b'', max_length=765, blank=True)),
                ('pager', models.CharField(default=b'', max_length=765, verbose_name=b'mobile', blank=True)),
                ('tel', models.CharField(default=b'', max_length=765, blank=True)),
                ('comment', models.CharField(max_length=765, blank=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('allowed_device_groups', models.ManyToManyField(to='backbone.device_group', blank=True)),
                ('object_permissions', models.ManyToManyField(related_name='db_group_permissions', to='backbone.csw_object_permission')),
            ],
            options={
                'ordering': ('groupname',),
                'db_table': 'ggroup',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='group_object_permission',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('level', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('csw_object_permission', models.ForeignKey(to='backbone.csw_object_permission')),
                ('group', models.ForeignKey(to='backbone.group')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='group_permission',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('level', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('csw_permission', models.ForeignKey(to='backbone.csw_permission')),
                ('group', models.ForeignKey(to='backbone.group')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='group_quota_setting',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('bytes_used', models.BigIntegerField(default=0)),
                ('bytes_soft', models.BigIntegerField(default=0)),
                ('bytes_hard', models.BigIntegerField(default=0)),
                ('bytes_gracetime', models.IntegerField(default=0)),
                ('bytes_soft_target', models.BigIntegerField(default=0)),
                ('bytes_hard_target', models.BigIntegerField(default=0)),
                ('files_used', models.BigIntegerField(default=0)),
                ('files_soft', models.BigIntegerField(default=0)),
                ('files_hard', models.BigIntegerField(default=0)),
                ('files_gracetime', models.IntegerField(default=0)),
                ('files_soft_target', models.BigIntegerField(default=0)),
                ('files_hard_target', models.BigIntegerField(default=0)),
                ('quota_flags', models.CharField(default=b'--', max_length=4)),
                ('group', models.ForeignKey(to='backbone.group')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='host_check_command',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'ng_check_command_idx')),
                ('name', models.CharField(unique=True, max_length=64)),
                ('command_line', models.CharField(unique=True, max_length=128)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='image',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'image_idx')),
                ('name', models.CharField(unique=True, max_length=192, blank=True)),
                ('source', models.CharField(max_length=384, blank=True)),
                ('version', models.IntegerField(default=1, null=True, blank=True)),
                ('release', models.IntegerField(default=0, null=True, blank=True)),
                ('builds', models.IntegerField(default=0, null=True, blank=True)),
                ('build_machine', models.CharField(default=b'', max_length=192, blank=True)),
                ('device', models.IntegerField(null=True)),
                ('build_lock', models.BooleanField(default=False)),
                ('size', models.BigIntegerField(default=0)),
                ('size_string', models.TextField(default=b'', blank=True)),
                ('sys_vendor', models.CharField(max_length=192, blank=True)),
                ('sys_version', models.CharField(max_length=192, blank=True)),
                ('sys_release', models.CharField(max_length=192, blank=True)),
                ('bitcount', models.IntegerField(null=True, blank=True)),
                ('full_build', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('enabled', models.BooleanField(default=True)),
                ('architecture', models.ForeignKey(to='backbone.architecture')),
            ],
            options={
                'ordering': ('name',),
                'db_table': 'image',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='initrd_build',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('user_name', models.CharField(default=b'root', max_length=128)),
                ('run_time', models.IntegerField(default=0)),
                ('success', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='kernel',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'kernel_idx')),
                ('name', models.CharField(max_length=384)),
                ('kernel_version', models.CharField(max_length=384)),
                ('major', models.CharField(max_length=192, blank=True)),
                ('minor', models.CharField(max_length=192, blank=True)),
                ('patchlevel', models.CharField(max_length=192, blank=True)),
                ('version', models.IntegerField(default=1, null=True, blank=True)),
                ('release', models.IntegerField(default=1, null=True, blank=True)),
                ('builds', models.IntegerField(default=0, null=True, blank=True)),
                ('build_machine', models.CharField(max_length=192, blank=True)),
                ('master_server', models.IntegerField(null=True)),
                ('master_role', models.CharField(max_length=192, blank=True)),
                ('device', models.IntegerField(null=True)),
                ('build_lock', models.BooleanField(default=False)),
                ('config_name', models.CharField(max_length=192, blank=True)),
                ('cpu_arch', models.CharField(max_length=192, blank=True)),
                ('sub_cpu_arch', models.CharField(max_length=192, blank=True)),
                ('target_dir', models.CharField(max_length=765, blank=True)),
                ('comment', models.TextField(default=b'', blank=True)),
                ('enabled', models.BooleanField(default=False)),
                ('initrd_version', models.IntegerField(null=True, blank=True)),
                ('initrd_built', models.DateTimeField(null=True, blank=True)),
                ('module_list', models.TextField(blank=True)),
                ('target_module_list', models.TextField(default=b'', blank=True)),
                ('xen_host_kernel', models.NullBooleanField(default=False)),
                ('xen_guest_kernel', models.NullBooleanField(default=False)),
                ('bitcount', models.IntegerField(null=True, blank=True)),
                ('stage1_lo_present', models.BooleanField(default=False)),
                ('stage1_cpio_present', models.BooleanField(default=False)),
                ('stage1_cramfs_present', models.BooleanField(default=False)),
                ('stage2_present', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'kernel',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='kernel_build',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'kernel_build_idx')),
                ('build_machine', models.CharField(max_length=192, blank=True)),
                ('version', models.IntegerField(null=True, blank=True)),
                ('release', models.IntegerField(null=True, blank=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(to='backbone.device', null=True)),
                ('kernel', models.ForeignKey(to='backbone.kernel')),
            ],
            options={
                'db_table': 'kernel_build',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='kernel_local_info',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'kernel_local_info_idx')),
                ('syncer_role', models.CharField(max_length=192, blank=True)),
                ('info_blob', models.TextField(blank=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(to='backbone.device')),
                ('kernel', models.ForeignKey(to='backbone.kernel')),
            ],
            options={
                'db_table': 'kernel_local_info',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='kernel_log',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'kernel_log_idx')),
                ('syncer_role', models.CharField(max_length=192, blank=True)),
                ('log_level', models.IntegerField(null=True, blank=True)),
                ('log_str', models.TextField(blank=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(to='backbone.device')),
                ('kernel', models.ForeignKey(to='backbone.kernel')),
            ],
            options={
                'db_table': 'kernel_log',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Kpi',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.TextField()),
                ('available_device_categories', models.ManyToManyField(related_name='available_device_category', to='backbone.category')),
                ('available_monitoring_categories', models.ManyToManyField(related_name='available_monitoring_category', to='backbone.category')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='kpi_selected_device_monitoring_category_tuple',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('device_category', models.ForeignKey(related_name='device_cateogory', to='backbone.category')),
                ('kpi', models.ForeignKey(to='backbone.Kpi')),
                ('monitoring_category', models.ForeignKey(related_name='monitoring_category', to='backbone.category')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='License',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('file_name', models.CharField(max_length=512)),
                ('license_file', models.TextField()),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='location_gfx',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(default=b'', unique=True, max_length=64)),
                ('image_name', models.CharField(default=b'', max_length=64, blank=True)),
                ('uuid', models.CharField(max_length=64, blank=True)),
                ('image_stored', models.BooleanField(default=False)),
                ('image_count', models.IntegerField(default=1)),
                ('width', models.IntegerField(default=0)),
                ('height', models.IntegerField(default=0)),
                ('content_type', models.CharField(default=b'', max_length=128, blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('locked', models.BooleanField(default=False)),
                ('changes', models.IntegerField(default=0)),
                ('comment', models.CharField(default=b'', max_length=1024, blank=True)),
                ('location', models.ForeignKey(to='backbone.category')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='log_source',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'log_source_idx')),
                ('identifier', models.CharField(max_length=192)),
                ('name', models.CharField(max_length=192)),
                ('description', models.CharField(max_length=765, blank=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(to='backbone.device', null=True)),
            ],
            options={
                'db_table': 'log_source',
                'verbose_name': 'Log source (old)',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='log_status',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'log_status_idx')),
                ('identifier', models.CharField(max_length=12, blank=True)),
                ('log_level', models.IntegerField(null=True, blank=True)),
                ('name', models.CharField(max_length=192, blank=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'log_status',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='login_history',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('success', models.BooleanField(default=False)),
                ('remote_addr', models.CharField(default=b'', max_length=128)),
                ('remote_host', models.CharField(default=b'', max_length=128)),
                ('http_user_agent', models.CharField(default=b'', max_length=256)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='LogLevel',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('identifier', models.CharField(unique=True, max_length=2)),
                ('level', models.IntegerField(default=20)),
                ('name', models.CharField(unique=True, max_length=32)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='LogSource',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('identifier', models.CharField(max_length=192)),
                ('description', models.CharField(default=b'', max_length=765)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(to='backbone.device', null=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='lvm_lv',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'lvm_lv_idx')),
                ('size', models.BigIntegerField(null=True, blank=True)),
                ('mountpoint', models.CharField(default=b'/', max_length=192)),
                ('mount_options', models.CharField(max_length=384, blank=True)),
                ('fs_freq', models.IntegerField(null=True, blank=True)),
                ('fs_passno', models.IntegerField(null=True, blank=True)),
                ('name', models.CharField(max_length=192)),
                ('warn_threshold', models.IntegerField(default=85, null=True, blank=True)),
                ('crit_threshold', models.IntegerField(default=95, null=True, blank=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('name',),
                'db_table': 'lvm_lv',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='lvm_vg',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'lvm_vg_idx')),
                ('name', models.CharField(max_length=192)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('name',),
                'db_table': 'lvm_vg',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='mac_ignore',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'mac_ignore_idx')),
                ('macaddr', models.CharField(default=b'00:00:00:00:00:00', max_length=192, db_column=b'macadr')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'db_table': 'mac_ignore',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='macbootlog',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'macbootlog_idx')),
                ('entry_type', models.CharField(default=b'???', max_length=96, db_column=b'type')),
                ('ip_action', models.CharField(default=b'0.0.0.0', max_length=96, db_column=b'ip')),
                ('macaddr', models.CharField(default=b'00:00:00:00:00:00', max_length=192, db_column=b'macadr')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(to='backbone.device', null=True)),
                ('log_source', models.ForeignKey(to='backbone.log_source', null=True)),
            ],
            options={
                'db_table': 'macbootlog',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='MachineVector',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('src_file_name', models.CharField(default=b'', max_length=256, blank=True)),
                ('dir_name', models.CharField(default=b'', max_length=128)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(to='backbone.device')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='mon_build_unreachable',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('device_pk', models.IntegerField(default=0)),
                ('device_name', models.CharField(default=b'', max_length=256)),
                ('devicegroup_name', models.CharField(default=b'', max_length=256)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='mon_check_command',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'ng_check_command_idx')),
                ('config_old', models.IntegerField(null=True, db_column=b'config', blank=True)),
                ('name', models.CharField(max_length=192)),
                ('command_line', models.CharField(default=b'', max_length=765)),
                ('description', models.CharField(max_length=192, blank=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('enable_perfdata', models.BooleanField(default=False)),
                ('volatile', models.BooleanField(default=False)),
                ('is_event_handler', models.BooleanField(default=False)),
                ('event_handler_enabled', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('tcp_coverage', models.CharField(default=b'', max_length=256, blank=True)),
                ('categories', models.ManyToManyField(to='backbone.category', blank=True)),
                ('config', models.ForeignKey(to='backbone.config', db_column=b'new_config_id')),
                ('event_handler', models.ForeignKey(default=None, blank=True, to='backbone.mon_check_command', null=True)),
                ('exclude_devices', models.ManyToManyField(related_name='mcc_exclude_devices', to='backbone.device', blank=True)),
            ],
            options={
                'db_table': 'ng_check_command',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='mon_check_command_special',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=64)),
                ('info', models.CharField(default=b'', max_length=64)),
                ('command_line', models.CharField(default=b'', max_length=512)),
                ('description', models.CharField(default=b'', max_length=512)),
                ('is_active', models.BooleanField(default=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('meta', models.BooleanField(default=False)),
                ('identifier', models.CharField(default=b'', max_length=64)),
                ('parent', models.ForeignKey(to='backbone.mon_check_command_special', null=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='mon_check_command_type',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'ng_check_command_type_idx')),
                ('name', models.CharField(unique=True, max_length=192)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'ng_check_command_type',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='mon_contact',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'ng_contact_idx')),
                ('snrecovery', models.BooleanField(default=False, verbose_name=b'Notify on service recovery')),
                ('sncritical', models.BooleanField(default=False, verbose_name=b'Notify on service critical')),
                ('snwarning', models.BooleanField(default=False, verbose_name=b'Notify on service warning')),
                ('snunknown', models.BooleanField(default=False, verbose_name=b'Notify on service unknown')),
                ('sflapping', models.BooleanField(default=False, verbose_name=b'Notify on service flapping')),
                ('splanned_downtime', models.BooleanField(default=False, verbose_name=b'Notify on service planned downtime')),
                ('hnrecovery', models.BooleanField(default=False, verbose_name=b'Notify on host recovery')),
                ('hndown', models.BooleanField(default=False, verbose_name=b'Notify on host down')),
                ('hnunreachable', models.BooleanField(default=False, verbose_name=b'Notify on host unreachable')),
                ('hflapping', models.BooleanField(default=False, verbose_name=b'Notify on host flapping')),
                ('hplanned_downtime', models.BooleanField(default=False, verbose_name=b'Notify on host planned downtime')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('mon_alias', models.CharField(default=b'', max_length=64, verbose_name=b'alias', blank=True)),
            ],
            options={
                'db_table': 'ng_contact',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='mon_contactgroup',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'ng_contactgroup_idx')),
                ('name', models.CharField(unique=True, max_length=192)),
                ('alias', models.CharField(default=b'', max_length=255, blank=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device_groups', models.ManyToManyField(to='backbone.device_group', blank=True)),
                ('members', models.ManyToManyField(to='backbone.mon_contact', blank=True)),
            ],
            options={
                'db_table': 'ng_contactgroup',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='mon_device_esc_templ',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=192)),
                ('first_notification', models.IntegerField(default=1)),
                ('last_notification', models.IntegerField(default=1)),
                ('ninterval', models.IntegerField(default=1)),
                ('nrecovery', models.BooleanField(default=False, verbose_name=b'Notify on recovery')),
                ('ndown', models.BooleanField(default=False, verbose_name=b'Notify when down')),
                ('nunreachable', models.BooleanField(default=False, verbose_name=b'Notify when unreachable')),
                ('nflapping', models.BooleanField(default=False, verbose_name=b'Notify when flapping')),
                ('nplanned_downtime', models.BooleanField(default=False, verbose_name=b'Notify on planned downtime')),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='mon_device_templ',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'ng_device_templ_idx')),
                ('name', models.CharField(unique=True, max_length=192)),
                ('check_interval', models.IntegerField(default=1)),
                ('retry_interval', models.IntegerField(default=1)),
                ('max_attempts', models.IntegerField(default=1, null=True, blank=True)),
                ('ninterval', models.IntegerField(default=1, null=True, blank=True)),
                ('nrecovery', models.BooleanField(default=False, verbose_name=b'Notify on recovery')),
                ('ndown', models.BooleanField(default=False, verbose_name=b'Notify when down')),
                ('nunreachable', models.BooleanField(default=False, verbose_name=b'Notify when unreachable')),
                ('nflapping', models.BooleanField(default=False, verbose_name=b'Notify when flapping')),
                ('nplanned_downtime', models.BooleanField(default=False, verbose_name=b'Notify for planned downtime')),
                ('is_default', models.BooleanField(default=False)),
                ('low_flap_threshold', models.IntegerField(default=0)),
                ('high_flap_threshold', models.IntegerField(default=0)),
                ('flap_detection_enabled', models.BooleanField(default=False)),
                ('flap_detect_up', models.BooleanField(default=True)),
                ('flap_detect_down', models.BooleanField(default=False)),
                ('flap_detect_unreachable', models.BooleanField(default=False)),
                ('check_freshness', models.BooleanField(default=False)),
                ('freshness_threshold', models.IntegerField(default=60)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('host_check_command', models.ForeignKey(to='backbone.host_check_command', null=True)),
            ],
            options={
                'db_table': 'ng_device_templ',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='mon_dist_master',
            fields=[
                ('config_build_start', models.DateTimeField(default=None, null=True)),
                ('config_build_end', models.DateTimeField(default=None, null=True)),
                ('relayer_version', models.CharField(default=b'', max_length=128)),
                ('mon_version', models.CharField(default=b'', max_length=128)),
                ('build_start', models.DateTimeField(default=None, null=True)),
                ('build_end', models.DateTimeField(default=None, null=True)),
                ('num_devices', models.IntegerField(default=0)),
                ('unreachable_devices', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('version', models.IntegerField(default=0)),
                ('md_version', models.CharField(default=b'', max_length=128)),
                ('device', models.ForeignKey(to='backbone.device')),
            ],
            options={
                'ordering': ('-idx',),
                'verbose_name': 'Config builds as master',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='mon_dist_slave',
            fields=[
                ('config_build_start', models.DateTimeField(default=None, null=True)),
                ('config_build_end', models.DateTimeField(default=None, null=True)),
                ('relayer_version', models.CharField(default=b'', max_length=128)),
                ('mon_version', models.CharField(default=b'', max_length=128)),
                ('build_start', models.DateTimeField(default=None, null=True)),
                ('build_end', models.DateTimeField(default=None, null=True)),
                ('num_devices', models.IntegerField(default=0)),
                ('unreachable_devices', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('sync_start', models.DateTimeField(default=None, null=True)),
                ('sync_end', models.DateTimeField(default=None, null=True)),
                ('num_runs', models.IntegerField(default=0)),
                ('num_files', models.IntegerField(default=0)),
                ('num_transfers', models.IntegerField(default=0)),
                ('size_data', models.IntegerField(default=0)),
                ('size_raw', models.IntegerField(default=0)),
                ('device', models.ForeignKey(to='backbone.device')),
                ('mon_dist_master', models.ForeignKey(to='backbone.mon_dist_master')),
            ],
            options={
                'verbose_name': 'Config builds as slave',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='mon_ext_host',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'ng_ext_host_idx')),
                ('name', models.CharField(unique=True, max_length=192)),
                ('icon_image', models.CharField(max_length=192, blank=True)),
                ('icon_image_alt', models.CharField(max_length=192, blank=True)),
                ('vrml_image', models.CharField(max_length=192, blank=True)),
                ('statusmap_image', models.CharField(max_length=192, blank=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('name',),
                'db_table': 'ng_ext_host',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='mon_host_cluster',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=128)),
                ('description', models.CharField(default=b'', max_length=255)),
                ('warn_value', models.IntegerField(default=0)),
                ('error_value', models.IntegerField(default=1)),
                ('user_editable', models.BooleanField(default=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('devices', models.ManyToManyField(related_name='devs_mon_host_cluster', to='backbone.device')),
                ('main_device', models.ForeignKey(related_name='main_mon_host_cluster', to='backbone.device')),
            ],
            options={
                'verbose_name': 'Host Cluster',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='mon_host_dependency',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('dependent_devices', models.ManyToManyField(related_name='mhd_dependent_devices', to='backbone.device')),
                ('devices', models.ManyToManyField(related_name='mhd_devices', to='backbone.device', blank=True)),
                ('mon_host_cluster', models.ForeignKey(blank=True, to='backbone.mon_host_cluster', null=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='mon_host_dependency_templ',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=192)),
                ('inherits_parent', models.BooleanField(default=False)),
                ('priority', models.IntegerField(default=0)),
                ('efc_up', models.BooleanField(default=False)),
                ('efc_down', models.BooleanField(default=True)),
                ('efc_unreachable', models.BooleanField(default=True)),
                ('efc_pending', models.BooleanField(default=False)),
                ('nfc_up', models.BooleanField(default=False)),
                ('nfc_down', models.BooleanField(default=True)),
                ('nfc_unreachable', models.BooleanField(default=True)),
                ('nfc_pending', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='mon_icinga_log_aggregated_host_data',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('state_type', models.CharField(max_length=2, choices=[(b'H', b'HARD'), (b'S', b'SOFT'), (b'UD', b'UD'), (b'FL', b'FL')])),
                ('state', models.CharField(max_length=2, choices=[(b'UP', b'UP'), (b'D', b'DOWN'), (b'UR', b'UNREACHABLE'), (b'UD', b'UNDETERMINED'), (b'FL', b'FLAPPING')])),
                ('value', models.FloatField()),
                ('device', models.ForeignKey(to='backbone.device')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='mon_icinga_log_aggregated_service_data',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('state_type', models.CharField(max_length=2, choices=[(b'H', b'HARD'), (b'S', b'SOFT'), (b'UD', b'UD'), (b'FL', b'FL')])),
                ('state', models.CharField(max_length=2, choices=[(b'O', b'OK'), (b'W', b'WARNING'), (b'U', b'UNKNOWN'), (b'C', b'CRITICAL'), (b'UD', b'UNDETERMINED'), (b'FL', b'FLAPPING')])),
                ('service_info', models.TextField(null=True, blank=True)),
                ('value', models.FloatField()),
                ('device', models.ForeignKey(to='backbone.device')),
                ('service', models.ForeignKey(to='backbone.mon_check_command', null=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='mon_icinga_log_aggregated_timespan',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('end_date', models.DateTimeField()),
                ('start_date', models.DateTimeField(db_index=True)),
                ('duration', models.IntegerField()),
                ('duration_type', models.IntegerField(db_index=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='mon_icinga_log_file',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('filepath', models.TextField()),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='mon_icinga_log_full_system_dump',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('date', models.DateTimeField(db_index=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='mon_icinga_log_last_read',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('position', models.BigIntegerField()),
                ('timestamp', models.IntegerField()),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='mon_icinga_log_raw_host_alert_data',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('date', models.DateTimeField(db_index=True)),
                ('device_independent', models.BooleanField(default=False, db_index=True)),
                ('msg', models.TextField()),
                ('state_type', models.CharField(max_length=2, choices=[(b'H', b'HARD'), (b'S', b'SOFT'), (b'UD', b'UD')])),
                ('state', models.CharField(max_length=2, choices=[(b'UP', b'UP'), (b'D', b'DOWN'), (b'UR', b'UNREACHABLE'), (b'UD', b'UNDETERMINED')])),
                ('log_rotation_state', models.BooleanField(default=False)),
                ('initial_state', models.BooleanField(default=False)),
                ('device', models.ForeignKey(to='backbone.device', null=True)),
                ('logfile', models.ForeignKey(blank=True, to='backbone.mon_icinga_log_file', null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='mon_icinga_log_raw_host_flapping_data',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('date', models.DateTimeField(db_index=True)),
                ('device_independent', models.BooleanField(default=False, db_index=True)),
                ('msg', models.TextField()),
                ('flapping_state', models.CharField(max_length=5, choices=[(b'START', b'START'), (b'STOP', b'STOP')])),
                ('device', models.ForeignKey(to='backbone.device', null=True)),
                ('logfile', models.ForeignKey(blank=True, to='backbone.mon_icinga_log_file', null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='mon_icinga_log_raw_host_notification_data',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('date', models.DateTimeField(db_index=True)),
                ('device_independent', models.BooleanField(default=False, db_index=True)),
                ('msg', models.TextField()),
                ('state', models.CharField(max_length=2, choices=[(b'UP', b'UP'), (b'D', b'DOWN'), (b'UR', b'UNREACHABLE'), (b'UD', b'UNDETERMINED')])),
                ('user', models.TextField()),
                ('notification_type', models.TextField()),
                ('device', models.ForeignKey(to='backbone.device', null=True)),
                ('logfile', models.ForeignKey(blank=True, to='backbone.mon_icinga_log_file', null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        )
    ]
    if db_limit_1():
        operations.append(
            migrations.CreateModel(
                name='mon_icinga_log_raw_service_alert_data',
                fields=[
                    ('idx', models.AutoField(serialize=False, primary_key=True)),
                    ('date', models.DateTimeField(db_index=True)),
                    ('device_independent', models.BooleanField(default=False, db_index=True)),
                    ('msg', models.TextField()),
                    ('service_info', models.TextField(null=True, blank=True)),
                    ('state_type', models.CharField(max_length=2, choices=[(b'H', b'HARD'), (b'S', b'SOFT'), (b'UD', b'UD')])),
                    ('state', models.CharField(max_length=2, choices=[(b'O', b'OK'), (b'W', b'WARNING'), (b'U', b'UNKNOWN'), (b'C', b'CRITICAL'), (b'UD', b'UNDETERMINED')])),
                    ('log_rotation_state', models.BooleanField(default=False)),
                    ('initial_state', models.BooleanField(default=False)),
                    ('device', models.ForeignKey(to='backbone.device', null=True)),
                    ('logfile', models.ForeignKey(blank=True, to='backbone.mon_icinga_log_file', null=True)),
                    ('service', models.ForeignKey(to='backbone.mon_check_command', null=True)),
                ],
                options={
                    'abstract': False,
                },
                bases=(models.Model,),
            )
        )
    else:
        operations.append(
            migrations.CreateModel(
                name='mon_icinga_log_raw_service_alert_data',
                fields=[
                    ('idx', models.AutoField(serialize=False, primary_key=True)),
                    ('date', models.DateTimeField(db_index=True)),
                    ('device_independent', models.BooleanField(default=False, db_index=True)),
                    ('msg', models.TextField()),
                    ('service_info', models.TextField(db_index=True, null=True, blank=True)),
                    ('state_type', models.CharField(max_length=2, choices=[(b'H', b'HARD'), (b'S', b'SOFT'), (b'UD', b'UD')])),
                    ('state', models.CharField(max_length=2, choices=[(b'O', b'OK'), (b'W', b'WARNING'), (b'U', b'UNKNOWN'), (b'C', b'CRITICAL'), (b'UD', b'UNDETERMINED')])),
                    ('log_rotation_state', models.BooleanField(default=False)),
                    ('initial_state', models.BooleanField(default=False)),
                    ('device', models.ForeignKey(to='backbone.device', null=True)),
                    ('logfile', models.ForeignKey(blank=True, to='backbone.mon_icinga_log_file', null=True)),
                    ('service', models.ForeignKey(to='backbone.mon_check_command', null=True)),
                ],
                options={
                    'abstract': False,
                },
                bases=(models.Model,),
            )
        )
    operations.extend([
        migrations.CreateModel(
            name='mon_icinga_log_raw_service_flapping_data',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('date', models.DateTimeField(db_index=True)),
                ('device_independent', models.BooleanField(default=False, db_index=True)),
                ('msg', models.TextField()),
                ('service_info', models.TextField(null=True, blank=True)),
                ('flapping_state', models.CharField(max_length=5, choices=[(b'START', b'START'), (b'STOP', b'STOP')])),
                ('device', models.ForeignKey(to='backbone.device', null=True)),
                ('logfile', models.ForeignKey(blank=True, to='backbone.mon_icinga_log_file', null=True)),
                ('service', models.ForeignKey(to='backbone.mon_check_command', null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='mon_icinga_log_raw_service_notification_data',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('date', models.DateTimeField(db_index=True)),
                ('device_independent', models.BooleanField(default=False, db_index=True)),
                ('msg', models.TextField()),
                ('service_info', models.TextField(null=True, blank=True)),
                ('state', models.CharField(max_length=2, choices=[(b'O', b'OK'), (b'W', b'WARNING'), (b'U', b'UNKNOWN'), (b'C', b'CRITICAL'), (b'UD', b'UNDETERMINED')])),
                ('user', models.TextField()),
                ('notification_type', models.TextField()),
                ('device', models.ForeignKey(to='backbone.device', null=True)),
                ('logfile', models.ForeignKey(blank=True, to='backbone.mon_icinga_log_file', null=True)),
                ('service', models.ForeignKey(to='backbone.mon_check_command', null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='mon_notification',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=128)),
                ('channel', models.CharField(max_length=8, choices=[(b'mail', b'E-Mail'), (b'sms', b'SMS')])),
                ('not_type', models.CharField(max_length=8, verbose_name=b'Notification type', choices=[(b'host', b'Host'), (b'service', b'Service')])),
                ('subject', models.CharField(max_length=140, blank=True)),
                # manual change for initial DB setup (Oracle)
                ('content', models.CharField(max_length=255)),
                ('enabled', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='mon_period',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'ng_period_idx')),
                ('name', models.CharField(default=b'', unique=True, max_length=192)),
                ('alias', models.CharField(default=b'', unique=True, max_length=255, blank=True)),
                ('sun_range', models.CharField(max_length=48, db_column=b'sunrange', blank=True)),
                ('mon_range', models.CharField(max_length=48, db_column=b'monrange', blank=True)),
                ('tue_range', models.CharField(max_length=48, db_column=b'tuerange', blank=True)),
                ('wed_range', models.CharField(max_length=48, db_column=b'wedrange', blank=True)),
                ('thu_range', models.CharField(max_length=48, db_column=b'thurange', blank=True)),
                ('fri_range', models.CharField(max_length=48, db_column=b'frirange', blank=True)),
                ('sat_range', models.CharField(max_length=48, db_column=b'satrange', blank=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'ng_period',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='mon_service_cluster',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=128)),
                ('description', models.CharField(default=b'', max_length=255)),
                ('warn_value', models.IntegerField(default=0)),
                ('error_value', models.IntegerField(default=1)),
                ('user_editable', models.BooleanField(default=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('devices', models.ManyToManyField(related_name='devs_mon_service_cluster', to='backbone.device')),
                ('main_device', models.ForeignKey(related_name='main_mon_service_cluster', to='backbone.device')),
                ('mon_check_command', models.ForeignKey(to='backbone.mon_check_command')),
            ],
            options={
                'verbose_name': 'Service Cluster',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='mon_service_dependency',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('dependent_devices', models.ManyToManyField(related_name='msd_dependent_devices', to='backbone.device')),
                ('dependent_mon_check_command', models.ForeignKey(related_name='msd_dependent_mcc', to='backbone.mon_check_command')),
                ('devices', models.ManyToManyField(related_name='msd_devices', to='backbone.device', blank=True)),
                ('mon_check_command', models.ForeignKey(related_name='msd_mcc', to='backbone.mon_check_command')),
                ('mon_service_cluster', models.ForeignKey(blank=True, to='backbone.mon_service_cluster', null=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='mon_service_dependency_templ',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=192)),
                ('inherits_parent', models.BooleanField(default=False)),
                ('priority', models.IntegerField(default=0)),
                ('efc_ok', models.BooleanField(default=False)),
                ('efc_warn', models.BooleanField(default=True)),
                ('efc_unknown', models.BooleanField(default=True)),
                ('efc_critical', models.BooleanField(default=False)),
                ('efc_pending', models.BooleanField(default=False)),
                ('nfc_ok', models.BooleanField(default=False)),
                ('nfc_warn', models.BooleanField(default=True)),
                ('nfc_unknown', models.BooleanField(default=True)),
                ('nfc_critical', models.BooleanField(default=False)),
                ('nfc_pending', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('dependency_period', models.ForeignKey(to='backbone.mon_period')),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='mon_service_esc_templ',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=192)),
                ('first_notification', models.IntegerField(default=1)),
                ('last_notification', models.IntegerField(default=1)),
                ('ninterval', models.IntegerField(default=1)),
                ('nrecovery', models.BooleanField(default=False)),
                ('ncritical', models.BooleanField(default=False)),
                ('nwarning', models.BooleanField(default=False)),
                ('nunknown', models.BooleanField(default=False)),
                ('nflapping', models.BooleanField(default=False)),
                ('nplanned_downtime', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('esc_period', models.ForeignKey(to='backbone.mon_period')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='mon_service_templ',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'ng_service_templ_idx')),
                ('name', models.CharField(unique=True, max_length=192)),
                ('volatile', models.BooleanField(default=False)),
                ('max_attempts', models.IntegerField(default=1)),
                ('check_interval', models.IntegerField(default=5)),
                ('retry_interval', models.IntegerField(default=10)),
                ('ninterval', models.IntegerField(default=5)),
                ('nrecovery', models.BooleanField(default=False, verbose_name=b'Notify on recovery')),
                ('ncritical', models.BooleanField(default=False, verbose_name=b'Notify when critical')),
                ('nwarning', models.BooleanField(default=False, verbose_name=b'Notify when warning')),
                ('nunknown', models.BooleanField(default=False, verbose_name=b'Notify when unknown')),
                ('nflapping', models.BooleanField(default=False, verbose_name=b'Notify when flapping')),
                ('nplanned_downtime', models.BooleanField(default=False, verbose_name=b'Notify when planned downtime')),
                ('low_flap_threshold', models.IntegerField(default=0)),
                ('high_flap_threshold', models.IntegerField(default=0)),
                ('flap_detection_enabled', models.BooleanField(default=False)),
                ('flap_detect_ok', models.BooleanField(default=True)),
                ('flap_detect_warn', models.BooleanField(default=False)),
                ('flap_detect_critical', models.BooleanField(default=False)),
                ('flap_detect_unknown', models.BooleanField(default=False)),
                ('check_freshness', models.BooleanField(default=False)),
                ('freshness_threshold', models.IntegerField(default=60)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('nsc_period', models.ForeignKey(related_name='service_check_period', to='backbone.mon_period')),
                ('nsn_period', models.ForeignKey(related_name='service_notify_period', to='backbone.mon_period')),
            ],
            options={
                'db_table': 'ng_service_templ',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='mon_trace',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('dev_netdevice_fp', models.CharField(default=b'', max_length=128, db_index=True)),
                ('srv_netdevice_fp', models.CharField(default=b'', max_length=128, db_index=True)),
                ('traces', models.TextField(default=b'')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(to='backbone.device')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='monitoring_hint',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('call_idx', models.IntegerField(default=0)),
                ('m_type', models.CharField(max_length=32)),
                ('key', models.CharField(default=b'', max_length=255)),
                ('v_type', models.CharField(default=b'f', max_length=6, choices=[(b'f', b'float'), (b'i', b'integer'), (b'b', b'boolean'), (b's', b'string')])),
                ('value_float', models.FloatField(default=0.0)),
                ('value_int', models.IntegerField(default=0)),
                ('value_string', models.CharField(default=b'', max_length=256, blank=True)),
                ('lower_crit_float', models.FloatField(default=0.0)),
                ('lower_warn_float', models.FloatField(default=0.0)),
                ('upper_warn_float', models.FloatField(default=0.0)),
                ('upper_crit_float', models.FloatField(default=0.0)),
                ('lower_crit_int', models.IntegerField(default=0)),
                ('lower_warn_int', models.IntegerField(default=0)),
                ('upper_warn_int', models.IntegerField(default=0)),
                ('upper_crit_int', models.IntegerField(default=0)),
                ('lower_crit_float_source', models.CharField(default=b'n', max_length=4, choices=[(b'n', b'not set'), (b's', b'system'), (b'u', b'user')])),
                ('lower_warn_float_source', models.CharField(default=b'n', max_length=4, choices=[(b'n', b'not set'), (b's', b'system'), (b'u', b'user')])),
                ('upper_warn_float_source', models.CharField(default=b'n', max_length=4, choices=[(b'n', b'not set'), (b's', b'system'), (b'u', b'user')])),
                ('upper_crit_float_source', models.CharField(default=b'n', max_length=4, choices=[(b'n', b'not set'), (b's', b'system'), (b'u', b'user')])),
                ('lower_crit_int_source', models.CharField(default=b'n', max_length=4, choices=[(b'n', b'not set'), (b's', b'system'), (b'u', b'user')])),
                ('lower_warn_int_source', models.CharField(default=b'n', max_length=4, choices=[(b'n', b'not set'), (b's', b'system'), (b'u', b'user')])),
                ('upper_warn_int_source', models.CharField(default=b'n', max_length=4, choices=[(b'n', b'not set'), (b's', b'system'), (b'u', b'user')])),
                ('upper_crit_int_source', models.CharField(default=b'n', max_length=4, choices=[(b'n', b'not set'), (b's', b'system'), (b'u', b'user')])),
                ('info', models.CharField(default=b'', max_length=255)),
                ('enabled', models.BooleanField(default=True)),
                ('check_created', models.BooleanField(default=False)),
                ('changed', models.DateTimeField(auto_now=True)),
                ('persistent', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('datasource', models.CharField(default=b's', max_length=6, choices=[(b'c', b'cache'), (b's', b'server'), (b'p', b'persistent')])),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(to='backbone.device')),
            ],
            options={
                'ordering': ('m_type', 'key'),
                'verbose_name': 'Monitoring hint',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='MVStructEntry',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('file_name', models.CharField(default=b'', max_length=256)),
                ('se_type', models.CharField(max_length=6, choices=[(b'pde', b'pde'), (b'mvl', b'mvl'), (b'mve', b'mve')])),
                ('type_instance', models.CharField(default=b'', max_length=16)),
                ('key', models.CharField(max_length=256)),
                ('is_active', models.BooleanField(default=True)),
                ('last_update', models.DateTimeField(auto_now=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('machine_vector', models.ForeignKey(to='backbone.MachineVector')),
            ],
            options={
                'ordering': ('key',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='MVValueEntry',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('base', models.IntegerField(default=1024)),
                ('factor', models.IntegerField(default=1)),
                ('unit', models.CharField(default=b'', max_length=16)),
                ('v_type', models.CharField(default=b'f', max_length=3, choices=[(b'i', b'int'), (b'f', b'float')])),
                ('info', models.CharField(default=b'', max_length=256)),
                ('key', models.CharField(default=b'', max_length=128)),
                ('full_key', models.CharField(default=b'', max_length=128)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('mv_struct_entry', models.ForeignKey(to='backbone.MVStructEntry')),
            ],
            options={
                'ordering': ('key',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='net_ip',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'netip_idx')),
                ('ip', models.CharField(max_length=48)),
                ('penalty', models.IntegerField(default=0, verbose_name=b'cost')),
                ('alias', models.CharField(default=b'', max_length=765, blank=True)),
                ('alias_excl', models.NullBooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('domain_tree_node', models.ForeignKey(default=None, to='backbone.domain_tree_node', null=True)),
            ],
            options={
                'db_table': 'netip',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='netdevice',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'netdevice_idx')),
                ('devname', models.CharField(max_length=64)),
                ('macaddr', models.CharField(default=b'', max_length=177, db_column=b'macadr', blank=True)),
                ('driver_options', models.CharField(max_length=672, blank=True)),
                ('speed', models.IntegerField(default=0, null=True, blank=True)),
                ('driver', models.CharField(default=b'e1000e', max_length=384, blank=True)),
                ('routing', models.BooleanField(default=False)),
                ('inter_device_routing', models.BooleanField(default=True)),
                ('penalty', models.IntegerField(default=1, null=True, verbose_name=b'cost', blank=True)),
                ('dhcp_device', models.NullBooleanField(default=False)),
                ('ethtool_options', models.IntegerField(default=0, null=True, blank=True)),
                ('fake_macaddr', models.CharField(default=b'', max_length=177, db_column=b'fake_macadr', blank=True)),
                ('description', models.CharField(max_length=765, blank=True)),
                ('is_bridge', models.BooleanField(default=False)),
                ('bridge_name', models.CharField(max_length=765, blank=True)),
                ('vlan_id', models.IntegerField(default=0, null=True, blank=True)),
                ('enabled', models.BooleanField(default=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('mtu', models.IntegerField(default=1500)),
                ('snmp_idx', models.IntegerField(default=0)),
                ('force_network_device_type_match', models.BooleanField(default=True)),
                ('snmp_admin_status', models.IntegerField(default=0)),
                ('snmp_oper_status', models.IntegerField(default=0)),
                ('bridge_device', models.ForeignKey(related_name='bridge_slaves', blank=True, to='backbone.netdevice', null=True)),
                ('device', models.ForeignKey(to='backbone.device')),
                ('master_device', models.ForeignKey(related_name='vlan_slaves', blank=True, to='backbone.netdevice', null=True)),
            ],
            options={
                'ordering': ('snmp_idx', 'devname'),
                'db_table': 'netdevice',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='netdevice_speed',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'netdevice_speed_idx')),
                ('speed_bps', models.BigIntegerField(null=True, blank=True)),
                ('check_via_ethtool', models.BooleanField(default=True)),
                ('full_duplex', models.BooleanField(default=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('speed_bps', 'full_duplex'),
                'db_table': 'netdevice_speed',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='network',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'network_idx')),
                ('identifier', models.CharField(unique=True, max_length=255)),
                ('short_names', models.BooleanField(default=True)),
                ('name', models.CharField(default=b'', max_length=192, blank=True)),
                ('penalty', models.PositiveIntegerField(default=1, verbose_name=b'cost')),
                ('postfix', models.CharField(default=b'', max_length=12, blank=True)),
                ('info', models.CharField(max_length=255, blank=True)),
                ('network', models.GenericIPAddressField()),
                ('netmask', models.GenericIPAddressField()),
                ('broadcast', models.GenericIPAddressField()),
                ('gateway', models.GenericIPAddressField()),
                ('gw_pri', models.IntegerField(default=1, null=True, blank=True)),
                ('write_bind_config', models.BooleanField(default=False)),
                ('write_other_network_config', models.BooleanField(default=False)),
                ('start_range', models.GenericIPAddressField(default=b'0.0.0.0')),
                ('end_range', models.GenericIPAddressField(default=b'0.0.0.0')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('enforce_unique_ips', models.BooleanField(default=False)),
                ('master_network', models.ForeignKey(related_name='rel_master_network', blank=True, to='backbone.network', null=True)),
            ],
            options={
                'db_table': 'network',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='network_device_type',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'network_device_type_idx')),
                ('identifier', models.CharField(unique=True, max_length=48)),
                ('name_re', models.CharField(default=b'^.*$', max_length=128)),
                ('description', models.CharField(max_length=192)),
                ('mac_bytes', models.PositiveIntegerField(default=6)),
                ('allow_virtual_interfaces', models.BooleanField(default=True)),
                ('for_matching', models.BooleanField(default=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'network_device_type',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='network_type',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'network_type_idx')),
                ('identifier', models.CharField(unique=True, max_length=3, choices=[(b'b', b'boot'), (b'p', b'prod'), (b's', b'slave'), (b'o', b'other'), (b'l', b'local')])),
                ('description', models.CharField(max_length=192)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'network_type',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='package',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'package_idx')),
                ('name', models.CharField(max_length=128)),
                ('version', models.CharField(max_length=128)),
                ('kind', models.CharField(default=b'package', max_length=16, choices=[(b'package', b'Package'), (b'patch', b'Patch')])),
                ('always_latest', models.BooleanField(default=False)),
                ('arch', models.CharField(default=b'', max_length=32)),
                ('size', models.IntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'package',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='package_device_connection',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('target_state', models.CharField(default=b'keep', max_length=8, choices=[(b'keep', b'keep'), (b'install', b'install'), (b'upgrade', b'upgrade'), (b'erase', b'erase')])),
                ('installed', models.CharField(default=b'u', max_length=8, choices=[(b'u', b'unknown'), (b'y', b'yes'), (b'n', b'no')])),
                ('force_flag', models.BooleanField(default=False)),
                ('nodeps_flag', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('response_type', models.CharField(default=b'zypper_xml', max_length=16, choices=[(b'zypper_xml', b'zypper_xml'), (b'yum_flat', b'yum_flat'), (b'unknown', b'unknown')])),
                ('response_str', models.TextField(default=b'', max_length=65535)),
                ('install_time', models.IntegerField(default=0)),
                ('installed_name', models.CharField(default=b'', max_length=255)),
                ('installed_version', models.CharField(default=b'', max_length=255)),
                ('installed_release', models.CharField(default=b'', max_length=255)),
                ('image_dep', models.BooleanField(default=False)),
                ('kernel_dep', models.BooleanField(default=False)),
                ('device', models.ForeignKey(to='backbone.device')),
                ('image_list', models.ManyToManyField(to='backbone.image', blank=True)),
                ('kernel_list', models.ManyToManyField(to='backbone.kernel', blank=True)),
                ('package', models.ForeignKey(to='backbone.package')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='package_repo',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(default=b'', unique=True, max_length=128)),
                ('alias', models.CharField(default=b'', max_length=128)),
                ('repo_type', models.CharField(default=b'', max_length=128)),
                ('enabled', models.BooleanField(default=True)),
                ('autorefresh', models.BooleanField(default=True)),
                ('gpg_check', models.BooleanField(default=True)),
                ('url', models.CharField(default=b'', max_length=384)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('publish_to_nodes', models.BooleanField(default=False, verbose_name=b'PublishFlag')),
                ('priority', models.IntegerField(default=99)),
                ('system_type', models.CharField(default=b'zypper', max_length=64, choices=[(b'zypper', b'zypper (suse)'), (b'yum', b'yum (redhat)')])),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='package_search',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('search_string', models.CharField(default=b'', max_length=128)),
                ('last_search_string', models.CharField(default=b'', max_length=128, blank=True)),
                ('num_searches', models.IntegerField(default=0)),
                ('current_state', models.CharField(default=b'ini', max_length=6, choices=[(b'ini', b'initialised'), (b'wait', b'waiting'), (b'run', b'search running'), (b'done', b'search done')])),
                ('deleted', models.BooleanField(default=False)),
                ('results', models.IntegerField(default=0)),
                ('last_search', models.DateTimeField(auto_now_add=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('search_string', 'results'),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='package_search_result',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(default=b'', max_length=128)),
                ('kind', models.CharField(default=b'package', max_length=16, choices=[(b'package', b'Package'), (b'patch', b'Patch')])),
                ('arch', models.CharField(default=b'', max_length=32)),
                ('version', models.CharField(default=b'', max_length=128)),
                ('copied', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('package_repo', models.ForeignKey(to='backbone.package_repo', null=True)),
                ('package_search', models.ForeignKey(to='backbone.package_search')),
            ],
            options={
                'ordering': ('name', 'arch', 'version'),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='package_service',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=128)),
                ('enabled', models.BooleanField(default=True)),
                ('alias', models.CharField(default=True, max_length=128)),
                ('autorefresh', models.BooleanField(default=True)),
                ('url', models.CharField(default=b'', max_length=256)),
                ('type', models.CharField(default=b'ris', max_length=64)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='partition',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'partition_idx')),
                ('mountpoint', models.CharField(default=b'/', max_length=192, blank=True)),
                ('partition_hex', models.CharField(max_length=6, blank=True)),
                ('size', models.IntegerField(default=100, null=True, blank=True)),
                ('mount_options', models.CharField(default=b'defaults', max_length=255, blank=True)),
                ('pnum', models.IntegerField()),
                ('bootable', models.BooleanField(default=False)),
                ('fs_freq', models.IntegerField(default=0, null=True, blank=True)),
                ('fs_passno', models.IntegerField(default=0, null=True, blank=True)),
                ('disk_by_info', models.TextField(default=b'', blank=True)),
                ('warn_threshold', models.IntegerField(default=85, null=True, blank=True)),
                ('crit_threshold', models.IntegerField(default=95, null=True, blank=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('pnum',),
                'db_table': 'partition',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='partition_disc',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'partition_disc_idx')),
                ('disc', models.CharField(max_length=192)),
                ('label_type', models.CharField(default=b'gpt', max_length=128, choices=[(b'gpt', b'GPT'), (b'msdos', b'MSDOS')])),
                ('priority', models.IntegerField(default=0, null=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('priority', 'disc'),
                'db_table': 'partition_disc',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='partition_fs',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'partition_fs_idx')),
                ('name', models.CharField(unique=True, max_length=48)),
                ('identifier', models.CharField(max_length=3)),
                ('descr', models.CharField(max_length=765, blank=True)),
                ('hexid', models.CharField(max_length=6)),
                ('kernel_module', models.CharField(default=b'', max_length=128)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('name',),
                'db_table': 'partition_fs',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='partition_table',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'partition_table_idx')),
                ('name', models.CharField(unique=True, max_length=192)),
                ('description', models.CharField(default=b'', max_length=255, blank=True)),
                ('enabled', models.BooleanField(default=True)),
                ('valid', models.BooleanField(default=False)),
                ('modify_bootloader', models.IntegerField(default=0)),
                ('nodeboot', models.BooleanField(default=False)),
                ('user_created', models.BooleanField(default=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'partition_table',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='peer_information',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'peer_information_idx')),
                ('s_spec', models.CharField(default=b'', max_length=128, verbose_name=b'source spec', blank=True)),
                ('d_spec', models.CharField(default=b'', max_length=128, verbose_name=b'dest spec', blank=True)),
                ('penalty', models.IntegerField(default=0, verbose_name=b'cost')),
                ('autocreated', models.BooleanField(default=False)),
                ('info', models.CharField(default=b'', max_length=256, blank=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('d_netdevice', models.ForeignKey(related_name='peer_d_netdevice', to='backbone.netdevice')),
                ('s_netdevice', models.ForeignKey(related_name='peer_s_netdevice', to='backbone.netdevice')),
            ],
            options={
                'db_table': 'peer_information',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='quota_capable_blockdevice',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('block_device_path', models.CharField(default=b'', max_length=256)),
                ('mount_path', models.CharField(default=b'', max_length=512)),
                ('size', models.BigIntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(to='backbone.device')),
                ('fs_type', models.ForeignKey(to='backbone.partition_fs')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='rms_department',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=255)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='rms_job',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('jobid', models.IntegerField()),
                ('taskid', models.IntegerField(null=True)),
                ('owner', models.CharField(default=b'', max_length=255)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='rms_job_run',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('hostname', models.CharField(max_length=255)),
                ('granted_pe', models.CharField(default=b'', max_length=192)),
                ('slots', models.IntegerField(null=True)),
                ('priority', models.IntegerField(default=0)),
                ('account', models.CharField(default=b'', max_length=384)),
                ('failed', models.IntegerField(default=0)),
                ('failed_str', models.CharField(default=b'', max_length=255)),
                ('exit_status', models.IntegerField(default=0)),
                ('exit_status_str', models.CharField(default=b'', max_length=255)),
                ('queue_time', models.DateTimeField(null=True)),
                ('start_time', models.DateTimeField(null=True)),
                ('end_time', models.DateTimeField(null=True)),
                ('start_time_py', models.DateTimeField(null=True)),
                ('end_time_py', models.DateTimeField(null=True)),
                ('qacct_called', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(to='backbone.device', null=True)),
                ('rms_department', models.ForeignKey(to='backbone.rms_department', null=True)),
                ('rms_job', models.ForeignKey(to='backbone.rms_job')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='rms_pe',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=255)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='rms_pe_info',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('hostname', models.CharField(max_length=255)),
                ('slots', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(to='backbone.device', null=True)),
                ('rms_job_run', models.ForeignKey(to='backbone.rms_job_run')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='rms_project',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=255)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='rms_queue',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=255)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='snmp_network_type',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('if_type', models.IntegerField(default=0)),
                ('if_label', models.CharField(default=b'', max_length=128)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='snmp_scheme',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=128)),
                ('description', models.CharField(default=b'', max_length=128)),
                ('version', models.IntegerField(default=1)),
                ('collect', models.BooleanField(default=False)),
                ('initial', models.BooleanField(default=False)),
                ('mon_check', models.BooleanField(default=False)),
                ('priority', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='snmp_scheme_tl_oid',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('oid', models.CharField(default=b'', max_length=255)),
                ('optional', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('snmp_scheme', models.ForeignKey(to='backbone.snmp_scheme')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='snmp_scheme_vendor',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=128)),
                ('company_info', models.CharField(default=b'', max_length=256)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='status',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'status_idx')),
                ('status', models.CharField(unique=True, max_length=255)),
                ('prod_link', models.BooleanField(default=True)),
                ('memory_test', models.BooleanField(default=False)),
                ('boot_iso', models.BooleanField(default=False)),
                ('boot_local', models.BooleanField(default=False)),
                ('do_install', models.BooleanField(default=False)),
                ('is_clean', models.BooleanField(default=False)),
                ('allow_boolean_modify', models.BooleanField(default=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'status',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='sys_partition',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'sys_partition_idx')),
                ('name', models.CharField(max_length=192)),
                ('mountpoint', models.CharField(default=b'/', max_length=192)),
                ('mount_options', models.CharField(max_length=255, blank=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('partition_table', models.ForeignKey(to='backbone.partition_table')),
            ],
            options={
                'db_table': 'sys_partition',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='tree_node',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('is_dir', models.BooleanField(default=False)),
                ('is_link', models.BooleanField(default=False)),
                ('intermediate', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(default=None, to='backbone.device')),
                ('parent', models.ForeignKey(default=None, to='backbone.tree_node', null=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='user_device_login',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'user_device_login_idx')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(to='backbone.device')),
                ('user', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_device_login',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='user_object_permission',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('level', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('csw_object_permission', models.ForeignKey(to='backbone.csw_object_permission')),
                ('user', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='user_permission',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('level', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('csw_permission', models.ForeignKey(to='backbone.csw_permission')),
                ('user', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='user_quota_setting',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('bytes_used', models.BigIntegerField(default=0)),
                ('bytes_soft', models.BigIntegerField(default=0)),
                ('bytes_hard', models.BigIntegerField(default=0)),
                ('bytes_gracetime', models.IntegerField(default=0)),
                ('bytes_soft_target', models.BigIntegerField(default=0)),
                ('bytes_hard_target', models.BigIntegerField(default=0)),
                ('files_used', models.BigIntegerField(default=0)),
                ('files_soft', models.BigIntegerField(default=0)),
                ('files_hard', models.BigIntegerField(default=0)),
                ('files_gracetime', models.IntegerField(default=0)),
                ('files_soft_target', models.BigIntegerField(default=0)),
                ('files_hard_target', models.BigIntegerField(default=0)),
                ('quota_flags', models.CharField(default=b'--', max_length=4)),
                ('quota_capable_blockdevice', models.ForeignKey(to='backbone.quota_capable_blockdevice')),
                ('user', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='user_scan_result',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                # changed temporarily for Oracle initial insert
                ('full_name', models.CharField(default=b'', max_length=1900)),
                ('name', models.CharField(default=b'', max_length=384)),
                ('size', models.BigIntegerField(default=0)),
                ('size_total', models.BigIntegerField(default=0)),
                ('num_files', models.BigIntegerField(default=0)),
                ('num_dirs', models.BigIntegerField(default=0)),
                ('num_files_total', models.BigIntegerField(default=0)),
                ('num_dirs_total', models.BigIntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('parent_dir', models.ForeignKey(to='backbone.user_scan_result', null=True)),
            ],
            options={
                'ordering': ('idx',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='user_scan_run',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('current', models.BooleanField(default=False)),
                ('running', models.BooleanField(default=False)),
                ('run_time', models.IntegerField(default=0)),
                ('scan_depth', models.IntegerField(default=1)),
                ('user', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='user_variable',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('var_type', models.CharField(max_length=2, choices=[(b's', b'string'), (b'i', b'integer'), (b'b', b'boolean'), (b'n', b'none')])),
                ('name', models.CharField(max_length=189)),
                ('value', models.CharField(default=b'', max_length=512)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='virtual_desktop_protocol',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=256)),
                ('binary', models.CharField(default=b'', max_length=256)),
                ('description', models.TextField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('devices', models.ManyToManyField(to='backbone.device')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='virtual_desktop_user_setting',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('screen_size', models.CharField(max_length=256)),
                ('port', models.IntegerField(default=0)),
                ('effective_port', models.IntegerField(default=0)),
                ('websockify_port', models.IntegerField(default=0)),
                ('websockify_effective_port', models.IntegerField(default=0)),
                ('websockify_pid', models.IntegerField(default=0)),
                ('websockify_process_name', models.CharField(default=b'', max_length=256, blank=True)),
                ('password', models.CharField(default=b'', max_length=256, blank=True)),
                ('is_running', models.BooleanField(default=False)),
                ('pid', models.IntegerField(default=0)),
                ('process_name', models.CharField(default=b'', max_length=256, blank=True)),
                ('last_start_attempt', models.DateTimeField(default=datetime.datetime(1970, 1, 1, 1, 0), blank=True)),
                ('to_delete', models.BooleanField(default=False)),
                ('state', models.IntegerField(default=1)),
                ('device', models.ForeignKey(to='backbone.device')),
                ('user', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
                ('virtual_desktop_protocol', models.ForeignKey(to='backbone.virtual_desktop_protocol')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='wc_files',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True, db_column=b'wc_files_idx')),
                ('run_number', models.IntegerField(default=0)),
                ('uid', models.IntegerField(default=0, blank=True)),
                ('gid', models.IntegerField(default=0, blank=True)),
                ('mode', models.IntegerField(default=493, blank=True)),
                ('dest_type', models.CharField(max_length=8, choices=[(b'f', b'file'), (b'l', b'link'), (b'd', b'directory'), (b'e', b'erase'), (b'c', b'copy'), (b'i', b'internal')])),
                ('source', models.CharField(max_length=1024)),
                ('dest', models.CharField(max_length=1024)),
                ('error_flag', models.BooleanField(default=False)),
                ('content', models.TextField(default=b'', blank=True)),
                ('binary', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('config', models.ManyToManyField(to='backbone.config')),
                ('device', models.ForeignKey(to='backbone.device')),
                ('tree_node', models.OneToOneField(null=True, default=None, to='backbone.tree_node')),
            ],
            options={
                'db_table': 'wc_files',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='window_manager',
            fields=[
                ('idx', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=256)),
                ('binary', models.CharField(default=b'', max_length=256)),
                ('description', models.TextField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('devices', models.ManyToManyField(to='backbone.device')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.AddField(
            model_name='virtual_desktop_user_setting',
            name='window_manager',
            field=models.ForeignKey(to='backbone.window_manager'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='user_variable',
            unique_together=set([('name', 'user')]),
        ),
        migrations.AddField(
            model_name='user_scan_result',
            name='user_scan_run',
            field=models.ForeignKey(to='backbone.user_scan_run'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='snmp_scheme',
            name='snmp_scheme_vendor',
            field=models.ForeignKey(to='backbone.snmp_scheme_vendor'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='rms_job_run',
            name='rms_pe',
            field=models.ForeignKey(to='backbone.rms_pe', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='rms_job_run',
            name='rms_project',
            field=models.ForeignKey(to='backbone.rms_project', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='rms_job_run',
            name='rms_queue',
            field=models.ForeignKey(to='backbone.rms_queue'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='partition_disc',
            name='partition_table',
            field=models.ForeignKey(to='backbone.partition_table'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='partition',
            name='partition_disc',
            field=models.ForeignKey(to='backbone.partition_disc'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='partition',
            name='partition_fs',
            field=models.ForeignKey(to='backbone.partition_fs'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='package_repo',
            name='service',
            field=models.ForeignKey(blank=True, to='backbone.package_service', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='package',
            name='package_repo',
            field=models.ForeignKey(to='backbone.package_repo', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='package',
            name='target_repo',
            field=models.ForeignKey(related_name='target_repo_package', to='backbone.package_repo', null=True),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='package',
            unique_together=set([('name', 'version', 'arch', 'kind', 'target_repo')]),
        ),
        migrations.AddField(
            model_name='network',
            name='network_device_type',
            field=models.ManyToManyField(to='backbone.network_device_type'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='network',
            name='network_type',
            field=models.ForeignKey(to='backbone.network_type'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='netdevice',
            name='netdevice_speed',
            field=models.ForeignKey(to='backbone.netdevice_speed'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='netdevice',
            name='network_device_type',
            field=models.ForeignKey(to='backbone.network_device_type'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='netdevice',
            name='snmp_network_type',
            field=models.ForeignKey(blank=True, to='backbone.snmp_network_type', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='net_ip',
            name='netdevice',
            field=models.ForeignKey(to='backbone.netdevice'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='net_ip',
            name='network',
            field=models.ForeignKey(to='backbone.network'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mon_service_dependency',
            name='mon_service_dependency_templ',
            field=models.ForeignKey(to='backbone.mon_service_dependency_templ'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mon_service_cluster',
            name='mon_service_templ',
            field=models.ForeignKey(to='backbone.mon_service_templ'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mon_icinga_log_aggregated_service_data',
            name='timespan',
            field=models.ForeignKey(to='backbone.mon_icinga_log_aggregated_timespan'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mon_icinga_log_aggregated_host_data',
            name='timespan',
            field=models.ForeignKey(to='backbone.mon_icinga_log_aggregated_timespan'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mon_host_dependency_templ',
            name='dependency_period',
            field=models.ForeignKey(to='backbone.mon_period'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mon_host_dependency',
            name='mon_host_dependency_templ',
            field=models.ForeignKey(to='backbone.mon_host_dependency_templ'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mon_host_cluster',
            name='mon_service_templ',
            field=models.ForeignKey(to='backbone.mon_service_templ'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mon_device_templ',
            name='mon_period',
            field=models.ForeignKey(related_name='dev_check_period', to='backbone.mon_period'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mon_device_templ',
            name='mon_service_templ',
            field=models.ForeignKey(to='backbone.mon_service_templ'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mon_device_templ',
            name='not_period',
            field=models.ForeignKey(related_name='dev_notify_period', to='backbone.mon_period'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mon_device_esc_templ',
            name='esc_period',
            field=models.ForeignKey(to='backbone.mon_period'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mon_device_esc_templ',
            name='mon_service_esc_templ',
            field=models.ForeignKey(to='backbone.mon_service_esc_templ'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mon_contactgroup',
            name='service_esc_templates',
            field=models.ManyToManyField(to='backbone.mon_service_esc_templ', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mon_contactgroup',
            name='service_templates',
            field=models.ManyToManyField(to='backbone.mon_service_templ', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mon_contact',
            name='hnperiod',
            field=models.ForeignKey(related_name='host_n_period', verbose_name=b'host period', to='backbone.mon_period'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mon_contact',
            name='notifications',
            field=models.ManyToManyField(to='backbone.mon_notification', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mon_contact',
            name='snperiod',
            field=models.ForeignKey(related_name='service_n_period', verbose_name=b'service period', to='backbone.mon_period'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mon_contact',
            name='user',
            field=models.ForeignKey(to=settings.AUTH_USER_MODEL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mon_check_command',
            name='mon_check_command_special',
            field=models.ForeignKey(blank=True, to='backbone.mon_check_command_special', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mon_check_command',
            name='mon_check_command_type',
            field=models.ForeignKey(default=None, blank=True, to='backbone.mon_check_command_type', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mon_check_command',
            name='mon_service_templ',
            field=models.ForeignKey(blank=True, to='backbone.mon_service_templ', null=True),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='mon_check_command',
            unique_together=set([('name', 'config')]),
        ),
        migrations.AddField(
            model_name='mon_build_unreachable',
            name='mon_dist_master',
            field=models.ForeignKey(to='backbone.mon_dist_master'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='lvm_vg',
            name='partition_table',
            field=models.ForeignKey(to='backbone.partition_table'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='lvm_lv',
            name='lvm_vg',
            field=models.ForeignKey(to='backbone.lvm_vg'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='lvm_lv',
            name='partition_fs',
            field=models.ForeignKey(to='backbone.partition_fs'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='lvm_lv',
            name='partition_table',
            field=models.ForeignKey(to='backbone.partition_table'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='initrd_build',
            name='kernel',
            field=models.ForeignKey(to='backbone.kernel'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='group_quota_setting',
            name='quota_capable_blockdevice',
            field=models.ForeignKey(to='backbone.quota_capable_blockdevice'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='group',
            name='object_perms',
            field=models.ManyToManyField(related_name='db_group_perms', through='backbone.group_object_permission', to='backbone.csw_object_permission', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='group',
            name='parent_group',
            field=models.ForeignKey(blank=True, to='backbone.group', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='group',
            name='permissions',
            field=models.ManyToManyField(related_name='db_group_permissions', to='backbone.csw_permission', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='group',
            name='perms',
            field=models.ManyToManyField(related_name='db_group_perms', through='backbone.group_permission', to='backbone.csw_permission', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='ext_license_usage_coarse',
            name='ext_license_user',
            field=models.ForeignKey(to='backbone.ext_license_user'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='ext_license_usage_coarse',
            name='ext_license_version_state_coarse',
            field=models.ForeignKey(to='backbone.ext_license_version_state_coarse'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='ext_license_usage',
            name='ext_license_user',
            field=models.ForeignKey(to='backbone.ext_license_user'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='ext_license_usage',
            name='ext_license_version_state',
            field=models.ForeignKey(to='backbone.ext_license_version_state'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='ext_license_check_coarse',
            name='ext_license_site',
            field=models.ForeignKey(to='backbone.ext_license_site', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='ext_license_check',
            name='ext_license_site',
            field=models.ForeignKey(to='backbone.ext_license_site', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='ext_license',
            name='ext_license_site',
            field=models.ForeignKey(to='backbone.ext_license_site'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='devicelogentry',
            name='level',
            field=models.ForeignKey(to='backbone.LogLevel'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='devicelogentry',
            name='source',
            field=models.ForeignKey(to='backbone.LogSource'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='devicelogentry',
            name='user',
            field=models.ForeignKey(to=settings.AUTH_USER_MODEL, null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='devicelog',
            name='log_source',
            field=models.ForeignKey(to='backbone.log_source', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='devicelog',
            name='log_status',
            field=models.ForeignKey(to='backbone.log_status', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='devicelog',
            name='user',
            field=models.ForeignKey(to=settings.AUTH_USER_MODEL, null=True),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='device_variable',
            unique_together=set([('name', 'device')]),
        ),
        migrations.AddField(
            model_name='device_mon_location',
            name='location_gfx',
            field=models.ForeignKey(to='backbone.location_gfx'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='device_group',
            name='domain_tree_node',
            field=models.ForeignKey(default=None, to='backbone.domain_tree_node', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='device',
            name='act_image',
            field=models.ForeignKey(related_name='act_image', to='backbone.image', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='device',
            name='act_kernel',
            field=models.ForeignKey(related_name='act_kernel', to='backbone.kernel', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='device',
            name='act_partition_table',
            field=models.ForeignKey(related_name='act_partition_table', blank=True, to='backbone.partition_table', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='device',
            name='bootnetdevice',
            field=models.ForeignKey(related_name='boot_net_device', on_delete=django.db.models.deletion.SET_NULL, to='backbone.netdevice', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='device',
            name='bootserver',
            field=models.ForeignKey(related_name='boot_server', blank=True, to='backbone.device', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='device',
            name='categories',
            field=models.ManyToManyField(to='backbone.category'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='device',
            name='device_group',
            field=models.ForeignKey(related_name='device_group', to='backbone.device_group'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='device',
            name='device_type',
            field=models.ForeignKey(to='backbone.device_type'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='device',
            name='domain_tree_node',
            field=models.ForeignKey(default=None, to='backbone.domain_tree_node', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='device',
            name='master_connections',
            field=models.ManyToManyField(related_name='slave_connections', through='backbone.cd_connection', to='backbone.device'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='device',
            name='mon_device_esc_templ',
            field=models.ForeignKey(blank=True, to='backbone.mon_device_esc_templ', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='device',
            name='mon_device_templ',
            field=models.ForeignKey(blank=True, to='backbone.mon_device_templ', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='device',
            name='mon_ext_host',
            field=models.ForeignKey(blank=True, to='backbone.mon_ext_host', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='device',
            name='monitor_server',
            field=models.ForeignKey(blank=True, to='backbone.device', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='device',
            name='nagvis_parent',
            field=models.ForeignKey(related_name='nagvis_childs', blank=True, to='backbone.device', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='device',
            name='new_image',
            field=models.ForeignKey(related_name='new_image', to='backbone.image', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='device',
            name='new_kernel',
            field=models.ForeignKey(related_name='new_kernel', to='backbone.kernel', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='device',
            name='new_state',
            field=models.ForeignKey(db_column=b'newstate_id', blank=True, to='backbone.status', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='device',
            name='partition_table',
            field=models.ForeignKey(related_name='new_partition_table', to='backbone.partition_table', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='device',
            name='prod_link',
            field=models.ForeignKey(db_column=b'prod_link', blank=True, to='backbone.network', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='device',
            name='snmp_schemes',
            field=models.ManyToManyField(to='backbone.snmp_scheme'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='device',
            unique_together=set([('name', 'domain_tree_node')]),
        ),
    ])
    if not db_limit_1():
        operations.append(
            migrations.AlterUniqueTogether(
                name='deleterequest',
                unique_together=set([('obj_pk', 'model')]),
            )
        )
    operations.extend([
        migrations.AlterUniqueTogether(
            name='csw_permission',
            unique_together=set([('content_type', 'codename')]),
        ),
        migrations.AddField(
            model_name='csw_object_permission',
            name='csw_permission',
            field=models.ForeignKey(to='backbone.csw_permission'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='config_str',
            name='device',
            field=models.ForeignKey(blank=True, to='backbone.device', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='config_script',
            name='device',
            field=models.ForeignKey(blank=True, to='backbone.device', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='config_int',
            name='device',
            field=models.ForeignKey(blank=True, to='backbone.device', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='config_bool',
            name='device',
            field=models.ForeignKey(blank=True, to='backbone.device', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='config_blob',
            name='device',
            field=models.ForeignKey(blank=True, to='backbone.device', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='config',
            name='config_catalog',
            field=models.ForeignKey(to='backbone.config_catalog', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='config',
            name='parent_config',
            field=models.ForeignKey(blank=True, to='backbone.config', null=True),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='config',
            unique_together=set([('name', 'config_catalog')]),
        ),
        migrations.AddField(
            model_name='cd_connection',
            name='child',
            field=models.ForeignKey(related_name='child_device', to='backbone.device'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='cd_connection',
            name='created_by',
            field=models.ForeignKey(to=settings.AUTH_USER_MODEL, null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='cd_connection',
            name='parent',
            field=models.ForeignKey(related_name='parent_device', to='backbone.device'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='background_job_run',
            name='log_source',
            field=models.ForeignKey(default=None, to='backbone.log_source', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='background_job_run',
            name='server',
            field=models.ForeignKey(to='backbone.device'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='background_job_run',
            name='source',
            field=models.ForeignKey(default=None, to='backbone.LogSource', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='background_job',
            name='initiator',
            field=models.ForeignKey(related_name='bgj_initiator', to='backbone.device'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='background_job',
            name='target_server',
            field=models.ForeignKey(related_name='bgj_target_server', to='backbone.device', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='background_job',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='user',
            name='allowed_device_groups',
            field=models.ManyToManyField(to='backbone.device_group', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='user',
            name='export',
            field=models.ForeignKey(related_name='export', blank=True, to='backbone.device_config', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='user',
            name='group',
            field=models.ForeignKey(to='backbone.group'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='user',
            name='object_permissions',
            field=models.ManyToManyField(related_name='db_user_permissions', to='backbone.csw_object_permission', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='user',
            name='object_perms',
            field=models.ManyToManyField(related_name='db_user_perms', through='backbone.user_object_permission', to='backbone.csw_object_permission', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='user',
            name='permissions',
            field=models.ManyToManyField(related_name='db_user_permissions', to='backbone.csw_permission', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='user',
            name='perms',
            field=models.ManyToManyField(related_name='db_user_perms', through='backbone.user_permission', to='backbone.csw_permission', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='user',
            name='secondary_groups',
            field=models.ManyToManyField(related_name='secondary', to='backbone.group', blank=True),
            preserve_default=True,
        ),
    ])
